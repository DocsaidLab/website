"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["40331"],{10788:function(n,e,r){r.r(e),r.d(e,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return t},metadata:function(){return i},toc:function(){return c}});var i=r(61414),s=r(85893),o=r(50065);let t={slug:"python-env-info-collector",title:"\u8A18\u9304\u8207\u6392\u67E5\u6A21\u578B\u8A13\u7DF4\u74B0\u5883\u554F\u984C",authors:"Z. Yuan",tags:["python","training-log"],image:"/img/2023/0922.webp",description:"\u81EA\u5DF1\u624B\u523B\u7684\u7D00\u9304\u5DE5\u5177\uFF0C\u5206\u4EAB\u7D66\u5927\u5BB6\u4F7F\u7528\u3002"},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"\u5B89\u88DD",id:"\u5B89\u88DD",level:2},{value:"\u4F7F\u7528 <code>get_package_versions</code>",id:"\u4F7F\u7528-get_package_versions",level:2},{value:"\u4F7F\u7528 <code>get_gpu_cuda_versions</code>",id:"\u4F7F\u7528-get_gpu_cuda_versions",level:2},{value:"\u4F7F\u7528 <code>get_system_info</code>",id:"\u4F7F\u7528-get_system_info",level:2},{value:"\u6CE8\u610F\u4E8B\u9805\u8207\u66FF\u4EE3\u65B9\u6848",id:"\u6CE8\u610F\u4E8B\u9805\u8207\u66FF\u4EE3\u65B9\u6848",level:2},{value:"\u7A0B\u5F0F\u78BC",id:"\u7A0B\u5F0F\u78BC",level:2}];function d(n){let e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"\u7576\u6A21\u578B train \u58DE\u4E86\uFF0C\u6211\u5011\u7E3D\u662F\u6703\u60F3\u77E5\u9053\u662F\u4EC0\u9EBC\u539F\u56E0\u5C0E\u81F4\u7684\uFF0C\u9019\u6642\u5019\u6211\u5011\u9700\u8981\u6AA2\u67E5\u8A13\u7DF4\u4E3B\u6A5F\u7684\u74B0\u5883\u8CC7\u8A0A\uFF0C\u4F8B\u5982\uFF1APython \u7248\u672C\u3001PyTorch \u7248\u672C\u3001CUDA \u7248\u672C\u3001GPU \u8CC7\u8A0A\u3001CPU \u8CC7\u8A0A\u3001RAM \u8CC7\u8A0A\u3001\u78C1\u789F\u8CC7\u8A0A\u3001IP \u5730\u5740\u7B49\u7B49\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u6211\u5011\u5206\u4EAB\u4E00\u500B\u81EA\u5DF1\u624B\u523B\u7684 Python \u5C0F\u5DE5\u5177\uFF0C\u53EF\u4EE5\u5FEB\u901F\u67E5\u770B\u9019\u4E9B\u8CC7\u8A0A\uFF0C\u96D6\u7136\u8AAA\u4E0D\u662F\u5305\u5C71\u5305\u6D77\uFF0C\u4F46\u57FA\u672C\u7684\u554F\u984C\u6392\u67E5\u61C9\u8A72\u8DB3\u5920\u7528\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u4E00\u822C\u4F86\u8AAA\uFF0C\u6211\u5011\u6703\u5728\u8A13\u7DF4\u555F\u52D5\u7684\u74B0\u7BC0\uFF0C\u5C07\u74B0\u5883\u8CC7\u8A0A\u7D00\u9304\u5230\u8A13\u7DF4\u4E3B\u6A5F\u7684\u65E5\u8A8C\u88E1\u9762\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u5B89\u88DD",children:"\u5B89\u88DD"}),"\n",(0,s.jsx)(e.p,{children:"\u6211\u5011\u5148\u5B89\u88DD\u5FC5\u8981\u5957\u4EF6\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"pip install psutil requests\n"})}),"\n",(0,s.jsxs)(e.admonition,{type:"tip",children:[(0,s.jsx)(e.p,{children:"\u5B8C\u6574\u7684\u7A0B\u5F0F\u78BC\u5728 Github \u4E0A\uFF0C\u4E26\u4E14\u6211\u5011\u540C\u6B65\u653E\u5728\u672C\u7BC7\u6587\u7AE0\u7684\u6700\u5F8C\u9762\u3002"}),(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/DocsaidLab/Capybara/blob/main/capybara/utils/system_info.py",children:(0,s.jsx)(e.strong,{children:"system_info.py"})})}),"\n"]})]}),"\n",(0,s.jsxs)(e.h2,{id:"\u4F7F\u7528-get_package_versions",children:["\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"get_package_versions"})]}),"\n",(0,s.jsxs)(e.p,{children:["\u6211\u5011\u5047\u8A2D\u4F60\u6709\u5B89\u88DD ",(0,s.jsx)(e.code,{children:"capybara"}),"\uFF0C\u4E26\u4E14\u5DF2\u7D93\u5728\u5C08\u6848\u88E1\u9762\uFF0C\u5247\u53EF\u4EE5\u900F\u904E\u4EE5\u4E0B\u6307\u4EE4\u6E2C\u8A66\uFF1A"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from capybara import get_package_versions\n\nget_package_versions()\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u57F7\u884C\u5F8C\u5F97\u5230\u7D50\u679C\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "PyTorch Version": "2.1.1+cu121",\n  "PyTorch Lightning Version": "2.1.2",\n  "TensorFlow Error": "No module named \'tensorflow\'",\n  "Keras Error": "No module named \'keras\'",\n  "NumPy Version": "1.24.4",\n  "Pandas Version": "2.0.3",\n  "Scikit-learn Version": "1.3.2",\n  "OpenCV Version": "4.8.1"\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"PyTorch Version: PyTorch \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"PyTorch Lightning Version: PyTorch Lightning \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"TensorFlow Error: TensorFlow \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"Keras Error: Keras \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"NumPy Version: NumPy \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"Pandas Version: Pandas \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"Scikit-learn Version: Scikit-learn \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"OpenCV Version: OpenCV \u7248\u672C"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"\u4F7F\u7528-get_gpu_cuda_versions",children:["\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"get_gpu_cuda_versions"})]}),"\n",(0,s.jsx)(e.p,{children:"\u6E2C\u8A66\u7A0B\u5F0F\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from capybara import get_gpu_cuda_versions\n\nget_gpu_cuda_versions()\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u57F7\u884C\u5F8C\u5F97\u5230\u7D50\u679C\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "CUDA Version": "12.1",\n  "NVIDIA Driver Version": "535.129.03"\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"CUDA Version: CUDA \u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"NVIDIA Driver Version: NVIDIA \u9A45\u52D5\u7248\u672C"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"\u4F7F\u7528-get_system_info",children:["\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"get_system_info"})]}),"\n",(0,s.jsx)(e.p,{children:"\u6E2C\u8A66\u7A0B\u5F0F\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from capybara import get_system_info\n\nget_system_info()\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u57F7\u884C\u5F8C\u5F97\u5230\u7D50\u679C\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "OS Version": "Linux-6.2.0-37-generic-x86_64-with-glibc2.34",\n  "CPU Model": "13th Gen Intel(R) Core(TM) i9-13900K",\n  "Physical CPU Cores": 24,\n  "Logical CPU Cores (incl. hyper-threading)": 32,\n  "Total RAM (GB)": 125.56,\n  "Available RAM (GB)": 110.9,\n  "Disk Total (GB)": 1832.21,\n  "Disk Used (GB)": 188.94,\n  "Disk Free (GB)": 1550.12,\n  "GPU Info": "NVIDIA GeForce RTX 4090",\n  "IPV4 Address": ["192.168.---.---"],\n  "IPV4 Address (External)": "---.---.---.---",\n  "MAC Address": ["--.--.--.--.--.--"]\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"OS Version: \u4F5C\u696D\u7CFB\u7D71\u7248\u672C"}),"\n",(0,s.jsx)(e.li,{children:"CPU Model: CPU \u578B\u865F"}),"\n",(0,s.jsx)(e.li,{children:"Physical CPU Cores: \u7269\u7406 CPU \u6838\u5FC3\u6578"}),"\n",(0,s.jsx)(e.li,{children:"Logical CPU Cores (incl. hyper-threading): \u908F\u8F2F CPU \u6838\u5FC3\u6578 (\u5305\u62EC\u8D85\u57F7\u884C\u7DD2)"}),"\n",(0,s.jsx)(e.li,{children:"Total RAM (GB): \u7E3D RAM \u5BB9\u91CF (GB)"}),"\n",(0,s.jsx)(e.li,{children:"Available RAM (GB): \u53EF\u7528 RAM \u5BB9\u91CF (GB)"}),"\n",(0,s.jsx)(e.li,{children:"Disk Total (GB): \u78C1\u789F\u7E3D\u5BB9\u91CF (GB)"}),"\n",(0,s.jsx)(e.li,{children:"Disk Used (GB): \u5DF2\u4F7F\u7528\u7684\u78C1\u789F\u5BB9\u91CF (GB)"}),"\n",(0,s.jsx)(e.li,{children:"Disk Free (GB): \u7A7A\u9592\u78C1\u789F\u5BB9\u91CF (GB)"}),"\n",(0,s.jsx)(e.li,{children:"GPU Info: GPU \u8CC7\u8A0A"}),"\n",(0,s.jsx)(e.li,{children:"IPV4 Address: \u5167\u90E8 IPV4 \u5730\u5740"}),"\n",(0,s.jsx)(e.li,{children:"IPV4 Address (External): \u5916\u90E8 IPV4 \u5730\u5740"}),"\n",(0,s.jsx)(e.li,{children:"MAC Address: MAC \u5730\u5740"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u6CE8\u610F\u4E8B\u9805\u8207\u66FF\u4EE3\u65B9\u6848",children:"\u6CE8\u610F\u4E8B\u9805\u8207\u66FF\u4EE3\u65B9\u6848"}),"\n",(0,s.jsx)(e.p,{children:"\u7531\u65BC\u6211\u5011\u662F\u5728 Ubuntu \u4E0A\u64B0\u5BEB\u672C\u51FD\u6578\uFF0C\u56E0\u6B64\u5728\u5176\u4ED6\u4F5C\u696D\u7CFB\u7D71\u4E0A\u53EF\u80FD\u6703\u6709\u5287\u60C5\u4E4B\u5916\u7684\u767C\u5C55\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u4EE5\u4E0B\u5E7E\u500B\u53EF\u80FD\u9700\u8981\u6CE8\u610F\u7684\u8981\u9EDE\uFF1A"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\u56E0\u4F5C\u696D\u7CFB\u7D71\u7684\u9650\u5236\uFF0C\u67D0\u4E9B\u51FD\u6578\u53EF\u80FD\u7121\u6CD5\u5728\u6240\u6709\u5E73\u53F0\u4E0A\u904B\u884C\u3002\u4F8B\u5982\uFF1A",(0,s.jsx)(e.code,{children:"get_cpu_info"})," \u5728 Windows \u4E0A\u4E0D\u6703\u986F\u793A\u5B8C\u6574\u7684 CPU \u578B\u865F\u3002\u5728\u9019\u7A2E\u60C5\u6CC1\u4E0B\uFF0C\u4F60\u53EF\u4EE5\u8003\u616E\u4F7F\u7528\u5176\u4ED6\u5DE5\u5177\u6216\u624B\u52D5\u7372\u53D6\u6B64\u8CC7\u8A0A\u3002"]}),"\n",(0,s.jsxs)(e.li,{children:["\u5982\u679C\u4F60\u5728 Windows \u74B0\u5883\u4E2D\uFF0C\u7121\u6CD5\u76F4\u63A5\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"nvidia-smi"})," \u4F86\u7372\u53D6 GPU \u8CC7\u8A0A\uFF0C\u8ACB\u78BA\u4FDD\u5DF2\u5B89\u88DD NVIDIA \u9A45\u52D5\u548C\u76F8\u95DC\u7684\u5DE5\u5177\uFF0C\u4E26\u5728\u547D\u4EE4\u63D0\u793A\u7B26\u8996\u7A97\u4E2D\u57F7\u884C\u5B83\u3002"]}),"\n",(0,s.jsxs)(e.li,{children:["\u5916\u90E8 IP \u5730\u5740\u662F\u5F9E ",(0,s.jsx)(e.code,{children:"https://httpbin.org/ip"})," \u7372\u53D6\u7684\uFF0C\u6240\u4EE5\u5FC5\u9808\u78BA\u4FDD\u7DB2\u8DEF\u9023\u7DDA\u662F\u6D3B\u8E8D\u7684\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u7A0B\u5F0F\u78BC",children:"\u7A0B\u5F0F\u78BC"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'import platform\nimport socket\nimport subprocess\n\nimport psutil\nimport requests\n\n\ndef get_package_versions():\n    """\n    Get versions of commonly used packages in deep learning and data science.\n\n    Returns:\n        dict: Dictionary containing versions of installed packages.\n    """\n    versions_info = {}\n\n    # PyTorch\n    try:\n        import torch\n        versions_info["PyTorch Version"] = torch.__version__\n    except Exception as e:\n        versions_info["PyTorch Error"] = str(e)\n\n    # PyTorch Lightning\n    try:\n        import pytorch_lightning as pl\n        versions_info["PyTorch Lightning Version"] = pl.__version__\n    except Exception as e:\n        versions_info["PyTorch Lightning Error"] = str(e)\n\n    # TensorFlow\n    try:\n        import tensorflow as tf\n        versions_info["TensorFlow Version"] = tf.__version__\n    except Exception as e:\n        versions_info["TensorFlow Error"] = str(e)\n\n    # Keras\n    try:\n        import keras\n        versions_info["Keras Version"] = keras.__version__\n    except Exception as e:\n        versions_info["Keras Error"] = str(e)\n\n    # NumPy\n    try:\n        import numpy as np\n        versions_info["NumPy Version"] = np.__version__\n    except Exception as e:\n        versions_info["NumPy Error"] = str(e)\n\n    # Pandas\n    try:\n        import pandas as pd\n        versions_info["Pandas Version"] = pd.__version__\n    except Exception as e:\n        versions_info["Pandas Error"] = str(e)\n\n    # Scikit-learn\n    try:\n        import sklearn\n        versions_info["Scikit-learn Version"] = sklearn.__version__\n    except Exception as e:\n        versions_info["Scikit-learn Error"] = str(e)\n\n    # OpenCV\n    try:\n        import cv2\n        versions_info["OpenCV Version"] = cv2.__version__\n    except Exception as e:\n        versions_info["OpenCV Error"] = str(e)\n\n    # ... and so on for any other packages you"re interested in\n\n    return versions_info\n\n\ndef get_gpu_cuda_versions():\n    """\n    Get GPU and CUDA versions using popular Python libraries.\n\n    Returns:\n        dict: Dictionary containing CUDA and GPU driver versions.\n    """\n\n    cuda_version = None\n\n    # Attempt to retrieve CUDA version using PyTorch\n    try:\n        import torch\n        cuda_version = torch.version.cuda\n    except ImportError:\n        pass\n\n    # If not retrieved via PyTorch, try using TensorFlow\n    if not cuda_version:\n        try:\n            import tensorflow as tf\n            cuda_version = tf.version.COMPILER_VERSION\n        except ImportError:\n            pass\n\n    # If still not retrieved, try using CuPy\n    if not cuda_version:\n        try:\n            import cupy\n            cuda_version = cupy.cuda.runtime.runtimeGetVersion()\n        except ImportError:\n            cuda_version = "Error: None of PyTorch, TensorFlow, or CuPy are installed."\n\n    # Try to get Nvidia driver version using nvidia-smi command\n    try:\n        smi_output = subprocess.check_output([\n            "nvidia-smi",\n            "--query-gpu=driver_version",\n            "--format=csv,noheader,nounits"\n        ]).decode("utf-8").strip()\n        nvidia_driver_version = smi_output.split("\\n")[0]\n    except Exception as e:\n        nvidia_driver_version = f"Error getting NVIDIA driver version: {e}"\n\n    return {\n        "CUDA Version": cuda_version,\n        "NVIDIA Driver Version": nvidia_driver_version\n    }\n\n\ndef get_cpu_info():\n    """\n    Retrieve the CPU model name based on the platform.\n\n    Returns:\n        str: CPU model name or "N/A" if not found.\n    """\n    if platform.system() == "Windows":\n        return platform.processor()\n    elif platform.system() == "Darwin":\n        # For macOS\n        command = "sysctl -n machdep.cpu.brand_string"\n        return subprocess.check_output(command, shell=True).strip().decode()\n    elif platform.system() == "Linux":\n        # For Linux\n        command = "cat /proc/cpuinfo | grep "model name" | uniq"\n        return subprocess.check_output(command, shell=True).strip().decode().split(":")[1].strip()\n    else:\n        return "N/A"\n\n\ndef get_external_ip():\n    try:\n        response = requests.get("https://httpbin.org/ip")\n        return response.json()["origin"]\n    except Exception as e:\n        return f"Error obtaining IP: {e}"\n\n\ndef get_system_info():\n    """\n    Fetch system information like OS version, CPU info, RAM, Disk usage, etc.\n\n    Returns:\n        dict: Dictionary containing system information.\n    """\n    info = {\n        "OS Version": platform.platform(),\n        "CPU Model": get_cpu_info(),\n        "Physical CPU Cores": psutil.cpu_count(logical=False),\n        "Logical CPU Cores (incl. hyper-threading)": psutil.cpu_count(logical=True),\n        "Total RAM (GB)": round(psutil.virtual_memory().total / (1024 ** 3), 2),\n        "Available RAM (GB)": round(psutil.virtual_memory().available / (1024 ** 3), 2),\n        "Disk Total (GB)": round(psutil.disk_usage("/").total / (1024 ** 3), 2),\n        "Disk Used (GB)": round(psutil.disk_usage("/").used / (1024 ** 3), 2),\n        "Disk Free (GB)": round(psutil.disk_usage("/").free / (1024 ** 3), 2)\n    }\n\n    # Try to fetch GPU information using nvidia-smi command\n    try:\n        gpu_info = subprocess.check_output(\n            ["nvidia-smi", "--query-gpu=name", "--format=csv,noheader,nounits"]\n        ).decode("utf-8").strip()\n        info["GPU Info"] = gpu_info\n    except Exception:\n        info["GPU Info"] = "N/A or Error"\n\n    # Get network information\n    addrs = psutil.net_if_addrs()\n    info["IPV4 Address"] = [\n        addr.address for addr in addrs.get("enp5s0", []) if addr.family == socket.AF_INET\n    ]\n\n    info["IPV4 Address (External)"] = get_external_ip()\n\n    # Determine platform and choose correct address family for MAC\n    if hasattr(socket, "AF_LINK"):\n        AF_LINK = socket.AF_LINK\n    elif hasattr(psutil, "AF_LINK"):\n        AF_LINK = psutil.AF_LINK\n    else:\n        raise Exception(\n            "Cannot determine the correct AF_LINK value for this platform.")\n\n    info["MAC Address"] = [\n        addr.address for addr in addrs.get("enp5s0", []) if addr.family == AF_LINK\n    ]\n\n    return info\n'})})]})}function p(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},50065:function(n,e,r){r.d(e,{Z:function(){return a},a:function(){return t}});var i=r(67294);let s={},o=i.createContext(s);function t(n){let e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),i.createElement(o.Provider,{value:e},n.children)}},61414:function(n){n.exports=JSON.parse('{"permalink":"/blog/python-env-info-collector","source":"@site/blog/2023/09-22-python-env-info-collector/index.md","title":"\u8A18\u9304\u8207\u6392\u67E5\u6A21\u578B\u8A13\u7DF4\u74B0\u5883\u554F\u984C","description":"\u81EA\u5DF1\u624B\u523B\u7684\u7D00\u9304\u5DE5\u5177\uFF0C\u5206\u4EAB\u7D66\u5927\u5BB6\u4F7F\u7528\u3002","date":"2023-09-22T00:00:00.000Z","tags":[{"inline":true,"label":"python","permalink":"/blog/tags/python"},{"inline":true,"label":"training-log","permalink":"/blog/tags/training-log"}],"readingTime":6.905,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"python-env-info-collector","title":"\u8A18\u9304\u8207\u6392\u67E5\u6A21\u578B\u8A13\u7DF4\u74B0\u5883\u554F\u984C","authors":"Z. Yuan","tags":["python","training-log"],"image":"/img/2023/0922.webp","description":"\u81EA\u5DF1\u624B\u523B\u7684\u7D00\u9304\u5DE5\u5177\uFF0C\u5206\u4EAB\u7D66\u5927\u5BB6\u4F7F\u7528\u3002"},"unlisted":false,"prevItem":{"title":"\u4F7F\u7528 pyenv \u7BA1\u7406 Python \u7248\u672C","permalink":"/blog/pyenv-installation"},"nextItem":{"title":"\u642D\u5EFA PyPiServer \u8A18\u9304","permalink":"/blog/setting-up-pypiserver-on-ubuntu-with-docker"}}')}}]);