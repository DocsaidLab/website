"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["60218"],{39309:function(e,n,t){t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=t(14860),o=t(74848),r=t(84429);let s={slug:"mac-forticlient-vpn-split-routing",title:"FortiClient VPN Split Routing Configuration and Route Testing",authors:"Z. Yuan",tags:["vpn-routing","macos","forticlient"],image:"/en/img/2025/0802.jpg",description:"Let FortiClient handle only the company intranet, while all other traffic returns locally."},a,l={authorsImageUrls:[void 0]},c=[{value:"Why did it fail?",id:"why-did-it-fail",level:2},{value:"So?",id:"so",level:2},{value:"Step 1: Modify routes",id:"step-1-modify-routes",level:2},{value:"Step 2: Restore local default route",id:"step-2-restore-local-default-route",level:2},{value:"Step 3: Add intranet-specific route",id:"step-3-add-intranet-specific-route",level:2},{value:"Step 4: Verify if settings take effect",id:"step-4-verify-if-settings-take-effect",level:2},{value:"Complete script",id:"complete-script",level:2}];function d(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"I previously shared how to modify VPN routes."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Background: ",(0,o.jsx)(n.a,{href:"/en/blog/mac-selective-vpn-routing",children:(0,o.jsx)(n.strong,{children:"Configuring Selective Traffic Routing for VPN"})})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Back then, the VPN used L2TP mode, and routes could be modified through the ",(0,o.jsx)(n.code,{children:"/etc/ppp/ip-up"})," script."]}),"\n",(0,o.jsxs)(n.p,{children:["Later, due to work requirements, I switched to a new VPN tool: ",(0,o.jsx)(n.strong,{children:"FortiClient"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Then the original method stopped working."}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsx)(n.p,{children:"FortiClient is a security endpoint solution developed by Fortinet, commonly used for the following purposes:"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"VPN Connection Tool"}),"\nFortiClient supports SSL VPN and IPSec VPN, enabling users to securely access the company intranet remotely. It can integrate with FortiGate firewall policies to provide enterprise-grade network security and connection control."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Endpoint Protection"}),"\nBesides VPN functionalities, FortiClient also offers malware protection, web filtering, behavior analysis, and other features to enhance the security of user devices."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Integration with Fortinet Ecosystem"}),"\nIt integrates with other Fortinet products (such as FortiGate, FortiAnalyzer, EMS) to provide unified security monitoring and management."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Cross-Platform Support"}),"\nFortiClient supports multiple platforms including Windows, macOS, Linux, iOS, and Android, facilitating unified deployment and management within enterprises."]}),"\n"]}),"\n"]}),(0,o.jsx)(n.p,{children:"In short, FortiClient is an enterprise client tool combining remote connectivity and security protection, particularly suitable for organizations that require strict control over internal network access permissions."})]}),"\n",(0,o.jsx)(n.h2,{id:"why-did-it-fail",children:"Why did it fail?"}),"\n",(0,o.jsxs)(n.p,{children:["FortiClient creates a ",(0,o.jsx)(n.code,{children:"utunX"})," virtual interface on macOS and actively pushes a full set of ",(0,o.jsx)(n.strong,{children:"default routes"}),", typically including:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"0.0.0.0/1      \u2192 utunX\n128.0.0.0/1    \u2192 utunX\ndefault        \u2192 utunX\n"})}),"\n",(0,o.jsxs)(n.p,{children:['These three routes combined mean "all traffic goes through the VPN." Also, every time it connects, it overwrites local settings, so relying on ',(0,o.jsx)(n.code,{children:"/etc/ppp/ip-up"})," alone can no longer accomplish split routing."]}),"\n",(0,o.jsx)(n.p,{children:"What to do? \u{1F4A2}"}),"\n",(0,o.jsx)(n.p,{children:"It\u2019s just a VPN tool, yet it wants to take all my traffic?"}),"\n",(0,o.jsx)(n.h2,{id:"so",children:"So?"}),"\n",(0,o.jsx)(n.p,{children:"This time, my goal is simple, only to satisfy the following conditions:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Company intranet"})," (e.g., ",(0,o.jsx)(n.code,{children:"10.0.0.0/8"}),") goes through the VPN"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Local LAN/general internet"})," goes directly through the physical network interface (Wi-Fi, Ethernet, etc.)"]}),"\n",(0,o.jsx)(n.li,{children:"Automatically detect the current VPN interface and local gateway"}),"\n",(0,o.jsx)(n.li,{children:"Provide validation to ensure the routes really take effect"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Below, we first talk about manual commands; the automated script is at the end."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-1-modify-routes",children:"Step 1: Modify routes"}),"\n",(0,o.jsx)(n.p,{children:"FortiClient secretly inserts three forced routes upon connection that pull all traffic into the VPN:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"0.0.0.0/1\n128.0.0.0/1\ndefault\n"})}),"\n",(0,o.jsx)(n.p,{children:"These three combined cover the entire IPv4 address space, effectively capturing all your network requests."}),"\n",(0,o.jsx)(n.p,{children:"So our first step is to delete them:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'for cidr in default 0.0.0.0/1 128.0.0.0/1; do\n  sudo route -q -n delete -ifscope "$VPN_IF" "$cidr"\ndone\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"$VPN_IF"})," is determined by my script to find the interface, such as utun4, utun6, etc."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'This step is critical. If you fail to delete these, the VPN will continue intercepting all your traffic. You might see "not in table" messages during deletion; these just mean the route doesn\'t exist and can be ignored.'}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-2-restore-local-default-route",children:"Step 2: Restore local default route"}),"\n",(0,o.jsx)(n.p,{children:"After clearing the VPN default routes, we need to restore the original local gateway."}),"\n",(0,o.jsxs)(n.p,{children:["This allows normal internet traffic, like to ",(0,o.jsx)(n.code,{children:"google.com"})," or ",(0,o.jsx)(n.code,{children:"youtube.com"}),", to go through the physical network interfaces (en0, en1, etc.)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'if ! sudo route -n change default "$LOCAL_GW"; then\n  sudo route -n add default "$LOCAL_GW"\nfi\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"$LOCAL_GW"})," is automatically retrieved from ",(0,o.jsx)(n.code,{children:"netstat"}),", e.g., ",(0,o.jsx)(n.code,{children:"192.168.0.1"}),", no manual input needed."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-3-add-intranet-specific-route",children:"Step 3: Add intranet-specific route"}),"\n",(0,o.jsx)(n.p,{children:"Next, we handle routing so that only company internal traffic goes through the VPN."}),"\n",(0,o.jsxs)(n.p,{children:["Assuming the intranet is ",(0,o.jsx)(n.code,{children:"10.0.0.0/8"}),", we route it to the VPN\u2019s peer IP:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo route -n add -net 10.0.0.0/8 "$VPN_PEER"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If the route already exists, use ",(0,o.jsx)(n.code,{children:"change"})," instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo route -n change -net 10.0.0.0/8 "$VPN_PEER"\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"$VPN_PEER"})," is the VPN point-to-point peer IP, automatically obtained by the script analyzing ",(0,o.jsx)(n.code,{children:"ifconfig utunX"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.admonition,{type:"warning",children:[(0,o.jsxs)(n.p,{children:["If your intranet is not ",(0,o.jsx)(n.code,{children:"10.0.0.0/8"}),", remember to modify this part accordingly. For example, if your company intranet is ",(0,o.jsx)(n.code,{children:"172.16.0.0/12"}),", adjust it to:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo route -n add -net 172.16.0.0/12 "$VPN_PEER"\n'})})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-4-verify-if-settings-take-effect",children:"Step 4: Verify if settings take effect"}),"\n",(0,o.jsx)(n.p,{children:"This final step is my enhancement."}),"\n",(0,o.jsx)(n.p,{children:"Once you run this script and supply some test targets, it will automatically:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Check which interface each IP or hostname actually uses"}),"\n",(0,o.jsx)(n.li,{children:"Attempt to ping the target to test connectivity"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)(n.p,{children:"Simply run the script with a few test targets, such as:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"bash forticlient_split.sh 10.1.1.1 192.168.0.100 google.com\n"})}),"\n",(0,o.jsx)(n.p,{children:"You will get output similar to:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u{1F310} 10.1.1.1       \u2192 interface utun4 (expected utun4) \u2705 reachable \u2705\n\u{1F310} 192.168.0.100  \u2192 interface en0   (expected local) \u2705 reachable \u2705\n\u{1F310} google.com     \u2192 interface en0   (expected local) \u2705 reachable \u2705\n"})}),"\n",(0,o.jsx)(n.p,{children:'This way, you can quickly verify whether your setting of "VPN only handling the company intranet" has taken effect successfully.'}),"\n",(0,o.jsx)(n.p,{children:"Connection, interface, and communication status are all clear at a glance!"}),"\n",(0,o.jsx)(n.p,{children:"Looks pretty good, right?"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"complete-script",children:"Complete script"}),"\n",(0,o.jsx)(n.p,{children:"I have consolidated the full script below, supporting macOS, FortiClient VPN, auto-detection, error prompts, connectivity tests, route printing, and peer IP parsing."}),"\n",(0,o.jsxs)(n.p,{children:["You can save this script as ",(0,o.jsx)(n.code,{children:"forticlient_split.sh"}),", make it executable, and run it directly:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"chmod +x forticlient_split.sh\n./forticlient_split.sh 10.1.1.1 192.168.0.100 google.com\n"})}),"\n",(0,o.jsx)(n.p,{children:"Here\u2019s the complete code, enjoy using it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:'title="forticlient_split.sh" showLineNumbers',children:'#!/usr/bin/env bash\n# =============================================================================\n# FortiClient VPN Split Routing with Enhanced Output\n#\n# This script resets FortiClient\u2013injected routes, restores the local default\n# gateway for non-VPN traffic, binds the 10.0.0.0/8 network to the VPN, and\n# then shows rich diagnostics: routing tables, interface mappings, and\n# connectivity tests (ping).\n#\n# Usage:\n#   forticlient_split.sh [ -h | --help ] host1 [host2 ...]\n#\n# Options:\n#   -h, --help    Show this help message and exit.\n# =============================================================================\n\nset -euo pipefail\nIFS=$\'\\n\\t\'\n\n# -----------------------------------------------------------------------------\n# Error and Info Helpers\n# -----------------------------------------------------------------------------\n\n# die prints an error message and exits with status 1.\n# Arguments:\n#   $@: The error message to display.\ndie() {\n  printf \'\u274C %s\\n\' "$*" >&2\n  exit 1\n}\n\n# info prints an informational message.\n# Arguments:\n#   $@: The message to display.\ninfo() {\n  printf \'\u2139\uFE0F  %s\\n\' "$*"\n}\n\n# -----------------------------------------------------------------------------\n# Utility Functions\n# -----------------------------------------------------------------------------\n\n# get_vpn_interface finds the first utun/tun/ppp interface with a PtP address.\n# Returns:\n#   Prints the interface name or nothing if not found.\nget_vpn_interface() {\n  while read -r iface; do\n    iface=${iface%:}\n    if ifconfig "$iface" | grep -q \'inet .*--\x3e\'; then\n      printf \'%s\\n\' "$iface"\n      return\n    fi\n  done < <(ifconfig | awk \'/^(utun|tun|ppp)[0-9]+:/{print $1}\')\n}\n\n# get_vpn_peer obtains the Point-to-Point peer IP for a given VPN interface.\n# Args:\n#   $1: Interface name (e.g. utun4)\n# Returns:\n#   Prints the peer IP or nothing if not found.\nget_vpn_peer() {\n  local iface="$1"\n  ifconfig "$iface" | awk \'/inet / && /--\x3e/ {\n    for (i = 1; i <= NF; i++) {\n      if ($i == "--\x3e") { print $(i+1); exit }\n    }\n  }\'\n}\n\n# get_local_gateway finds the non-VPN default gateway.\n# Returns:\n#   Prints the gateway IP or nothing if not found.\nget_local_gateway() {\n  netstat -rn \\\n    | awk \'$1=="default" && $NF !~ /(utun|tun|ppp)/ { print $2; exit }\'\n}\n\n# iface_of returns the interface used to reach a host.\n# Args:\n#   $1: Hostname or IP\n# Returns:\n#   Prints the interface name.\niface_of() {\n  route get "$1" 2>/dev/null \\\n    | awk \'/interface:/{print $2}\'\n}\n\n# show_route_info prints current routes for default and 10.0.0.0/8.\nshow_route_info() {\n  printf \'\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\'\n  info "\u{1F50E} Current Default Route:"\n  route get default 2>/dev/null | awk \'NR<=5\'\n  info "\u{1F50E} Current 10.0.0.0/8 Route:"\n  route get 10.0.0.1 2>/dev/null | awk \'NR<=5\'\n  printf \'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\\n\'\n}\n\n# test_connect tests ping connectivity to a host.\n# Args:\n#   $1: Hostname or IP\ntest_connect() {\n  local host="$1"\n  printf \'   \u21B3 Testing %s: \' "$host"\n  if ping -c2 -W1 "$host" &>/dev/null; then\n    printf \'\u2705 Reachable\\n\'\n  else\n    printf \'\u274C Unreachable\\n\'\n  fi\n}\n\n# -----------------------------------------------------------------------------\n# Usage\n# -----------------------------------------------------------------------------\n\nusage() {\n  cat <<-EOF\nUsage: $(basename "$0") [ -h | --help ] host1 [host2 ...]\nOptions:\n  -h, --help    Show this help message and exit.\nEOF\n  exit 0\n}\n\n# -----------------------------------------------------------------------------\n# Main\n# -----------------------------------------------------------------------------\n\n# Parse flags.\nif [[ "${1-}" =~ ^-h|--help$ ]]; then\n  usage\nfi\n\n# Collect hosts.\nHOSTS=("$@")\n(( ${#HOSTS[@]} )) || die "Please specify at least one host."\n\n# 1. Detect VPN interface and gateways.\ninfo "\u{1F50D} Detecting VPN interface and local gateway"\nVPN_IF=$(get_vpn_interface)                         || die "Cannot find VPN interface (utun/tun/ppp)."\nVPN_PEER=$(get_vpn_peer "$VPN_IF")                  || die "Unable to get VPN Point-to-Point peer IP."\nLOCAL_GW=$(get_local_gateway)                       || die "Cannot find local gateway."\ninfo "   \u2022 VPN Interface: $VPN_IF"\ninfo "   \u2022 VPN Peer: $VPN_PEER"\ninfo "   \u2022 Local Gateway: $LOCAL_GW"\n\n# Show current routes before changes\nshow_route_info\n\n# 2. Reset routes injected by FortiClient.\ninfo "\u{1F9F9} Removing FortiClient injected forced routes"\nfor cidr in default 0.0.0.0/1 128.0.0.0/1; do\n  sudo route -q -n delete -ifscope "$VPN_IF" "$cidr" 2>/dev/null || true\ndone\n\n# 3. Restore local default gateway.\ninfo "\u{1F6A7} Setting local default route \u279C $LOCAL_GW"\nif ! sudo route -n change default "$LOCAL_GW" 2>/dev/null; then\n  sudo route -n add default "$LOCAL_GW"\nfi\n\n# 4. Bind 10.0.0.0/8 to VPN.\ninfo "\u{1F517} Binding 10.0.0.0/8 \u279C $VPN_PEER ($VPN_IF)"\nif ! sudo route -n add -net 10.0.0.0/8 "$VPN_PEER" 2>/dev/null; then\n  sudo route -n change -net 10.0.0.0/8 "$VPN_PEER"\nfi\n\n# Show current routes after changes\nshow_route_info\n\n# 5. Verify routing interfaces and connectivity.\ninfo "\u{1F310} Testing routing interfaces and connectivity"\nfor host in "${HOSTS[@]}"; do\n  actual_if=$(iface_of "$host" || echo "Unknown")\n  if [[ $host == 10.* ]]; then\n    expected_if="$VPN_IF"\n  else\n    expected_if="Local (non-VPN)"\n  fi\n  printf \'   \u2022 %-15s \u279C Interface %-8s (expected %s)\\n\' \\\n    "$host" "$actual_if" "$expected_if"\n  test_connect "$host"\ndone\n\ninfo "\u{1F389} Configuration, routing, and connectivity tests completed"\n'})})]})}function h(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},84429:function(e,n,t){t.d(n,{R:()=>s,x:()=>a});var i=t(96540);let o={},r=i.createContext(o);function s(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},14860:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/mac-forticlient-vpn-split-routing","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025/08-02-mac-forticlient-vpn-split-routing/index.md","title":"FortiClient VPN Split Routing Configuration and Route Testing","description":"Let FortiClient handle only the company intranet, while all other traffic returns locally.","date":"2025-08-02T00:00:00.000Z","tags":[{"inline":true,"label":"vpn-routing","permalink":"/en/blog/tags/vpn-routing"},{"inline":true,"label":"macos","permalink":"/en/blog/tags/macos"},{"inline":true,"label":"forticlient","permalink":"/en/blog/tags/forticlient"}],"readingTime":7.27,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"mac-forticlient-vpn-split-routing","title":"FortiClient VPN Split Routing Configuration and Route Testing","authors":"Z. Yuan","tags":["vpn-routing","macos","forticlient"],"image":"/en/img/2025/0802.jpg","description":"Let FortiClient handle only the company intranet, while all other traffic returns locally."},"unlisted":false,"nextItem":{"title":"Advanced Implementation of Docusaurus Sidebar Counting: Recursive Counting and Stable Slugs","permalink":"/en/blog/docusaurus-sidebars-enhanced-counting"}}')}}]);