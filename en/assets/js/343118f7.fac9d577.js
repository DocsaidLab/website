"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["18378"],{51982:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return d}});var i=t(16429),s=t(85893),r=t(50065);let a={slug:"builds-dashboard-system",title:"I, an AI Engineer, Actually Built a Backend System?",authors:"Z. Yuan",image:"/en/img/2025/0316.webp",tags:["React","FastAPI","User Authentication"],description:"A sharing of the experience building a backend system from scratch."},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Are You Just Bored?",id:"are-you-just-bored",level:2},{value:"The First Version of the Backend",id:"the-first-version-of-the-backend",level:2},{value:"Second Generation Backend",id:"second-generation-backend",level:2},{value:"User Login System",id:"user-login-system",level:3},{value:"API Token Issuance System",id:"api-token-issuance-system",level:3},{value:"API Token Management Mechanism",id:"api-token-management-mechanism",level:3},{value:"API Rate Limiting",id:"api-rate-limiting",level:3},{value:"Technology Stack Summary",id:"technology-stack-summary",level:2},{value:"Final Thoughts",id:"final-thoughts",level:2}];function c(e){let n={admonition:"admonition",blockquote:"blockquote",del:"del",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Good afternoon, or good evening."}),"\n",(0,s.jsx)(n.p,{children:"I've been a bit slack on updating articles lately, so I want to apologize to everyone."}),"\n",(0,s.jsx)(n.p,{children:"Because I\u2019ve been busy doing something unrelated to my main work: I\u2019ve been working on both the frontend and backend."}),"\n",(0,s.jsx)(n.h2,{id:"are-you-just-bored",children:"Are You Just Bored?"}),"\n",(0,s.jsx)(n.p,{children:"Well, yes."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Recently, I had a long holiday, and finally had time to deal with some unresolved issues:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"This website doesn\u2019t have a backend!"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You might know a bit about it, but this website is built on the Docusaurus framework, which is a static site. When I first set up this website, my idea was just to occasionally write some blogs and share paper notes; there wasn\u2019t any special planning or grand goal behind it."}),"\n",(0,s.jsx)(n.p,{children:"The pros and cons of static vs. dynamic websites are probably not new to you. I even tried using WordPress to set up a site, but after a short while, I was greeted by someone asking for money, which was really frustrating:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Building a site myself already brings minimal returns, so why do some people always target my wallet?"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"I ended up using WordPress for a while but eventually gave it up."}),"\n",(0,s.jsx)(n.p,{children:"It wasn\u2019t just because of expensive paid services, but because its code was hard to customize... okay, I admit it: I just can\u2019t write PHP."}),"\n",(0,s.jsx)(n.p,{children:"In contrast, I prefer the frontend-backend separation architecture, which is much more comfortable."}),"\n",(0,s.jsx)(n.p,{children:"You know what happened after that\u2014I chose Docusaurus and stuck with it. After all that, I ended up back with a static site architecture."}),"\n",(0,s.jsx)(n.p,{children:"\uFF0A"}),"\n",(0,s.jsx)(n.p,{children:"As the content of the website accumulated, I started receiving emails from readers, mostly asking about model usage: such as how to configure environments, install dependencies, or even how to resolve strange errors that appeared during execution."}),"\n",(0,s.jsxs)(n.p,{children:["These were easy to handle; I just told them to ask ChatGPT, and that was it. (",(0,s.jsx)(n.del,{children:"Too casual, huh?"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Not casual at all! With the power of AI tools these days, most problems can be resolved directly by asking, saving a lot of time compared to emailing back and forth."}),"\n",(0,s.jsx)(n.p,{children:"Of course, there are still problems AI can't solve, like when readers asked if they could directly call my backend API!"}),"\n",(0,s.jsx)(n.p,{children:"Hey! At first glance, it sounds like a simple request, but when you try to implement it, the issues pile up. Let\u2019s talk about it in a moment."}),"\n",(0,s.jsx)(n.h2,{id:"the-first-version-of-the-backend",children:"The First Version of the Backend"}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s rewind a bit."}),"\n",(0,s.jsx)(n.p,{children:"After working on a few models, I wanted to make them available for everyone to try. It's like building a sandcastle by the sea and eagerly waiting for a big wave to test how sturdy your wall is. Even if the wave washes it away, at least you tried."}),"\n",(0,s.jsx)(n.p,{children:"It\u2019s the same with models. I don\u2019t think any engineer would build a model and then hide it away... what would be the point of that?"}),"\n",(0,s.jsx)(n.p,{children:'So, I made a few model demos myself and built the first generation of the backend: that\u2019s right! The "Playground" section in the navigation bar of this site. If you haven\u2019t tried it yet, feel free to explore.'}),"\n",(0,s.jsx)(n.p,{children:"You might ask, why would you need a backend just for a demo?"}),"\n",(0,s.jsx)(n.p,{children:"That\u2019s a fair point. Generally, there are two solutions if you want to use a model on a website:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Load the model directly in the browser and run inference in the browser."})}),"\n",(0,s.jsx)(n.p,{children:"I rejected this solution immediately."}),"\n",(0,s.jsx)(n.p,{children:"Running models in the browser is technically possible but very cumbersome. At the very least, it needs to support three or more browsers, each with different configuration environments. This reminded me of the frontend colleagues who struggled with WebAssembly. If they knew I was considering this, they would definitely stop me."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Provide a backend service to return inference results."})}),"\n",(0,s.jsx)(n.p,{children:"This is the solution I chose."}),"\n",(0,s.jsx)(n.p,{children:"The frontend simply handles data input and output, leaving all the troublesome work to the backend. But that means I have to build a backend system to provide the necessary services."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Since I was already using Docusaurus for the frontend, I had to adopt a frontend-backend separation architecture."}),"\n",(0,s.jsx)(n.p,{children:"Before starting the coding, I drew a diagram. This is what the architecture should look like:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\n    subgraph Frontend\n        Input[Send data]\n        Render[Receive data and render]\n    end\n\n    subgraph Backend\n        Nginx[Nginx]\n        FastAPI[Backend API]\n        SQL[Database]\n        Model[Model Inference]\n    end\n\n    Input --\x3e|HTTP Request| Nginx\n    Nginx --\x3e|Forward Request| FastAPI\n    FastAPI --\x3e |Save Results| SQL\n    FastAPI --\x3e Model\n    Model --\x3e|Save Results| SQL\n    FastAPI --\x3e|HTTP Response| Nginx\n    Nginx --\x3e|Send Response| Render\n\n    style Input fill:#a7e4ae,stroke:#5cb867,stroke-width:2px\n    style Render fill:#f8e9a1,stroke:#e0c35f,stroke-width:2px\n    style Nginx fill:#7eaefc,stroke:#4c84d9,stroke-width:2px\n    style FastAPI fill:#f7b2bd,stroke:#e3798b,stroke-width:2px\n    style SQL fill:#ffbc75,stroke:#e09a3f,stroke-width:2px\n    style Model fill:#cbaacb,stroke:#9a6d9a,stroke-width:2px"}),"\n",(0,s.jsx)(n.p,{children:"Apart from the architecture diagram, I also created lots of specifications and system operation processes, as well as detailed input and output designs. But it\u2019s too tedious to include everything here, so I\u2019ll just share the architecture diagram."}),"\n",(0,s.jsx)(n.p,{children:'Once the specifications were ready, I started working based on the diagram, and that\u2019s how the backend logic for the current "Playground" on the site was built.'}),"\n",(0,s.jsx)(n.p,{children:"At this point, although it seems relatively simple, let\u2019s talk about the technologies I chose:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Nginx"})}),"\n",(0,s.jsx)(n.p,{children:"Another common choice here is Apache, which was once the king of web servers, with rich features, many modules, and a large community. But Apache\u2019s configuration can be complex, and it\u2019s not as good at handling high-concurrency connections as Nginx."}),"\n",(0,s.jsx)(n.p,{children:"Honestly, I don\u2019t think Apache is bad, but I prefer Nginx\u2019s clean and intuitive configuration style. Whether it\u2019s for static resource proxying, reverse proxying, or load balancing, Nginx\u2019s setup is easier to understand. But of course, this is subjective\u2014some people may not like this style."}),"\n",(0,s.jsx)(n.p,{children:"Ultimately, Nginx was designed to handle a large number of concurrent connections, and its stability and performance have been tested over time. It seems like a solid choice."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"FastAPI"})}),"\n",(0,s.jsx)(n.p,{children:"The backend frameworks I hear most about are C# and NodeJS, but unfortunately, I\u2019m not familiar with them."}),"\n",(0,s.jsx)(n.p,{children:"As an AI engineer, I\u2019m most comfortable in the Python environment. If I suddenly switched to learning NodeJS or other backend frameworks, I\u2019d incur a lot of additional learning costs, which could delay development for several months."}),"\n",(0,s.jsx)(n.p,{children:"So, I chose FastAPI."}),"\n",(0,s.jsx)(n.p,{children:"FastAPI natively supports asynchronous operations, making it perfect for backend model inference, where requests need to be processed efficiently even if they are time-consuming. Plus, it has Pydantic built-in for validation and can automatically generate API documentation and testing interfaces, which greatly reduces the pain of developing and maintaining the API."}),"\n",(0,s.jsx)(n.p,{children:"More importantly, FastAPI\u2019s design is clean and easy to understand. It\u2019s not as bulky and complex as Django, nor as free-form as Flask, which could lead to architectural chaos. The development experience is just right."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"PostgreSQL"})}),"\n",(0,s.jsx)(n.p,{children:"When it comes to databases, I\u2019m actually more familiar with MySQL."}),"\n",(0,s.jsx)(n.p,{children:"MySQL has a great reputation in the developer community and is the go-to choice for many beginners. But since Oracle acquired MySQL, its open-source license has gradually become more commercial, which raises some concerns about the ecosystem\u2019s uncertainty."}),"\n",(0,s.jsx)(n.p,{children:"In contrast, PostgreSQL has maintained a stable and steadily growing presence in the open-source community. In addition to continuous community support, PostgreSQL also supports powerful advanced features, such as native JSON data types and GIS for geographical information processing, making it more useful in complex data scenarios."}),"\n",(0,s.jsx)(n.p,{children:"Furthermore, PostgreSQL integrates smoothly with FastAPI and various ORM tools (like SQLAlchemy), making for a pleasant user experience. It also handles high-concurrency and high-load requests very well, so if traffic increases or backend requirements get more complex in the future, I won\u2019t have to worry about the database becoming a bottleneck."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"I\u2019ve mentioned a lot, but this might not necessarily be the best combination\u2014it\u2019s just enough to handle the current needs."}),"\n",(0,s.jsx)(n.p,{children:"For this simple architecture, it works well enough."}),"\n",(0,s.jsx)(n.h2,{id:"second-generation-backend",children:"Second Generation Backend"}),"\n",(0,s.jsx)(n.p,{children:"Returning to the issue mentioned at the beginning, a reader emailed me asking if they could directly call my backend API via code, instead of interacting through the web interface. This is an interesting request, indicating that the user may want a more automated and efficient way to interact with the system."}),"\n",(0,s.jsx)(n.p,{children:"So, what issues arise when we open the API directly for users to call?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"It Could Overload the Traffic"})}),"\n",(0,s.jsx)(n.p,{children:"When an API is exposed externally, users can send high-frequency requests via code, which could lead to a sudden surge in server traffic and potentially exceed its load capacity."}),"\n",(0,s.jsx)(n.p,{children:"For example, some users may fail to set appropriate request frequencies, causing the API to receive a large number of requests in a short period of time, which can affect other users\u2019 ability to access the system normally. Or someone might use a crawler or malicious script to test the API, occupying the server\u2019s bandwidth and computational resources, which could affect service stability."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security Risks"})}),"\n",(0,s.jsx)(n.p,{children:"Once the API is open, if there is no strict authentication and access control, anyone could obtain data they shouldn't have access to or even execute dangerous operations. If the API lacks proper authentication mechanisms (such as OAuth or JWT), malicious individuals might simulate legitimate users through simple requests, leading to potential security risks."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"There are many other extended problems that could be discussed in detail, but I\u2019ll skip over those for now."}),"\n",(0,s.jsx)(n.p,{children:"In conclusion, I can\u2019t open the API directly, because both I and my server could face significant risks."}),"\n",(0,s.jsx)(n.p,{children:"So, to meet the demand for open APIs, I had to build a complete user authentication and API authorization system myself."}),"\n",(0,s.jsx)(n.p,{children:"Alright, here we go again: engineers aren\u2019t afraid of being inexperienced, they\u2019re just afraid of not taking action. Time to write some code!"}),"\n",(0,s.jsx)(n.h3,{id:"user-login-system",children:"User Login System"}),"\n",(0,s.jsx)(n.p,{children:"A complete user system includes features like user registration, login, permission management, and email verification."}),"\n",(0,s.jsx)(n.p,{children:"In addition to FastAPI and the PostgreSQL database that I was already using, I also integrated Redis for session caching and token management. To enhance the user experience, I designed email verification and password recovery features, using SMTP services to send verification emails."}),"\n",(0,s.jsx)(n.p,{children:"Now, I can create a new architecture diagram for this part\u2014let me sketch it out simply:"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph LR\n    %% Frontend Section\n    subgraph Frontend\n        UserRegister[User Registration]\n        UserLogin[User Login]\n    end\n\n    %% Backend Section\n    subgraph Backend\n        Nginx[Nginx]\n        FastAPI[Backend API]\n        UserDB[User Database]\n        Redis[Redis Cache]\n        EmailVerification[Email Verification Module]\n        ForgotPassword[Forgot Password Module]\n    end\n\n    %% Registration Process (Blue)\n    UserRegister -- "Registration Request" --\x3e Nginx\n    Nginx -- "Forward Registration Request" --\x3e FastAPI\n    FastAPI -- "Validate and Save Data" --\x3e UserDB\n    FastAPI -- "Write to Cache/Create Session" --\x3e Redis\n    FastAPI -- "Respond with Registration Result" --\x3e Nginx\n    Nginx -- "Send Result" --\x3e UserRegister\n\n    %% Login Process (Orange)\n    UserLogin -- "Login Request" --\x3e Nginx\n    Nginx -- "Forward Login Request" --\x3e FastAPI\n    FastAPI -- "Query and Validate Data" --\x3e UserDB\n    FastAPI -- "Read/Update Session Cache" --\x3e Redis\n    FastAPI -- "Respond with Login Result (JWT/Session)" --\x3e Nginx\n    Nginx -- "Send Result" --\x3e UserLogin\n\n    %% Account Email Verification Process (Purple) - Demonstrating Backend Interaction\n    FastAPI -- "Send Verification Email" --\x3e EmailVerification\n    EmailVerification -- "Update User Verification Status" --\x3e UserDB\n    EmailVerification -- "Respond with Result" --\x3e FastAPI\n\n    %% Forgot Password Process (Pink) - Demonstrating Backend Interaction\n    FastAPI -- "Forgot Password Request" --\x3e ForgotPassword\n    ForgotPassword -- "Update User Password" --\x3e UserDB\n    ForgotPassword -- "Respond with Result" --\x3e FastAPI\n\n    %% Original Arrow Styles (Registration=Blue / Login=Orange)\n    linkStyle 0 stroke:#007BFF,stroke-width:2px\n    linkStyle 1 stroke:#007BFF,stroke-width:2px\n    linkStyle 2 stroke:#007BFF,stroke-width:2px\n    linkStyle 3 stroke:#007BFF,stroke-width:2px\n    linkStyle 4 stroke:#007BFF,stroke-width:2px\n    linkStyle 5 stroke:#007BFF,stroke-width:2px\n\n    linkStyle 6 stroke:#fd7e14,stroke-width:2px\n    linkStyle 7 stroke:#fd7e14,stroke-width:2px\n    linkStyle 8 stroke:#fd7e14,stroke-width:2px\n    linkStyle 9 stroke:#fd7e14,stroke-width:2px\n    linkStyle 10 stroke:#fd7e14,stroke-width:2px\n    linkStyle 11 stroke:#fd7e14,stroke-width:2px\n\n    %% Email Verification Process Arrows (Purple: From Step 12)\n    linkStyle 12 stroke:#6f42c1,stroke-width:2px\n    linkStyle 13 stroke:#6f42c1,stroke-width:2px\n    linkStyle 14 stroke:#6f42c1,stroke-width:2px\n\n    %% Forgot Password Process Arrows (Pink: From Step 15)\n    linkStyle 15 stroke:#d63384,stroke-width:2px\n    linkStyle 16 stroke:#d63384,stroke-width:2px\n    linkStyle 17 stroke:#d63384,stroke-width:2px'}),"\n",(0,s.jsx)(n.p,{children:"This user system needs to include a user database, password encryption, registration email verification, forgotten password reset processes, and other details. I haven\u2019t considered integrating third-party login services yet, such as logging in via Google or Facebook accounts. If I were to add third-party login verification, that would involve a lot more work, which I\u2019ll leave for my future self."}),"\n",(0,s.jsx)(n.p,{children:"Speaking of registration email verification, this turned out to be more troublesome than expected."}),"\n",(0,s.jsx)(n.p,{children:"I first applied for Amazon SES, but after waiting for a day, they rejected me, saying I looked suspicious. (What?)"}),"\n",(0,s.jsx)("div",{align:"center",children:(0,s.jsx)("figure",{style:{width:"60%"},children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"amazon",src:t(46531).Z+"",width:"2291",height:"1617"})})})}),"\n",(0,s.jsx)(n.p,{children:"Since that didn\u2019t work, I thought maybe I could set up my own mail server."}),"\n",(0,s.jsx)(n.p,{children:"After a day of setup and troubleshooting, I finally got it working!"}),"\n",(0,s.jsx)(n.p,{children:"But then, the emails I sent were still rejected by Gmail because they also thought I looked suspicious. (\uD83D\uDE2D \uD83D\uDE2D \uD83D\uDE2D)"}),"\n",(0,s.jsx)(n.p,{children:"In the end, after some twists and turns, I found another provider who helped me get it sorted out, but I\u2019ll spare you the details."}),"\n",(0,s.jsx)(n.p,{children:"After more than a week of work, I finally completed the specifications I set out to do. Although the result is just a simple page, I still wrote over a thousand lines of code. It feels like a very low-effort payoff."}),"\n",(0,s.jsx)(n.p,{children:"By the time I reached this point in the coding process, I finally understood why frontend and backend developers often don\u2019t see eye to eye and end up arguing and shifting blame all the time. I can only say that setting clear specifications is really important\u2014though it was just me doing everything, without clear specifications, I\u2019d still end up in a messy situation."}),"\n",(0,s.jsx)(n.h3,{id:"api-token-issuance-system",children:"API Token Issuance System"}),"\n",(0,s.jsx)(n.p,{children:"After finishing the user system, I finally got around to implementing the API Token functionality."}),"\n",(0,s.jsx)(n.p,{children:"The most common token format these days is JWT (JSON Web Token), and one of its key features is that JWT is self-contained. As long as we verify that the token is valid, we can know the user's identity and permissions, reducing the need for frequent database queries and improving performance. JWT can store information like the user ID, permissions, and expiration date, thus avoiding additional API queries."}),"\n",(0,s.jsx)(n.p,{children:"So I decided to use JWT directly. Users verify their identity through login, after which the system generates a JWT and stores it in Redis. When the user sends an API request, the JWT is sent to the backend as a Bearer Token for authentication. Once the token is verified successfully, the user can proceed to access the backend model inference services."}),"\n",(0,s.jsx)(n.p,{children:"The architecture for applying for a token is quite simple, and here\u2019s the diagram for it:"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph LR\n    subgraph Frontend\n        apiClient[API Client]\n    end\n\n    subgraph Backend\n        Nginx[Nginx]\n        subgraph Authentication Service\n            APIToken[API Token Issuance Service]\n        end\n        UserDB[User Database]\n        Redis[Redis Cache]\n    end\n\n    apiClient -- "Token Request" --\x3e Nginx\n    Nginx -- "Forward Token Request" --\x3e APIToken\n    APIToken -- "Query Verification (Redis)" --\x3e Redis\n    APIToken -- "Query Verification (UserDB)" --\x3e UserDB\n    APIToken -- "Generate and Store Token" --\x3e Redis\n    APIToken -- "Respond with Token" --\x3e Nginx\n    Nginx -- "Send Token" --\x3e apiClient\n\n    linkStyle 0 stroke:#00bfff,stroke-width:2px\n    linkStyle 1 stroke:#00bfff,stroke-width:2px\n    linkStyle 2 stroke:#00bfff,stroke-width:2px\n    linkStyle 3 stroke:#00bfff,stroke-width:2px\n    linkStyle 4 stroke:#00bfff,stroke-width:2px\n    linkStyle 5 stroke:#00bfff,stroke-width:2px\n    linkStyle 6 stroke:#00bfff,stroke-width:2px\n\n    %% Node Styles\n    style apiClient fill:#ffe0b3,stroke:#ffb366,stroke-width:2px\n    style Nginx fill:#7eaefc,stroke:#4c84d9,stroke-width:2px\n    style APIToken fill:#d9c8f5,stroke:#a58bdd,stroke-width:2px\n    style UserDB fill:#ffbc75,stroke:#e09a3f,stroke-width:2px\n    style Redis fill:#cbaacb,stroke:#9a6d9a,stroke-width:2px'}),"\n",(0,s.jsx)(n.p,{children:"Once the user receives the token, they can use this token to call the API. For this part, Redis is used to limit traffic and calculate the number of calls. The overall calling process is as follows:"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph LR\n    subgraph Frontend\n        apiClient[API Client]\n    end\n\n    subgraph Backend\n        Nginx[Nginx]\n        subgraph Authentication Service\n            APIToken[API Token Issuance Service]\n        end\n        ModelService[Deep Learning Model Inference Service]\n        UserDB[User Database]\n        Redis[Redis Cache]\n    end\n\n    apiClient -- "Model Inference Request (with Token)" --\x3e Nginx\n    Nginx -- "Forward Inference Request" --\x3e APIToken\n    APIToken -- "Verify Token (Redis)" --\x3e Redis\n    APIToken -- "Verify Token (UserDB)" --\x3e UserDB\n    APIToken -- "Token Verified" --\x3e ModelService\n    ModelService -- "Respond with Inference Result" --\x3e APIToken\n    APIToken -- "Respond with Result" --\x3e Nginx\n    Nginx -- "Send Inference Result" --\x3e apiClient\n\n    %% Change lines to pink\n    linkStyle 0 stroke:#ff1493,stroke-width:2px\n    linkStyle 1 stroke:#ff1493,stroke-width:2px\n    linkStyle 2 stroke:#ff1493,stroke-width:2px\n    linkStyle 3 stroke:#ff1493,stroke-width:2px\n    linkStyle 4 stroke:#ff1493,stroke-width:2px\n    linkStyle 5 stroke:#ff1493,stroke-width:2px\n    linkStyle 6 stroke:#ff1493,stroke-width:2px\n    linkStyle 7 stroke:#ff1493,stroke-width:2px\n\n    %% Node Styles (can be modified as needed)\n    style apiClient fill:#ffe0b3,stroke:#ffb366,stroke-width:2px\n    style Nginx fill:#7eaefc,stroke:#4c84d9,stroke-width:2px\n    style APIToken fill:#d9c8f5,stroke:#a58bdd,stroke-width:2px\n    style ModelService fill:#e6e6fa,stroke:#b565a7,stroke-width:2px\n    style UserDB fill:#ffbc75,stroke:#e09a3f,stroke-width:2px\n    style Redis fill:#cbaacb,stroke:#9a6d9a,stroke-width:2px'}),"\n",(0,s.jsx)(n.h3,{id:"api-token-management-mechanism",children:"API Token Management Mechanism"}),"\n",(0,s.jsx)(n.p,{children:"After designing the Token, I didn\u2019t implement a renewal mechanism. Instead, I allowed users to set the token's expiration time and provided manual revocation and deletion mechanisms to ensure flexibility and security in API access permissions."}),"\n",(0,s.jsx)(n.p,{children:"When users request a token, they can specify its expiration time (e.g., 1 hour, 1 day, 7 days, or even 1 year). Once the token expires, the system will automatically invalidate it, and users will need to request a new token."}),"\n",(0,s.jsx)(n.p,{children:"This design allows developers to choose an appropriate token validity period based on their needs, avoiding frequent reauthorization."}),"\n",(0,s.jsx)(n.p,{children:"Users can revoke or delete their tokens at any time. If a token is compromised or is no longer needed, it can be deleted immediately, rendering it inactive."}),"\n",(0,s.jsx)(n.p,{children:"Token status is stored in Redis. When a user manually revokes a token, the system will immediately mark it as invalid, and subsequent API requests will be rejected. This avoids unnecessary long-term authorization risks and ensures control over the system."}),"\n",(0,s.jsx)(n.p,{children:"Here is the architecture diagram for this process:"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client as API Client\n    participant Server as Authentication Service\n    participant Redis as Redis (Token Cache)\n    participant UserDB as User Database\n\n    Client->>Server: Request Token (Specify Expiration)\n    Server->>UserDB: Save Token and Expiration\n    Server->>Redis: Cache Token for Faster Validation\n    Server--\x3e>Client: Return Token\n\n    Note over Client,Server: Use Token for API Access\n\n    Client->>Server: API Request (With Token)\n    Server->>Redis: Check if Token is Valid\n    alt Token Exists in Redis\n        Redis--\x3e>Server: Token is Valid\n    else Token Does Not Exist\n        Server->>UserDB: Query Token\n        UserDB--\x3e>Server: Token is Valid\n        Server->>Redis: Cache Token for Efficiency\n    end\n    Server--\x3e>Client: API Response\n\n    Note over Client,Server: User Decides to Revoke Token\n\n    Client->>Server: Request to Delete Token\n    Server->>UserDB: Delete Token from Database\n    Server->>Redis: Delete Token from Redis Cache\n    Server--\x3e>Client: Token Deleted Successfully"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why Not Use a Renewal Mechanism?"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Allowing users to set expiration times increases API flexibility, avoiding the system from overly interfering with user token management."}),"\n",(0,s.jsx)(n.li,{children:"Without a renewal mechanism, we can ensure that the token remains valid within the set period, preventing the additional verification burden caused by frequent renewals."}),"\n",(0,s.jsx)(n.li,{children:"Manual token revocation ensures that if a token is compromised or no longer needed, it can be invalidated immediately, enhancing security."}),"\n"]}),(0,s.jsx)(n.p,{children:"This design provides a simple yet controlled token management approach, ideal for users who need long-term access but still want to maintain security."})]}),"\n",(0,s.jsx)(n.h3,{id:"api-rate-limiting",children:"API Rate Limiting"}),"\n",(0,s.jsx)(n.p,{children:'With tokens in place, the next challenge is: "How to prevent malicious users from abusing the API?"'}),"\n",(0,s.jsx)(n.p,{children:'Since the API could involve a large number of inference requests (e.g., AI model inference, batch queries), if not limited, it could easily be attacked or affect regular users\' experience. Therefore, I introduced a "Rate Limiting" mechanism, which uses Redis to track the number of requests and temporarily blocks requests when the limit is reached within a short time.'}),"\n",(0,s.jsx)(n.p,{children:"Here\u2019s the architecture diagram for this process:"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client as API Client\n    participant Nginx as Nginx Proxy\n    participant AuthService as Authentication Service\n    participant Redis as Redis (Request Count)\n    participant ModelService as Deep Learning Model Service\n\n    Client->>Nginx: Send API Request (with Token)\n    Nginx->>Redis: Check Request Count\n    Redis--\x3e>Nginx: Count Below Limit\n    Nginx->>AuthService: Validate Token\n    AuthService->>Redis: Verify Token Validity\n    Redis--\x3e>AuthService: Token Valid\n    AuthService->>ModelService: Execute Inference\n    ModelService--\x3e>AuthService: Return Inference Result\n    AuthService--\x3e>Nginx: Return API Response\n    Nginx--\x3e>Client: Send API Response\n\n    Note over Client,Redis: If Request Count is Too High, Redis Will Block the Request"}),"\n",(0,s.jsx)(n.h2,{id:"technology-stack-summary",children:"Technology Stack Summary"}),"\n",(0,s.jsx)(n.p,{children:"After upgrading the backend of this website, the overall technology stack is now updated as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend Framework"}),": React (Docusaurus)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend Framework"}),": FastAPI (Python)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": PostgreSQL"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache Service"}),": Redis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reverse Proxy and Load Balancer"}),": Nginx"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Apart from the newly added Redis, most of the technologies above were already present in the first-generation backend. It\u2019s just that, at the time, there wasn\u2019t a dedicated frontend page to clearly present this related information. With this upgrade, I\u2019ve added a frontend backend page where users can interact with it and access more services and features."}),"\n",(0,s.jsx)(n.p,{children:"For me, Python with FastAPI is an everyday essential tool. While this technology stack isn\u2019t necessarily groundbreaking, it has significantly increased development efficiency and the smoothness of usage. As for deployment, I\u2019m still using Docker Compose combined with Nginx and hosting it on my own machine. While I would have liked to move it to the cloud, the cost is too high (low-cost options have poor performance), so I have to make do with what I have."}),"\n",(0,s.jsx)(n.p,{children:"In summary, the system is now running smoothly. I\u2019ll continue observing and improving it as I go."}),"\n",(0,s.jsx)(n.h2,{id:"final-thoughts",children:"Final Thoughts"}),"\n",(0,s.jsx)(n.p,{children:"When reading papers, I often find the logic abstract, but after reading several times, I can usually reproduce it successfully (ignoring issues with insufficient computing power)."}),"\n",(0,s.jsxs)(n.p,{children:["Frontend documentation seems straightforward, but every step when implementing it can hide traps\u2014it\u2019s incredibly tricky. (",(0,s.jsx)(n.del,{children:"Just admit it, you\u2019re not familiar with it!"}),") In the past, late-night debugging often involved dealing with issues like \u201CLoss not converging\u201D or \u201CGPU memory insufficient,\u201D which are daily struggles for an AI engineer. Now, I\u2019m facing frequent React errors, form button malfunctions, and backend API mismatches\u2014such tedious problems."]}),"\n",(0,s.jsx)(n.p,{children:"Moreover, all of this was done with ChatGPT available for instant help. If this were before ChatGPT\u2019s release, I\u2019m not so sure if I would have been able to make this backend system work."}),"\n",(0,s.jsx)(n.p,{children:"If I have time in the future, I will add more features. If you have any suggestions or feedback on this system, feel free to share them with me in the comment section."}),"\n",(0,s.jsx)(n.p,{children:"If you encounter any bugs or issues while using it, please contact me privately via email to protect the system\u2019s security. I would really appreciate it. If you can provide detailed error messages or screenshots, it would help me quickly locate and fix the issue."}),"\n",(0,s.jsx)(n.p,{children:"I hope you enjoy using this system!"})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},46531:function(e,n,t){t.d(n,{Z:function(){return i}});let i=t.p+"assets/images/img1-17d661c856bca0be72bad9dcd0ad15de.jpg"},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return a}});var i=t(67294);let s={},r=i.createContext(s);function a(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},16429:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/builds-dashboard-system","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025/03-16-builds-dashboard-system/index.md","title":"I, an AI Engineer, Actually Built a Backend System?","description":"A sharing of the experience building a backend system from scratch.","date":"2025-03-16T00:00:00.000Z","tags":[{"inline":true,"label":"React","permalink":"/en/blog/tags/react"},{"inline":true,"label":"FastAPI","permalink":"/en/blog/tags/fast-api"},{"inline":true,"label":"User Authentication","permalink":"/en/blog/tags/user-authentication"}],"readingTime":18.29,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"builds-dashboard-system","title":"I, an AI Engineer, Actually Built a Backend System?","authors":"Z. Yuan","image":"/en/img/2025/0316.webp","tags":["React","FastAPI","User Authentication"],"description":"A sharing of the experience building a backend system from scratch."},"unlisted":false,"prevItem":{"title":"Pydantic Introduction: Python Data Validation and Management","permalink":"/en/blog/pydantic-intro"},"nextItem":{"title":"Setting Up Amazon SES DNS on Namecheap","permalink":"/en/blog/amazon-ses-setting-dns-on-namecheap"}}')}}]);