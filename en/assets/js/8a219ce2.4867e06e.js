"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["59727"],{7078:function(e,n,a){a.r(n),a.d(n,{metadata:()=>r,contentTitle:()=>s,default:()=>h,assets:()=>d,toc:()=>c,frontMatter:()=>i});var r=JSON.parse('{"id":"wordcanvas/barcode_gen","title":"BarcodeGenerator","description":"This feature was added in version 0.5.0.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/wordcanvas/barcode_gen.md","sourceDirName":"wordcanvas","slug":"/wordcanvas/barcode_gen","permalink":"/en/docs/wordcanvas/barcode_gen","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1724052268000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"MRZGenerator","permalink":"/en/docs/wordcanvas/mrz_gen"},"next":{"title":"Resources","permalink":"/en/docs/wordcanvas/tools"}}'),o=a("85893"),t=a("50065");let i={sidebar_position:6},s="BarcodeGenerator",d={},c=[{value:"Code 39",id:"code-39",level:2},{value:"Code 128",id:"code-128",level:2},{value:"Advanced Illustration",id:"advanced-illustration",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"barcodegenerator",children:"BarcodeGenerator"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"This feature was added in version 0.5.0."})}),"\n",(0,o.jsx)(n.p,{children:"This functionality is a small feature we often implement in practice. Creating a separate project for it would be excessive, so we included it here."}),"\n",(0,o.jsx)(n.p,{children:"We implemented barcode generators for Code 39 and Code 128 formats."}),"\n",(0,o.jsx)(n.h2,{id:"code-39",children:"Code 39"}),"\n",(0,o.jsx)(n.p,{children:'Code 39 (also known as Alpha39, Code 3 of 9, Code 3/9, Type 39, USS Code39, or USD-3) is a variable-length barcode defined in ISO/IEC 16388:2007. It can represent 43 characters, including uppercase Latin letters (A to Z), numbers (0 to 9), and several special characters (-, ., $, /, +, %, and space). There is an additional symbol used as a stop character (represented as "*"). Each character consists of nine parts: five bars and four spaces, with three parts wider (binary 1) and six parts narrower. The ratio between narrow and wide parts is flexible, typically between 1:2 and 1:3.'}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Information above excerpted from ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Code39",children:(0,o.jsx)(n.strong,{children:"Wikipedia: Code39"})})]})}),"\n",(0,o.jsx)(n.p,{children:"Usage example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import docsaidkit as D\nfrom wordcanvas import Code39Generator\n\ngen = Code39Generator(\n    width_rate=2,\n    color=(0, 0, 0)\n)\n\nimg = gen('ABCD1234', w=400, h=128)\nD.imwrite(img)\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"width_rate"})," sets the ratio between narrow and wide bars, defaulting to 2. The recommended ratio is between 1:2 and 1:3."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"color"})," sets the color of the barcode, defaulting to black."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The resulting barcode looks like this:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"code39 example",src:a(90816).Z+"",width:"400",height:"128"})}),"\n",(0,o.jsx)(n.h2,{id:"code-128",children:"Code 128"}),"\n",(0,o.jsx)(n.p,{children:"Code 128 is a high-density, one-dimensional barcode developed by Computer Identics in 1981. It is designed for encoding a diverse character set and offers higher encoding efficiency and data capacity compared to Code 39, making it suitable for applications requiring longer and more varied data."}),"\n",(0,o.jsx)(n.p,{children:"Code 128 can encode all 128 ASCII characters, including numbers, uppercase and lowercase letters, and various special characters. It is divided into three subsets: A, B, and C. Subset A includes control characters and uppercase letters, subset B includes uppercase and lowercase letters and special characters, and subset C is used for compressing numeric data, encoding two digits into one character."}),"\n",(0,o.jsx)(n.p,{children:"Compared to Code 39, Code 128 uses fewer elements to represent more characters, resulting in shorter and more compact barcodes for the same amount of data. A Code 128 barcode begins with a specific start character indicating the subset (A, B, or C) and ends with a unique stop character. Each Code 128 barcode includes a checksum for data accuracy, calculated based on the barcode content to detect reading errors."}),"\n",(0,o.jsx)(n.p,{children:"Usage example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import docsaidkit as D\nfrom wordcanvas import Code128Generator, CodeType\n\n# Using default values\ngen = Code128Generator(\n    code_type=CodeType.Code128_B,\n    color=(0, 0, 0)\n)\n\nbarcode_img = gen("ABCD1234", w=400, h=128)\nD.imwrite(barcode_img)\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"code128 example",src:a(72157).Z+"",width:"400",height:"128"})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-illustration",children:"Advanced Illustration"}),"\n",(0,o.jsx)(n.p,{children:"Let's consider a more complex scenario:"}),"\n",(0,o.jsx)(n.p,{children:"Draw a 128 x 400 Code 39 barcode on a 200 x 600 canvas, placing it at coordinates (36, 100) with a background color of (200, 200, 0). The code would look like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import numpy as np\nimport docsaidkit as D\nfrom wordcanvas import Code39Generator\n\ngen = Code39Generator()\n\n# Set canvas size and background color\noutput_img = np.zeros((200, 600, 3), dtype=np.uint8) + (200, 200, 0)\n\n# Set barcode dimensions\nx, y, w, h = np.array([100, 36, 400, 128])\n\n# Generate barcode with size 400 x 128\nbarcode_img = gen("ABCD1234", w=400, h=128)\n\n# Place barcode on the canvas\nslice_x = slice(x, x+w)\nslice_y = slice(y, y+h)\noutput_img[slice_y, slice_x] = \\\nnp.where(barcode_img > 0, output_img[slice_y, slice_x], barcode_img)\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"code39 example 1",src:a(62135).Z+"",width:"600",height:"200"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Similarly, you can achieve the same result with Code 128:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from wordcanvas import Code128Generator\n\ngen = Code128Generator()\n\n# ... rest of the code remains the same\n\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"code128 example 1",src:a(55204).Z+"",width:"600",height:"200"})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"With this feature, we can train a model to locate and decode barcodes in the future."}),"\n",(0,o.jsx)(n.p,{children:"Although this feature may sound useless, it's still a good exercise for practicing."})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},72157:function(e,n,a){a.d(n,{Z:function(){return r}});let r=a.p+"assets/images/code128_example-d2a1390b6fe51e9a5640484bf3f13fcd.jpg"},55204:function(e,n,a){a.d(n,{Z:function(){return r}});let r=a.p+"assets/images/code128_example_1-ab4c83febcd279b382a59a928b3ee77e.jpg"},90816:function(e,n,a){a.d(n,{Z:function(){return r}});let r=a.p+"assets/images/code39_example-06cd0aeaa5d7c355e182c8b1d5015bd3.jpg"},62135:function(e,n,a){a.d(n,{Z:function(){return r}});let r=a.p+"assets/images/code39_example_1-ed21527a83c123acd2395b6b882a7402.jpg"},50065:function(e,n,a){a.d(n,{Z:function(){return s},a:function(){return i}});var r=a(67294);let o={},t=r.createContext(o);function i(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);