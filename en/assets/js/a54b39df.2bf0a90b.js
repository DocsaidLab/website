"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["50051"],{70488:function(n,e,t){t.r(e),t.d(e,{default:()=>m,frontMatter:()=>r,metadata:()=>a,assets:()=>d,toc:()=>l,contentTitle:()=>s});var a=JSON.parse('{"id":"wordcanvas/advance","title":"Advanced","description":"In addition to basic usage, we also provide advanced settings to give you more flexibility in controlling the output text images. Here, we introduce randomization features, mainly used for training models.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/wordcanvas/advance.md","sourceDirName":"wordcanvas","slug":"/wordcanvas/advance","permalink":"/en/docs/wordcanvas/advance","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1736729550000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start","permalink":"/en/docs/wordcanvas/quickstart"},"next":{"title":"Augmentation","permalink":"/en/docs/wordcanvas/imgaug"}}'),o=t("85893"),i=t("50065");let r={sidebar_position:4},s="Advanced",d={},l=[{value:"Random Fonts",id:"random-fonts",level:2},{value:"Random Text Content",id:"random-text-content",level:2},{value:"Specify String Length",id:"specify-string-length",level:2},{value:"Random Background Color",id:"random-background-color",level:2},{value:"Random Text Color",id:"random-text-color",level:2},{value:"Random Text Alignment",id:"random-text-alignment",level:2},{value:"Random Text Direction",id:"random-text-direction",level:2},{value:"Random Text Stroke",id:"random-text-stroke",level:2},{value:"Random Line Spacing",id:"random-line-spacing",level:2},{value:"Font Weight",id:"font-weight",level:2},{value:"Block List",id:"block-list",level:2},{value:"Dashboard",id:"dashboard",level:2},{value:"Summary",id:"summary",level:2}];function c(n){let e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"advanced",children:"Advanced"})}),"\n",(0,o.jsx)(e.p,{children:"In addition to basic usage, we also provide advanced settings to give you more flexibility in controlling the output text images. Here, we introduce randomization features, mainly used for training models."}),"\n",(0,o.jsxs)(e.p,{children:["To use the randomization features, you should use the ",(0,o.jsx)(e.code,{children:"RandomWordCanvas"})," class."]}),"\n",(0,o.jsx)(e.h2,{id:"random-fonts",children:"Random Fonts"}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"random_font"})," parameter to enable random font functionality. When ",(0,o.jsx)(e.code,{children:"random_font"})," is set to ",(0,o.jsx)(e.code,{children:"True"}),", the ",(0,o.jsx)(e.code,{children:"font_bank"})," parameter will take effect, and the ",(0,o.jsx)(e.code,{children:"font_path"})," will be ignored."]}),"\n",(0,o.jsxs)(e.p,{children:["You should specify the ",(0,o.jsx)(e.code,{children:"font_bank"})," parameter pointing to your font library, as the default value is the ",(0,o.jsx)(e.code,{children:"fonts"})," directory under the package. For example, we have preplaced two fonts in the ",(0,o.jsx)(e.code,{children:"fonts"})," directory. If you do not modify ",(0,o.jsx)(e.code,{children:"font_bank"}),", it will randomly choose between these two fonts."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas\n\ngen = RandomWordCanvas(\n    random_font=True,\n    output_size=(64, 512),\n    # font_bank=\"path/to/your/font/bank\"\n)\n\nimgs = []\nfor _ in range(8):\n    text = 'Hello, World!'\n    img = gen(text)\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample17",src:t(46778).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsx)(e.h2,{id:"random-text-content",children:"Random Text Content"}),"\n",(0,o.jsxs)(e.p,{children:["If you're unsure what text to generate, you can use the ",(0,o.jsx)(e.code,{children:"random_text"})," parameter."]}),"\n",(0,o.jsxs)(e.p,{children:["When ",(0,o.jsx)(e.code,{children:"random_text"})," is set to ",(0,o.jsx)(e.code,{children:"True"}),", the original ",(0,o.jsx)(e.code,{children:"text"})," input will be ignored."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas\n\ngen = RandomWordCanvas(\n    random_text=True,\n    output_size=(64, 512),\n)\n\nimgs = []\nfor _ in range(8):\n    text = 'Hello!World!' # This input will be ignored\n    img = gen(text)\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample18",src:t(47555).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsx)(e.h2,{id:"specify-string-length",children:"Specify String Length"}),"\n",(0,o.jsxs)(e.p,{children:["When ",(0,o.jsx)(e.code,{children:"random_text"})," is enabled, you can use:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"min_random_text_length"}),": minimum text length"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"max_random_text_length"}),": maximum text length"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"These two parameters allow you to specify the text length range."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas\n\n# Generate fixed-length text of 5 characters\ngen = RandomWordCanvas(\n    random_text=True,\n    min_random_text_length=5,\n    max_random_text_length=5,\n    output_size=(64, 512),\n)\n\nimgs = []\nfor _ in range(8):\n    img = gen()\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample19",src:t(74139).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsx)(e.h2,{id:"random-background-color",children:"Random Background Color"}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"random_background_color"})," parameter to enable random background color functionality."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas\n\ngen = RandomWordCanvas(\n    random_background_color=True,\n    output_size=(64, 512),\n)\n\nimgs = []\nfor _ in range(8):\n    text = 'Hello, World!'\n    img = gen(text)\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample20",src:t(11761).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsx)(e.h2,{id:"random-text-color",children:"Random Text Color"}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"random_text_color"})," parameter to enable the random text color feature."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas\n\ngen = RandomWordCanvas(\n    random_text_color=True,\n    output_size=(64, 512),\n)\n\nimgs = []\nfor _ in range(8):\n    text = 'Hello, World!'\n    img = gen(text)\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample21",src:t(36001).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsx)(e.h2,{id:"random-text-alignment",children:"Random Text Alignment"}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"random_align_mode"})," parameter to enable the random text alignment feature."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas\n\ngen = RandomWordCanvas(\n    random_align_mode=True,\n    output_size=(64, 512),\n)\n\nimgs = []\nfor _ in range(8):\n    text = 'Hello, World!'\n    img = gen(text)\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample22",src:t(24936).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsx)(e.h2,{id:"random-text-direction",children:"Random Text Direction"}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"random_direction"})," parameter to enable the random text direction feature."]}),"\n",(0,o.jsxs)(e.p,{children:["It is recommended to use this parameter with ",(0,o.jsx)(e.code,{children:"output_direction"})," for easier output image handling."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas, OutputDirection\n\ngen = RandomWordCanvas(\n    random_direction=True,\n    output_direction=OutputDirection.Horizontal,\n    output_size=(64, 512),\n)\n\nimgs = []\nfor _ in range(8):\n    text = 'Good afternoon, or good night.'\n    img = gen(text)\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample23",src:t(92090).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsx)(e.h2,{id:"random-text-stroke",children:"Random Text Stroke"}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"random_stroke_width"})," parameter to enable the random text stroke feature. You can also use ",(0,o.jsx)(e.code,{children:"min_random_stroke_width"})," and ",(0,o.jsx)(e.code,{children:"max_random_stroke_width"})," to specify the stroke width range."]}),"\n",(0,o.jsxs)(e.p,{children:["The stroke color can be set via ",(0,o.jsx)(e.code,{children:"stroke_fill"})," or enable random stroke color using ",(0,o.jsx)(e.code,{children:"random_stroke_fill"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas\n\ngen = RandomWordCanvas(\n    random_stroke_width=True,  # Enable random stroke width\n    random_stroke_fill=True,   # Enable random stroke color\n    min_random_stroke_width=1, # Minimum stroke width\n    max_random_stroke_width=5, # Maximum stroke width\n    output_size=(64, 512),\n)\n\nimgs = []\nfor _ in range(8):\n    text = 'Hello, World!'\n    img = gen(text)\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=0)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample32",src:t(7484).Z+"",width:"512",height:"512"})}),"\n",(0,o.jsxs)(e.admonition,{type:"warning",children:[(0,o.jsxs)(e.p,{children:["Using ",(0,o.jsx)(e.code,{children:"random_stroke_width"})," may trigger a warning:"]}),(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"Using `random_stroke_width` may cause an OSError: array allocation size too large error with certain text.\nThis is a known issue with the `Pillow` library (see https://github.com/python-pillow/Pillow/issues/7287) and cannot be resolved directly.\n"})}),(0,o.jsxs)(e.p,{children:["During testing, we found that using ",(0,o.jsx)(e.code,{children:"stroke_width"})," in ",(0,o.jsx)(e.code,{children:"Pillow"})," intermittently causes an ",(0,o.jsx)(e.code,{children:"OSError"}),". This is a known issue with ",(0,o.jsx)(e.code,{children:"Pillow"}),", and the related issue link is included in the warning for you to review."]})]}),"\n",(0,o.jsx)(e.h2,{id:"random-line-spacing",children:"Random Line Spacing"}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"random_spacing"})," parameter to enable the random line spacing feature. You can pair it with ",(0,o.jsx)(e.code,{children:"min_random_spacing"})," and ",(0,o.jsx)(e.code,{children:"max_random_spacing"})," to specify the spacing range."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import RandomWordCanvas, AlignMode\n\ngen = RandomWordCanvas(\n    random_spacing=True,\n    min_random_spacing=10,\n    max_random_spacing=100,\n    align_mode=AlignMode.Center,\n    output_size=(128, 512),\n)\n\nimgs = []\nfor _ in range(2):\n    img = gen('\u4F60\u597D\uFF01\\nHello, World!')\n    imgs.append(img)\n\n# Combine all images and output\nimg = np.concatenate(imgs, axis=1)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample33",src:t(49575).Z+"",width:"1024",height:"128"})}),"\n",(0,o.jsx)(e.h2,{id:"font-weight",children:"Font Weight"}),"\n",(0,o.jsxs)(e.p,{children:["Due to variations in the number of characters supported by each font, we might encounter uneven font weights during model training. To alleviate this, you can use the ",(0,o.jsx)(e.code,{children:"random_font_weight"})," parameter."]}),"\n",(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsx)(e.p,{children:"In simple terms, since each font has an equal chance of being selected, but some characters are only supported by a few fonts, you may notice that certain characters are rarely trained on."})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"from wordcanvas import RandomWordCanvas\n\ngen = RandomWordCanvas(\n    random_font=True,\n    random_font_weight=True,\n    output_size=(64, 512),\n)\n"})}),"\n",(0,o.jsxs)(e.p,{children:["When this parameter is enabled, ",(0,o.jsx)(e.code,{children:"RandomWordCanvas"})," adjusts the font selection probability based on the number of characters a font supports. Fonts with fewer supported characters are less likely to be selected, achieving a more balanced distribution."]}),"\n",(0,o.jsx)(e.h2,{id:"block-list",children:"Block List"}),"\n",(0,o.jsx)(e.p,{children:"While using fonts, we have found that some font files are inconsistent."}),"\n",(0,o.jsx)(e.p,{children:"For example, while the list of characters supported by a font can be read from the font file, certain characters may fail to render correctly during actual use. To address this, we have developed a block list feature that allows you to exclude problematic fonts."}),"\n",(0,o.jsxs)(e.p,{children:["Use the ",(0,o.jsx)(e.code,{children:"block_font_list"})," parameter to set the block list:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import numpy as np\nfrom wordcanvas import WordCanvas, RandomWordCanvas\n\ngen = WordCanvas(\n    block_font_list=['AABB']\n)\n\ngen_random = RandomWordCanvas(\n    block_font_list=['AABB'],\n)\n"})}),"\n",(0,o.jsxs)(e.p,{children:["After setting this, the program will automatically filter out fonts containing ",(0,o.jsx)(e.code,{children:"*AABB*.(ttf|otf)"})," and prevent them from being selected."]}),"\n",(0,o.jsx)(e.h2,{id:"dashboard",children:"Dashboard"}),"\n",(0,o.jsxs)(e.p,{children:["Returning to the dashboard, the information for ",(0,o.jsx)(e.code,{children:"RandomWordCanvas"})," is even more detailed:"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"sample34",src:t(12743).Z+"",width:"3043",height:"1654"})}),"\n",(0,o.jsxs)(e.p,{children:["When randomization parameters are enabled, parameters set to ",(0,o.jsx)(e.code,{children:"True"})," are marked in green, while those set to ",(0,o.jsx)(e.code,{children:"False"})," are marked in red."]}),"\n",(0,o.jsx)(e.p,{children:"This design aims to help you quickly confirm the relevant settings."}),"\n",(0,o.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(e.p,{children:"In the development of these tools, our goal was to create a versatile tool capable of generating various text images, especially for deep learning model training."}),"\n",(0,o.jsx)(e.p,{children:"The introduction of randomness aims to simulate various real-world scenarios, which is highly beneficial for improving model adaptability and generalization. We hope you find these features useful!"})]})}function m(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},46778:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample17-b024cfb14649f488e69c550968989a59.jpg"},47555:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample18-3aeeb8bfad2a51af95e038daa328ff22.jpg"},74139:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample19-6e11268e192b214b16b457ea1da09dea.jpg"},11761:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample20-68cda478ec5dbb32db2b964b23d415a5.jpg"},36001:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample21-f737cee41a55c9fbdf9bc3c71a0ca97c.jpg"},24936:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample22-2ec10adefc5b96eb0b511006e2efd24c.jpg"},92090:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample23-e921f677b62bedfd5d5765760c1d6179.jpg"},7484:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample32-5e58901e46a750ac7bdd21357fda22d4.jpg"},49575:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample33-472855dd683b8cfe9f3c7123468d5955.jpg"},12743:function(n,e,t){t.d(e,{Z:function(){return a}});let a=t.p+"assets/images/sample34-ab564a0d514763632dadcac2922f77b0.jpg"},50065:function(n,e,t){t.d(e,{Z:function(){return s},a:function(){return r}});var a=t(67294);let o={},i=a.createContext(o);function r(n){let e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);