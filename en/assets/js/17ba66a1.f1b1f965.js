"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9182],{82455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var s=t(74848),i=t(28453);const r={sidebar_position:4},a="Gmail API Calls",l={id:"gmailsummary/gmailapi_using",title:"Gmail API Calls",description:"Now that the setup is complete, we can begin using the Gmail API.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/gmailsummary/gmailapi_using.md",sourceDirName:"gmailsummary",slug:"/gmailsummary/gmailapi_using",permalink:"/en/docs/gmailsummary/gmailapi_using",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"zephyr-sh",lastUpdatedAt:1721143451e3,sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Gmail API Credentials",permalink:"/en/docs/gmailsummary/gmailapi_credentials"},next:{title:"OpenAI API Activation",permalink:"/en/docs/gmailsummary/openaiapi_login"}},o={},d=[{value:"Installing Dependencies",id:"installing-dependencies",level:2},{value:"Configuration Example",id:"configuration-example",level:2},{value:"Running the Example",id:"running-the-example",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Creating a Client",id:"creating-a-client",level:3},{value:"Fetching Emails",id:"fetching-emails",level:3},{value:"Parsing Emails",id:"parsing-emails",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"gmail-api-calls",children:"Gmail API Calls"}),"\n",(0,s.jsx)(n.p,{children:"Now that the setup is complete, we can begin using the Gmail API."}),"\n",(0,s.jsxs)(n.p,{children:["First, locate the ",(0,s.jsx)(n.code,{children:"credentials.json"})," file you downloaded earlier and place it in the root directory of your project."]}),"\n",(0,s.jsxs)(n.p,{children:["Next, let's open Google's provided tutorial document: ",(0,s.jsx)(n.a,{href:"https://developers.google.com/gmail/api/quickstart/python",children:(0,s.jsx)(n.strong,{children:"Python quickstart"})})]}),"\n",(0,s.jsx)(n.h2,{id:"installing-dependencies",children:"Installing Dependencies"}),"\n",(0,s.jsx)(n.p,{children:"You need to install the Google client library for Python:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install -U google-api-python-client google-auth-httplib2 google-auth-oauthlib\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In your working directory, create a file named ",(0,s.jsx)(n.code,{children:"quickstart.py"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can directly reference the source code provided by Google: ",(0,s.jsx)(n.a,{href:"https://github.com/googleworkspace/python-samples/blob/main/gmail/quickstart/quickstart.py",children:(0,s.jsx)(n.strong,{children:"source code"})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Include the following code in ",(0,s.jsx)(n.code,{children:"quickstart.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="quickstart.py"',children:'import os.path\n\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\n\n# If modifying these scopes, delete the file token.json.\nSCOPES = ["https://www.googleapis.com/auth/gmail.readonly"]\n\n\ndef main():\n"""Shows basic usage of the Gmail API. Lists the user\'s Gmail labels."""\ncreds = None\n# The file token.json stores the user\'s access and refresh tokens, and is\n# created automatically when the authorization flow completes for the first\n# time.\nif os.path.exists("token.json"):\n    creds = Credentials.from_authorized_user_file("token.json", SCOPES)\n# If there are no (valid) credentials available, let the user log in.\nif not creds or not creds.valid:\n    if creds and creds.expired and creds.refresh_token:\n        creds.refresh(Request())\n    else:\n        flow = InstalledAppFlow.from_client_secrets_file(\n            "credentials.json", SCOPES\n        )\n        creds = flow.run_local_server(port=0)\n    # Save the credentials for the next run\n    with open("token.json", "w") as token:\n        token.write(creds.to_json())\n\ntry:\n    # Call the Gmail API\n    service = build("gmail", "v1", credentials=creds)\n    results = service.users().labels().list(userId="me").execute()\n    labels = results.get("labels", [])\n\n    if not labels:\n        print("No labels found.")\n        return\n    print("Labels:")\n    for label in labels:\n        print(label["name"])\n\nexcept HttpError as error:\n    # TODO(developer) - Handle errors from gmail API.\n    print(f"An error occurred: {error}")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"running-the-example",children:"Running the Example"}),"\n",(0,s.jsxs)(n.p,{children:["Run ",(0,s.jsx)(n.code,{children:"quickstart.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python quickstart.py\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When you run ",(0,s.jsx)(n.code,{children:"quickstart.py"}),' for the first time, it will prompt you for authorization. Click "Allow".']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"gmail_19",src:t(74725).A+"",width:"2814",height:"4294"})}),"\n",(0,s.jsx)(n.p,{children:"You'll see output similar to the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Labels:\nCHAT\nSENT\nINBOX\nIMPORTANT\nTRASH\nDRAFT\nSPAM\nCATEGORY_FORUMS\nCATEGORY_UPDATES\nCATEGORY_PERSONAL\nCATEGORY_PROMOTIONS\nCATEGORY_SOCIAL\nSTARRED\nUNREAD\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, a ",(0,s.jsx)(n.code,{children:"token.json"})," file will be retrieved. This file will be used for subsequent runs of ",(0,s.jsx)(n.code,{children:"quickstart.py"})," without needing to authorize again."]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(n.p,{children:"Next, we'll begin using the Gmail API to parse email contents."}),"\n",(0,s.jsx)(n.p,{children:"We've implemented three parts: creating a client, fetching emails, and parsing emails."}),"\n",(0,s.jsx)(n.p,{children:"First, import the necessary packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from base64 import urlsafe_b64decode\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List\n\nimport pytz\nfrom google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-client",children:"Creating a Client"}),"\n",(0,s.jsxs)(n.p,{children:["When creating a Gmail API client, load ",(0,s.jsx)(n.code,{children:"token.json"}),", which stores the user's access and refresh tokens, and automatically refreshes the access token when it expires."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def build_service():\n    creds = None\n    token_file = 'token.json'\n    creds = Credentials.from_authorized_user_file(\n        token_file, scopes=['https://www.googleapis.com/auth/gmail.readonly'])\n    service = build('gmail', 'v1', credentials=creds)\n    return service\n"})}),"\n",(0,s.jsx)(n.h3,{id:"fetching-emails",children:"Fetching Emails"}),"\n",(0,s.jsx)(n.p,{children:"Next, define a function to retrieve email contents from the client:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def get_messages(\n    service,\n    user_id='me',\n    after_date=None,\n    subject_filter: str = None,\n    max_results: int = 500\n) -> List[Dict[str, str]]:\n\n    tz = pytz.timezone('Asia/Taipei')\n    if not after_date:\n        now = datetime.now(tz)\n        after_date = (now - timedelta(days=1)).strftime('%Y/%m/%d')\n\n    messages = []\n    try:\n        query = ''\n        if after_date:\n            query += f' after:{after_date}'\n        if subject_filter:\n            query += f' subject:(\"{subject_filter}\")'\n\n        response = service.users().messages().list(\n            userId=user_id, q=query, maxResults=max_results).execute()\n\n        messages.extend(response.get('messages', []))\n\n        # Handle pagination with nextPageToken\n        while 'nextPageToken' in response:\n            page_token = response['nextPageToken']\n            response = service.users().messages().list(\n                userId=user_id, q=query, maxResults=max_results, pageToken=page_token).execute()\n            messages.extend(response.get('messages', []))\n\n    except Exception as error:\n        print(f'An error occurred: {error}')\n\n    if not messages:\n        print(\"No messages found.\")\n\n    return messages\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parsing-emails",children:"Parsing Emails"}),"\n",(0,s.jsx)(n.p,{children:"After retrieving the data, it exists with a lot of metadata. We need to parse it into a readable format."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def parse_message(service, msg_id, user_id='me'):\n\n    try:\n        message = service.users().messages().get(\n            userId=user_id, id=msg_id, format='full').execute()\n        headers = message['payload']['headers']\n        parts = message['payload'].get('parts', [])\n        email_data = {\n            'Date': None,\n            'Subject': None,\n            'Text': None\n        }\n\n        # Parse headers to get send time, subject, sender, and recipients\n        for header in headers:\n            if header['name'] == 'Date':\n                email_data['Date'] = header['value']\n            elif header['name'] == 'Subject':\n                email_data['Subject'] = header['value']\n\n        # Parse email body\n        for part in parts:\n            if part['mimeType'] == 'text/plain' or part['mimeType'] == 'text/html':\n                data = part['body']['data']\n                text = urlsafe_b64decode(data.encode('ASCII')).decode('UTF-8')\n                email_data['Text'] = text\n                break  # Take only the first matching part\n\n        return email_data\n\n    except Exception as error:\n        print(f'An error occurred: {error}')\n        return None\n"})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"With that, we've covered the basic usage of the Gmail API."}),"\n",(0,s.jsx)(n.p,{children:"Don't run it yet as we still need to do some preparation work."}),"\n",(0,s.jsx)(n.p,{children:"We need to integrate with the OpenAI API so we can send email contents to ChatGPT for analysis."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},74725:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/gmail19-90fd8dd43b0e5ab75169c1dbb4b94b2d.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);