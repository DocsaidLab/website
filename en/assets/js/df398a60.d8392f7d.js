"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["68731"],{77086:function(e,n,t){t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var i=t(22580),s=t(74848),r=t(84429);let o={slug:"pytorch-training-out-of-memory",title:"The PyTorch List Trap",authors:"Z. Yuan",tags:["PyTorch","OOM"],image:"/en/img/2024/0220.webp",description:"Discovering and solving PyTorch OOM issues."},a,l={authorsImageUrls:[void 0]},c=[{value:"Problem Description",id:"problem-description",level:2},{value:"What About Me?",id:"what-about-me",level:2}];function h(e){let n={admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"As a professional PyTorch user, you should already be familiar with how to train models, tune hyperparameters, optimize performance, and more."}),"\n",(0,s.jsx)(n.p,{children:"How could you possibly write a program that encounters OOM (Out of Memory) issues?"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"This is referring to system memory, not GPU memory."})}),"\n",(0,s.jsx)(n.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsx)(n.p,{children:"There are many potential causes for OOM errors, but this time, I will focus on a specific issue that even professional workers often encounter:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You might be using a List structure!"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Based on my recent experience training models, I identified the exact scenario when the memory leak occurs."}),"\n",(0,s.jsx)(n.p,{children:"Consider the following code example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from torch.utils.data import Dataset, DataLoader\nimport numpy as np\nimport torch\n\n\nclass DataIter(Dataset):\n\n    def __init__(self):\n        self.data_np = np.array([x for x in range(10000000)])\n        self.data = [x for x in range(10000000)]\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        data = self.data[idx]\n        data = np.array([data], dtype=np.int64)\n        return torch.tensor(data)\n\n\ntrain_data = DataIter()\ntrain_loader = DataLoader(train_data, batch_size=300, num_workers=18)\n\nfor i, item in enumerate(train_loader):\n    if i % 1000 == 0:\n        print(i)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"After reviewing this example, let's cut to the chase:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.strong,{children:["Do you see the ",(0,s.jsx)(n.code,{children:"self.data"})," List? This List will cause the OOM problem."]})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"I did some research and found that this doesn't seem to be a PyTorch issue, but rather a Python issue."}),"\n",(0,s.jsx)(n.p,{children:"In any case, don't use List; use Numpy or Tensor to store data instead. This way, you won\u2019t encounter OOM issues."}),"\n",(0,s.jsx)(n.p,{children:"At least in this example, doing so was effective."}),"\n",(0,s.jsx)(n.h2,{id:"what-about-me",children:"What About Me?"}),"\n",(0,s.jsx)(n.p,{children:'You might say: "I wrote it the same way, and nothing happened!"'}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"The world is great until you encounter a large dataset."}),"\n",(0,s.jsx)(n.p,{children:"Based on my own test results, when the dataset is small, using a List does not cause memory leaks."}),"\n",(0,s.jsx)(n.p,{children:"More specifically:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Using around 10,000 data points? No problem!"}),"\n",(0,s.jsx)(n.li,{children:"Using over a million data points? Boom, it crashes!"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"So, if your dataset is small, you may never encounter this issue."}),"\n",(0,s.jsx)(n.p,{children:"As for the boundary of the dataset size, I\u2019m not sure... My guess is that it\u2019s some anomaly that occurs at a specific moment in the interaction between Python and PyTorch."})]})}function d(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},84429:function(e,n,t){t.d(n,{R:()=>o,x:()=>a});var i=t(96540);let s={},r=i.createContext(s);function o(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},22580:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/pytorch-training-out-of-memory","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024/02-20-pytorch-training-oom/index.md","title":"The PyTorch List Trap","description":"Discovering and solving PyTorch OOM issues.","date":"2024-02-20T00:00:00.000Z","tags":[{"inline":true,"label":"PyTorch","permalink":"/en/blog/tags/py-torch"},{"inline":true,"label":"OOM","permalink":"/en/blog/tags/oom"}],"readingTime":1.77,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"pytorch-training-out-of-memory","title":"The PyTorch List Trap","authors":"Z. Yuan","tags":["PyTorch","OOM"],"image":"/en/img/2024/0220.webp","description":"Discovering and solving PyTorch OOM issues."},"unlisted":false,"prevItem":{"title":"Setting Up Nextcloud: A Guide","permalink":"/en/blog/setting-up-nextcloud"},"nextItem":{"title":"Convert PDF to Images with Python","permalink":"/en/blog/convert-pdf-to-images"}}')}}]);