"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[96829],{47705:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var r=i(54756),o=i(74848),s=i(28453);const t={slug:"python-env-info-collector",title:"Recording Model Training Environment Issues",authors:"Zephyr",tags:["python","training-log"],image:"/en/img/2023/0922.webp",description:"A custom logging tool."},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Installation",id:"installation",level:2},{value:"<code>get_package_versions</code>",id:"get_package_versions",level:2},{value:"<code>get_gpu_cuda_versions</code>",id:"get_gpu_cuda_versions",level:2},{value:"<code>get_system_info</code>",id:"get_system_info",level:2},{value:"Considerations and Alternatives",id:"considerations-and-alternatives",level:2},{value:"Code",id:"code",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"When a model's training goes awry, we always want to know the reasons behind it. At such times, it's essential to inspect the environment information of the training host, such as Python version, PyTorch version, CUDA version, GPU information, CPU information, RAM information, disk information, IP address, and more."}),"\n",(0,o.jsx)(e.p,{children:"In this article, we share a custom Python tool we've crafted to swiftly review this information. While it's not exhaustive, it should suffice for basic troubleshooting needs."}),"\n",(0,o.jsx)(e.p,{children:"Typically, we record environment information in the training host's logs at the start of training."}),"\n",(0,o.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(e.p,{children:"Let's start by installing the necessary packages:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"pip install psutil requests\n"})}),"\n",(0,o.jsxs)(e.admonition,{type:"tip",children:[(0,o.jsx)(e.p,{children:"The complete code is available on GitHub, and we've also included it at the end of this article."}),(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/main/docsaidkit/utils/system_info.py",children:(0,o.jsx)(e.strong,{children:"system_info.py"})})}),"\n"]})]}),"\n",(0,o.jsx)(e.h2,{id:"get_package_versions",children:(0,o.jsx)(e.code,{children:"get_package_versions"})}),"\n",(0,o.jsxs)(e.p,{children:["Assuming you have installed ",(0,o.jsx)(e.code,{children:"docsaidkit"})," and it's already in your project, you can test it with the following command:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"from docsaidkit import get_package_versions\n\nget_package_versions()\n"})}),"\n",(0,o.jsx)(e.p,{children:"Upon execution, you'll receive the following result:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "PyTorch Version": "2.1.1+cu121",\n  "PyTorch Lightning Version": "2.1.2",\n  "TensorFlow Error": "No module named \'tensorflow\'",\n  "Keras Error": "No module named \'keras\'",\n  "NumPy Version": "1.24.4",\n  "Pandas Version": "2.0.3",\n  "Scikit-learn Version": "1.3.2",\n  "OpenCV Version": "4.8.1"\n}\n'})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"PyTorch Version: PyTorch version"}),"\n",(0,o.jsx)(e.li,{children:"PyTorch Lightning Version: PyTorch Lightning version"}),"\n",(0,o.jsx)(e.li,{children:"TensorFlow Error: TensorFlow version"}),"\n",(0,o.jsx)(e.li,{children:"Keras Error: Keras version"}),"\n",(0,o.jsx)(e.li,{children:"NumPy Version: NumPy version"}),"\n",(0,o.jsx)(e.li,{children:"Pandas Version: Pandas version"}),"\n",(0,o.jsx)(e.li,{children:"Scikit-learn Version: Scikit-learn version"}),"\n",(0,o.jsx)(e.li,{children:"OpenCV Version: OpenCV version"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"get_gpu_cuda_versions",children:(0,o.jsx)(e.code,{children:"get_gpu_cuda_versions"})}),"\n",(0,o.jsx)(e.p,{children:"Test program:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"from docsaidkit import get_gpu_cuda_versions\n\nget_gpu_cuda_versions()\n"})}),"\n",(0,o.jsx)(e.p,{children:"Upon execution, you'll receive the following result:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "CUDA Version": "12.1",\n  "NVIDIA Driver Version": "535.129.03"\n}\n'})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"CUDA Version: CUDA version"}),"\n",(0,o.jsx)(e.li,{children:"NVIDIA Driver Version: NVIDIA driver version"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"get_system_info",children:(0,o.jsx)(e.code,{children:"get_system_info"})}),"\n",(0,o.jsx)(e.p,{children:"Test program:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"from docsaidkit import get_system_info\n\nget_system_info()\n"})}),"\n",(0,o.jsx)(e.p,{children:"Upon execution, you'll receive the following result:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "OS Version": "Linux-6.2.0-37-generic-x86_64-with-glibc2.34",\n  "CPU Model": "13th Gen Intel(R) Core(TM) i9-13900K",\n  "Physical CPU Cores": 24,\n  "Logical CPU Cores (incl. hyper-threading)": 32,\n  "Total RAM (GB)": 125.56,\n  "Available RAM (GB)": 110.9,\n  "Disk Total (GB)": 1832.21,\n  "Disk Used (GB)": 188.94,\n  "Disk Free (GB)": 1550.12,\n  "GPU Info": "NVIDIA GeForce RTX 4090",\n  "IPV4 Address": ["192.168.---.---"],\n  "IPV4 Address (External)": "---.---.---.---",\n  "MAC Address": ["--.--.--.--.--.--"]\n}\n'})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"OS Version: Operating system version"}),"\n",(0,o.jsx)(e.li,{children:"CPU Model: CPU model"}),"\n",(0,o.jsx)(e.li,{children:"Physical CPU Cores: Number of physical CPU cores"}),"\n",(0,o.jsx)(e.li,{children:"Logical CPU Cores (incl. hyper-threading): Number of logical CPU cores (including hyper-threading)"}),"\n",(0,o.jsx)(e.li,{children:"Total RAM (GB): Total RAM capacity (GB)"}),"\n",(0,o.jsx)(e.li,{children:"Available RAM (GB): Available RAM capacity (GB)"}),"\n",(0,o.jsx)(e.li,{children:"Disk Total (GB): Total disk capacity (GB)"}),"\n",(0,o.jsx)(e.li,{children:"Disk Used (GB): Used disk capacity (GB)"}),"\n",(0,o.jsx)(e.li,{children:"Disk Free (GB): Free disk capacity (GB)"}),"\n",(0,o.jsx)(e.li,{children:"GPU Info: GPU information"}),"\n",(0,o.jsx)(e.li,{children:"IPV4 Address: Internal IPV4 address"}),"\n",(0,o.jsx)(e.li,{children:"IPV4 Address (External): External IPV4 address"}),"\n",(0,o.jsx)(e.li,{children:"MAC Address: MAC address"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"considerations-and-alternatives",children:"Considerations and Alternatives"}),"\n",(0,o.jsx)(e.p,{children:"Since we're writing this function on Ubuntu, there might be unexpected developments on other operating systems."}),"\n",(0,o.jsx)(e.p,{children:"Here are a few points to note:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Due to OS limitations, some functions may not run on all platforms. For example, ",(0,o.jsx)(e.code,{children:"get_cpu_info"})," won't display the complete CPU model on Windows. In such cases, consider using other tools or manually obtaining this information."]}),"\n",(0,o.jsxs)(e.li,{children:["If you're on Windows, you can't directly use ",(0,o.jsx)(e.code,{children:"nvidia-smi"})," to get GPU information. Make sure you have NVIDIA drivers and related tools installed and execute it in a command prompt window."]}),"\n",(0,o.jsxs)(e.li,{children:["External IP address is fetched from ",(0,o.jsx)(e.code,{children:"https://httpbin.org/ip"}),", so ensure an active internet connection."]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"code",children:"Code"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'import platform\nimport socket\nimport subprocess\n\nimport psutil\nimport requests\n\n\ndef get_package_versions():\n    """\n    Get versions of commonly used packages in deep learning and data science.\n\n    Returns:\n        dict: Dictionary containing versions of installed packages.\n    """\n    versions_info = {}\n\n    # PyTorch\n    try:\n        import torch\n        versions_info["PyTorch Version"] = torch.__version__\n    except Exception as e:\n        versions_info["PyTorch Error"] = str(e)\n\n    # PyTorch Lightning\n    try:\n        import pytorch_lightning as pl\n        versions_info["PyTorch Lightning Version"] = pl.__version__\n    except Exception as e:\n        versions_info["PyTorch Lightning Error"] = str(e)\n\n    # TensorFlow\n    try:\n        import tensorflow as tf\n        versions_info["TensorFlow Version"] = tf.__version__\n    except Exception as e:\n        versions_info["TensorFlow Error"] = str(e)\n\n    # Keras\n    try:\n        import keras\n        versions_info["Keras Version"] = keras.__version__\n    except Exception as e:\n        versions_info["Keras Error"] = str(e)\n\n    # NumPy\n    try:\n        import numpy as np\n        versions_info["NumPy Version"] = np.__version__\n    except Exception as e:\n        versions_info["NumPy Error"] = str(e)\n\n    # Pandas\n    try:\n        import pandas as pd\n        versions_info["Pandas Version"] = pd.__version__\n    except Exception as e:\n        versions_info["Pandas Error"] = str(e)\n\n    # Scikit-learn\n    try:\n        import sklearn\n        versions_info["Scikit-learn Version"] = sklearn.__version__\n    except Exception as e:\n        versions_info["Scikit-learn Error"] = str(e)\n\n    # OpenCV\n    try:\n        import cv2\n        versions_info["OpenCV Version"] = cv2.__version__\n    except Exception as e:\n        versions_info["OpenCV Error"] = str(e)\n\n    # ... and so on for any other packages you"re interested in\n\n    return versions_info\n\n\ndef get_gpu_cuda_versions():\n    """\n    Get GPU and CUDA versions using popular Python libraries.\n\n    Returns:\n        dict: Dictionary containing CUDA and GPU driver versions.\n    """\n\n    cuda_version = None\n\n    # Attempt to retrieve CUDA version using PyTorch\n    try:\n        import torch\n        cuda_version = torch.version.cuda\n    except ImportError:\n        pass\n\n    # If not retrieved via PyTorch, try using TensorFlow\n    if not cuda_version:\n        try:\n            import tensorflow as tf\n            cuda_version = tf.version.COMPILER_VERSION\n        except ImportError:\n            pass\n\n    # If still not retrieved, try using CuPy\n    if not cuda_version:\n        try:\n            import cupy\n            cuda_version = cupy.cuda.runtime.runtimeGetVersion()\n        except ImportError:\n            cuda_version = "Error: None of PyTorch, TensorFlow, or CuPy are installed."\n\n    # Try to get Nvidia driver version using nvidia-smi command\n    try:\n        smi_output = subprocess.check_output([\n            "nvidia-smi",\n            "--query-gpu=driver_version",\n            "--format=csv,noheader,nounits"\n        ]).decode("utf-8").strip()\n        nvidia_driver_version = smi_output.split("\\n")[0]\n    except Exception as e:\n        nvidia_driver_version = f"Error getting NVIDIA driver version: {e}"\n\n    return {\n        "CUDA Version": cuda_version,\n        "NVIDIA Driver Version": nvidia_driver_version\n    }\n\n\ndef get_cpu_info():\n    """\n    Retrieve the CPU model name based on the platform.\n\n    Returns:\n        str: CPU model name or "N/A" if not found.\n    """\n    if platform.system() == "Windows":\n        return platform.processor()\n    elif platform.system() == "Darwin":\n        # For macOS\n        command = "sysctl -n machdep.cpu.brand_string"\n        return subprocess.check_output(command, shell=True).strip().decode()\n    elif platform.system() == "Linux":\n        # For Linux\n        command = "cat /proc/cpuinfo | grep "model name" | uniq"\n        return subprocess.check_output(command, shell=True).strip().decode().split(":")[1].strip()\n    else:\n        return "N/A"\n\n\ndef get_external_ip():\n    try:\n        response = requests.get("https://httpbin.org/ip")\n        return response.json()["origin"]\n    except Exception as e:\n        return f"Error obtaining IP: {e}"\n\n\ndef get_system_info():\n    """\n    Fetch system information like OS version, CPU info, RAM, Disk usage, etc.\n\n    Returns:\n        dict: Dictionary containing system information.\n    """\n    info = {\n        "OS Version": platform.platform(),\n        "CPU Model": get_cpu_info(),\n        "Physical CPU Cores": psutil.cpu_count(logical=False),\n        "Logical CPU Cores (incl. hyper-threading)": psutil.cpu_count(logical=True),\n        "Total RAM (GB)": round(psutil.virtual_memory().total / (1024 ** 3), 2),\n        "Available RAM (GB)": round(psutil.virtual_memory().available / (1024 ** 3), 2),\n        "Disk Total (GB)": round(psutil.disk_usage("/").total / (1024 ** 3), 2),\n        "Disk Used (GB)": round(psutil.disk_usage("/").used / (1024 ** 3), 2),\n        "Disk Free (GB)": round(psutil.disk_usage("/").free / (1024 ** 3), 2)\n    }\n\n    # Try to fetch GPU information using nvidia-smi command\n    try:\n        gpu_info = subprocess.check_output(\n            ["nvidia-smi", "--query-gpu=name", "--format=csv,noheader,nounits"]\n        ).decode("utf-8").strip()\n        info["GPU Info"] = gpu_info\n    except Exception:\n        info["GPU Info"] = "N/A or Error"\n\n    # Get network information\n    addrs = psutil.net_if_addrs()\n    info["IPV4 Address"] = [\n        addr.address for addr in addrs.get("enp5s0", []) if addr.family == socket.AF_INET\n    ]\n\n    info["IPV4 Address (External)"] = get_external_ip()\n\n    # Determine platform and choose correct address family for MAC\n    if hasattr(socket, "AF_LINK"):\n        AF_LINK = socket.AF_LINK\n    elif hasattr(psutil, "AF_LINK"):\n        AF_LINK = psutil.AF_LINK\n    else:\n        raise Exception(\n            "Cannot determine the correct AF_LINK value for this platform.")\n\n    info["MAC Address"] = [\n        addr.address for addr in addrs.get("enp5s0", []) if addr.family == AF_LINK\n    ]\n\n    return info\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>a});var r=i(96540);const o={},s=r.createContext(o);function t(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:t(n.components),r.createElement(s.Provider,{value:e},n.children)}},54756:n=>{n.exports=JSON.parse('{"permalink":"/en/blog/python-env-info-collector","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023/09-22-python-env-info-collector/index.md","title":"Recording Model Training Environment Issues","description":"A custom logging tool.","date":"2023-09-22T00:00:00.000Z","tags":[{"inline":true,"label":"python","permalink":"/en/blog/tags/python"},{"inline":true,"label":"training-log","permalink":"/en/blog/tags/training-log"}],"readingTime":5.93,"hasTruncateMarker":true,"authors":[{"name":"Zephyr","title":"Engineer","url":"https://github.com/zephyr-sh","imageURL":"https://github.com/zephyr-sh.png","key":"Zephyr","page":null}],"frontMatter":{"slug":"python-env-info-collector","title":"Recording Model Training Environment Issues","authors":"Zephyr","tags":["python","training-log"],"image":"/en/img/2023/0922.webp","description":"A custom logging tool."},"unlisted":false,"prevItem":{"title":"Managing Python Versions with pyenv","permalink":"/en/blog/pyenv-installation"},"nextItem":{"title":"Setting Up PyPiServer on Ubuntu","permalink":"/en/blog/setting-up-pypiserver-on-ubuntu-with-docker"}}')}}]);