"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["36203"],{25396:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return a}});var i=t(85214),s=t(85893),o=t(50065);let r={slug:"closure-in-python",title:"What is Closure?",authors:"Z. Yuan",image:"/en/img/2025/0424.jpg",tags:["python","closure"],description:"A simple introduction to the concept of Closure."},l=void 0,c={authorsImageUrls:[void 0]},a=[{value:"Functions as First-Class Objects",id:"functions-as-first-class-objects",level:2},{value:"Defining Functions Within Functions",id:"defining-functions-within-functions",level:2},{value:"Closure",id:"closure",level:2},{value:"How to Identify a Closure?",id:"how-to-identify-a-closure",level:2},{value:"Common Uses and Scenarios",id:"common-uses-and-scenarios",level:2},{value:"Summary",id:"summary",level:2}];function u(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:'When writing code, you may occasionally come across the term "Closure."'}),"\n",(0,s.jsx)(n.p,{children:"It's not a foreign concept. We use it often, though we may not always recognize it by name."}),"\n",(0,s.jsx)(n.h2,{id:"functions-as-first-class-objects",children:"Functions as First-Class Objects"}),"\n",(0,s.jsx)(n.p,{children:"In Python, functions are not just syntactic tools; they are full-fledged objects."}),"\n",(0,s.jsx)(n.p,{children:"You can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Assign a function to a variable"}),"\n",(0,s.jsx)(n.li,{children:"Pass it as an argument"}),"\n",(0,s.jsx)(n.li,{children:"Return it from another function"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def greet(name):\n    return f"Hello, {name}"\n\nsay_hello = greet\nprint(say_hello("Alice"))\n# => Hello, Alice\n'})}),"\n",(0,s.jsx)(n.p,{children:"This means that functions can be treated like data, allowing them to be manipulated and combined with other logic to form modular behavior units."}),"\n",(0,s.jsx)(n.h2,{id:"defining-functions-within-functions",children:"Defining Functions Within Functions"}),"\n",(0,s.jsx)(n.p,{children:"Python allows defining functions inside other functions, creating a nested structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def outer():\n    def inner():\n        print("Hello from the inside")\n    inner()\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here, ",(0,s.jsx)(n.code,{children:"inner()"})," only lives within the scope of ",(0,s.jsx)(n.code,{children:"outer()"})," and cannot be directly called from the outside."]}),"\n",(0,s.jsx)(n.p,{children:"But we can rewrite it in a way that changes its destiny:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Passing the function as a result"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def outer():\n    def inner():\n        print("I\u2019m still alive.")\n    return inner\n\nescaped = outer()\nescaped()  # => I\u2019m still alive.\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In this code, even though ",(0,s.jsx)(n.code,{children:"outer()"})," has finished, ",(0,s.jsx)(n.code,{children:"inner()"})," can still be called."]}),"\n",(0,s.jsxs)(n.p,{children:["The reason is that when ",(0,s.jsx)(n.code,{children:"inner()"}),' was "brought out," it carried its execution context along.']}),"\n",(0,s.jsx)(n.h2,{id:"closure",children:"Closure"}),"\n",(0,s.jsx)(n.p,{children:"Now, we come to the main topic."}),"\n",(0,s.jsx)(n.p,{children:"A Closure is a language feature that allows a function to capture variables from its outer scope and still access them after the function has finished executing."}),"\n",(0,s.jsx)(n.p,{children:"Here\u2019s an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def make_multiplier(factor):\n    def multiply(n):\n        return n * factor\n    return multiply\n\ntriple = make_multiplier(3)\ndouble = make_multiplier(2)\n\nprint(triple(10))  # 30\nprint(double(10))  # 20\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, ",(0,s.jsx)(n.code,{children:"factor"})," is a free variable in ",(0,s.jsx)(n.code,{children:"multiply()"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.strong,{children:["It is not defined inside ",(0,s.jsx)(n.code,{children:"multiply()"}),", but is used within it."]})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Even after ",(0,s.jsx)(n.code,{children:"make_multiplier()"})," finishes executing, the ",(0,s.jsx)(n.code,{children:"factor"})," does not disappear."]}),"\n",(0,s.jsxs)(n.p,{children:['It is "packaged" inside ',(0,s.jsx)(n.code,{children:"multiply()"})," and returned along with it."]}),"\n",(0,s.jsxs)(n.p,{children:["This combination is what we call a ",(0,s.jsx)(n.strong,{children:"Closure"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-identify-a-closure",children:"How to Identify a Closure?"}),"\n",(0,s.jsxs)(n.p,{children:["You can observe this through the function's ",(0,s.jsx)(n.code,{children:"__closure__"})," attribute:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:">>> triple.__closure__\n(<cell at 0x...: int object at 0x...>,)\n\n>>> [c.cell_contents for c in triple.__closure__]\n[3]\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__closure__"})," lists the free variables captured in the function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cell_contents"})," retrieves the actual content of these variables"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This is not some mysterious phenomenon, but simply a natural consequence of the language's features."}),"\n",(0,s.jsx)(n.h2,{id:"common-uses-and-scenarios",children:"Common Uses and Scenarios"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Function Factories"}),": Creating custom functions with state based on input parameters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Counters/Caches"}),": Retaining limited state without needing a full class"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Decorators (",(0,s.jsx)(n.code,{children:"@decorator"}),")"]}),": A common implementation technique is based on the Closure structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependency Injection"}),": Binding data implicitly to avoid polluting global state"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When you need to ",(0,s.jsx)(n.strong,{children:"retain a small amount of state"})," and don\u2019t want to use full object-oriented design, Closure is a perfect tool."]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"Closure is not hard to understand. Its essence is simply:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Capture"}),": Saving the value of free variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Package"}),": Bundling them together with the function itself"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Continue"}),": Even after the original scope is gone, the function can still operate normally"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When you encounter ",(0,s.jsx)(n.code,{children:"__closure__"}),", don\u2019t be surprised. It\u2019s just a preserved version of the environment at that moment, holding onto the data state."]}),"\n",(0,s.jsx)(n.p,{children:"These values act as memory snapshots of your program, traveling along with the function."})]})}function d(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return r}});var i=t(67294);let s={},o=i.createContext(s);function r(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},85214:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/closure-in-python","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025/04-24-closure-in-python/index.md","title":"What is Closure?","description":"A simple introduction to the concept of Closure.","date":"2025-04-24T00:00:00.000Z","tags":[{"inline":true,"label":"python","permalink":"/en/blog/tags/python"},{"inline":true,"label":"closure","permalink":"/en/blog/tags/closure"}],"readingTime":2.775,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"closure-in-python","title":"What is Closure?","authors":"Z. Yuan","image":"/en/img/2025/0424.jpg","tags":["python","closure"],"description":"A simple introduction to the concept of Closure."},"unlisted":false,"nextItem":{"title":"What exactly is React Hook hooking?","permalink":"/en/blog/react-hook-vs-python"}}')}}]);