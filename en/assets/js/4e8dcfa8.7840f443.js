"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["56948"],{95309:function(n,s,e){e.r(s),e.d(s,{metadata:()=>r,contentTitle:()=>t,default:()=>p,assets:()=>i,toc:()=>c,frontMatter:()=>a});var r=JSON.parse('{"id":"capybara/funcs/drawings/draw_polygons","title":"draw_polygons","description":"drawpolygons(img Polygons, color \\\\_Thicknesses = 2, fillup=False, \\\\\\\\kwargs) -> np.ndarray","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/capybara/funcs/drawings/draw_polygons.md","sourceDirName":"capybara/funcs/drawings","slug":"/capybara/funcs/drawings/draw_polygons","permalink":"/en/docs/capybara/funcs/drawings/draw_polygons","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1734942587000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"draw_polygon","permalink":"/en/docs/capybara/funcs/drawings/draw_polygon"},"next":{"title":"draw_text","permalink":"/en/docs/capybara/funcs/drawings/draw_text"}}'),o=e("85893"),l=e("50065");let a={},t="draw_polygons",i={},c=[];function d(n){let s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"draw_polygons",children:"draw_polygons"})}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.a,{href:"https://github.com/DocsaidLab/Capybara/blob/975d62fba4f76db59e715c220f7a2af5ad8d050e/capybara/vision/visualization/draw.py#L150",children:"draw_polygons(img: np.ndarray, polygons: Polygons, color: _Colors = (0, 255, 0), thickness: _Thicknesses = 2, fillup=False, **kwargs) -> np.ndarray"})}),"\n"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Description"}),": Draws multiple polygons on an image."]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Parameters"}),":"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"img"})," (",(0,o.jsx)(s.code,{children:"np.ndarray"}),"): The image to draw on, as a NumPy array."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"polygons"})," (",(0,o.jsx)(s.code,{children:"List[Union[Polygon, np.ndarray]]"}),"): The polygons to draw, either as a list of ",(0,o.jsx)(s.code,{children:"Polygon"})," objects or NumPy arrays in the format [[x1, y1], [x2, y2], ...]."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"color"})," (",(0,o.jsx)(s.code,{children:"_Colors"}),"): The color of the polygons. It can be a single color or a list of colors. Defaults to (0, 255, 0) (green)."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"thickness"})," (",(0,o.jsx)(s.code,{children:"_Thicknesses"}),"): The thickness of the polygon's borders. It can be a single thickness or a list of thicknesses. Defaults to 2."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"fillup"})," (",(0,o.jsx)(s.code,{children:"bool"}),"): Whether to fill the polygons. Defaults to False."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"kwargs"}),": Other parameters."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Return Value"}),":"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"np.ndarray"}),": The image with the polygons drawn on it."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Example"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-python",children:"import capybara as cb\n\nimg = cb.imread('lena.png')\npolygons = [\n    cb.Polygon([(20, 20), (100, 20), (80, 80), (20, 40)]),\n    cb.Polygon([(100, 100), (20, 100), (40, 40), (100, 80)])\n]\npolygons_img = cb.draw_polygons(img, polygons, color=[(0, 255, 0), (255, 0, 0)], thickness=2)\n"})}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.img,{alt:"draw_polygons",src:e(26333).Z+"",width:"256",height:"256"})}),"\n"]}),"\n"]})]})}function p(n={}){let{wrapper:s}={...(0,l.a)(),...n.components};return s?(0,o.jsx)(s,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},26333:function(n,s,e){e.d(s,{Z:function(){return r}});let r=e.p+"assets/images/test_draw_polygons-284715897ed9b27cd534356250f2edbd.jpg"},50065:function(n,s,e){e.d(s,{Z:function(){return t},a:function(){return a}});var r=e(67294);let o={},l=r.createContext(o);function a(n){let s=r.useContext(l);return r.useMemo(function(){return"function"==typeof n?n(s):{...s,...n}},[s,n])}function t(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),r.createElement(l.Provider,{value:s},n.children)}}}]);