"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["88351"],{15944:function(n,i,e){e.r(i),e.d(i,{metadata:()=>t,contentTitle:()=>r,default:()=>p,assets:()=>l,toc:()=>o,frontMatter:()=>d});var t=JSON.parse('{"id":"capybara/funcs/vision/functionals/pad","title":"pad","description":"pad(img Union[int, Tuple[int, int], Tuple[int, int, int, int]], fillvalue Union[str, int, BORDER] = BORDER.CONSTANT) -> np.ndarray","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/capybara/funcs/vision/functionals/pad.md","sourceDirName":"capybara/funcs/vision/functionals","slug":"/capybara/funcs/vision/functionals/pad","permalink":"/en/docs/capybara/funcs/vision/functionals/pad","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1734619776000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"imadjust","permalink":"/en/docs/capybara/funcs/vision/functionals/imadjust"},"next":{"title":"imbinarize","permalink":"/en/docs/capybara/funcs/vision/functionals/imbinarize"}}'),a=e("85893"),s=e("50065");let d={sidebar_position:5},r="pad",l={},o=[];function c(n){let i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"pad",children:"pad"})}),"\n",(0,a.jsxs)(i.blockquote,{children:["\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/012540eebaebb2718987dd3ec0f7dcf40f403caa/docsaidkit/vision/functionals.py#L194",children:"pad(img: np.ndarray, pad_size: Union[int, Tuple[int, int], Tuple[int, int, int, int]], fill_value: Optional[Union[int, Tuple[int, int, int]]] = 0, pad_mode: Union[str, int, BORDER] = BORDER.CONSTANT) -> np.ndarray"})}),"\n"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Description"}),": Perform padding on the input image."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Parameters"}),":"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"img"})," (",(0,a.jsx)(i.code,{children:"np.ndarray"}),"): Input image to be padded."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"pad_size"})," (",(0,a.jsx)(i.code,{children:"Union[int, Tuple[int, int], Tuple[int, int, int, int]]"}),"): Padding size. It can be an integer to specify the same padding amount for all sides, a tuple ",(0,a.jsx)(i.code,{children:"(pad_top, pad_bottom, pad_left, pad_right)"})," to specify different padding amounts for each side, or a tuple ",(0,a.jsx)(i.code,{children:"(pad_height, pad_width)"})," to specify the same padding amount for height and width."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"fill_value"})," (",(0,a.jsx)(i.code,{children:"Optional[Union[int, Tuple[int, int, int]]]"}),"): Value used for padding. If the input image is a color image (3 channels), fill_value can be an integer or a tuple ",(0,a.jsx)(i.code,{children:"(R, G, B)"})," to specify the filling color. If the input image is a grayscale image (1 channel), fill_value should be an integer. Default is 0."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"pad_mode"})," (",(0,a.jsx)(i.code,{children:"Union[str, int, BORDER]"}),"): Padding mode. Available options are:","\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"BORDER.CONSTANT: Pad with constant values (fill_value)."}),"\n",(0,a.jsx)(i.li,{children:"BORDER.REPLICATE: Pad by replicating edge pixels."}),"\n",(0,a.jsx)(i.li,{children:"BORDER.REFLECT: Pad by reflecting the image around the edges."}),"\n",(0,a.jsx)(i.li,{children:"BORDER.REFLECT101: Pad by reflecting the image around the edges, with a slight adjustment to avoid artificial seams. Default is BORDER.CONSTANT."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Returns"}),":"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"np.ndarray"}),": Padded image."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Example"}),":"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-python",children:"import docsaidkit as D\n\nimg = D.imread('lena.png')\npad_img = D.pad(img, pad_size=20, fill_value=(255, 0, 0))\n\n# Resize the padded image to the original size for visualization\npad_img = D.imresize(pad_img, [img.shape[0], img.shape[1]])\n"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"pad",src:e(54929).Z+"",width:"426",height:"256"})}),"\n"]}),"\n"]})]})}function p(n={}){let{wrapper:i}={...(0,s.a)(),...n.components};return i?(0,a.jsx)(i,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},54929:function(n,i,e){e.d(i,{Z:function(){return t}});let t=e.p+"assets/images/test_pad-73035954aa862b84f070f6481de0c9d4.jpg"},50065:function(n,i,e){e.d(i,{Z:function(){return r},a:function(){return d}});var t=e(67294);let a={},s=t.createContext(a);function d(n){let i=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function r(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:d(n.components),t.createElement(s.Provider,{value:i},n.children)}}}]);