"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["19449"],{82535:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return h},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return c}});var i=t(68883),r=t(85893),o=t(50065);let s={slug:"pytorch-training-out-of-memory",title:"The Pitfall of Lists in PyTorch",authors:"Zephyr",tags:["PyTorch","OOM"],image:"/en/img/2024/0220.webp",description:"Resolving PyTorch OOM Issues."},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Problem Description",id:"problem-description",level:2},{value:"What About Me?",id:"what-about-me",level:2}];function u(e){let n={admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"As a seasoned PyTorch user, you're likely well-versed in training models, hyperparameter tuning, and optimization techniques."}),"\n",(0,r.jsx)(n.p,{children:"How could you possibly write code that runs out of memory (OOM)?"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"We're talking about system memory here, not GPU memory."})}),"\n",(0,r.jsx)(n.h2,{id:"problem-description",children:"Problem Description"}),"\n",(0,r.jsx)(n.p,{children:"With OOM issues stemming from various causes, this time we'll focus on one commonly encountered by professionals:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You might be using a List structure!"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"After investigation, we've pinpointed the exact scenario where leaks occur."}),"\n",(0,r.jsx)(n.p,{children:"Consider the following code snippet:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from torch.utils.data import Dataset, DataLoader\nimport numpy as np\nimport torch\n\n\nclass DataIter(Dataset):\n\n    def __init__(self):\n        self.data_np = np.array([x for x in range(10000000)])\n        self.data = [x for x in range(10000000)]\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        data = self.data[idx]\n        data = np.array([data], dtype=np.int64)\n        return torch.tensor(data)\n\n\ntrain_data = DataIter()\ntrain_loader = DataLoader(train_data, batch_size=300, num_workers=18)\n\nfor i, item in enumerate(train_loader):\n    if i % 1000 == 0:\n        print(i)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Cutting to the chase after examining this example:"}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.code,{children:"self.data"})," List? That's what leads to the OOM problem."]}),"\n",(0,r.jsx)(n.p,{children:"We attempted to find related information and it seems this isn't a PyTorch issue but rather a Python one."}),"\n",(0,r.jsx)(n.p,{children:"In essence, refrain from using Lists; use NumPy or Tensors to store data, and you won't encounter OOM problems."}),"\n",(0,r.jsx)(n.p,{children:"At least, that's effective in this example."}),"\n",(0,r.jsx)(n.h2,{id:"what-about-me",children:"What About Me?"}),"\n",(0,r.jsx)(n.p,{children:"You might be wondering: I've written code like this, why haven't I encountered any issues?"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"The world is a beautiful place until you encounter a large dataset."}),"\n",(0,r.jsx)(n.p,{children:"Based on my own testing, when the dataset is small, using Lists doesn't trigger memory leaks."}),"\n",(0,r.jsx)(n.p,{children:"More specifically:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When we use over 10,000 data points, no issues arise!"}),"\n",(0,r.jsx)(n.li,{children:"When we use over 1.2 million data points, it blows up!"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"So, if your dataset isn't large, you might never encounter this problem."}),"\n",(0,r.jsx)(n.p,{children:"As for the threshold of data volume, we're unsure..."}),"\n",(0,r.jsx)(n.p,{children:"We speculate this anomaly arises at a certain point during Python or PyTorch interaction."})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return s}});var i=t(67294);let r={},o=i.createContext(r);function s(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},68883:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/pytorch-training-out-of-memory","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024/02-20-pytorch-training-oom/index.md","title":"The Pitfall of Lists in PyTorch","description":"Resolving PyTorch OOM Issues.","date":"2024-02-20T00:00:00.000Z","tags":[{"inline":true,"label":"PyTorch","permalink":"/en/blog/tags/py-torch"},{"inline":true,"label":"OOM","permalink":"/en/blog/tags/oom"}],"readingTime":1.625,"hasTruncateMarker":true,"authors":[{"name":"Zephyr","title":"Engineer","url":"https://github.com/zephyr-sh","imageURL":"https://github.com/zephyr-sh.png","key":"Zephyr","page":null}],"frontMatter":{"slug":"pytorch-training-out-of-memory","title":"The Pitfall of Lists in PyTorch","authors":"Zephyr","tags":["PyTorch","OOM"],"image":"/en/img/2024/0220.webp","description":"Resolving PyTorch OOM Issues."},"unlisted":false,"prevItem":{"title":"Setting Up Nextcloud Guide","permalink":"/en/blog/setting-up-nextcloud"},"nextItem":{"title":"Convert PDF to Images using Python","permalink":"/en/blog/convert-pdf-to-images"}}')}}]);