"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4712],{58222:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>c});var o=i(74848),s=i(28453);const d={sidebar_position:4},r="JPG Process",t={id:"docsaidkit/funcs/vision/improc/jpg_process",title:"JPG Process",description:"getorientationcode(stream: Union[str, Path, bytes]) -> Union[ROTATE, None]",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/docsaidkit/funcs/vision/improc/jpg_process.md",sourceDirName:"docsaidkit/funcs/vision/improc",slug:"/docsaidkit/funcs/vision/improc/jpg_process",permalink:"/en/docs/docsaidkit/funcs/vision/improc/jpg_process",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"zephyr-sh",lastUpdatedAt:1726225924e3,sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"pdf2imgs",permalink:"/en/docs/docsaidkit/funcs/vision/improc/pdf2imgs"},next:{title:"PNG Process",permalink:"/en/docs/docsaidkit/funcs/vision/improc/png_process"}},a={},c=[{value:"Description",id:"description",level:2},{value:"Parameters",id:"parameters",level:2},{value:"jpgencode",id:"jpgencode",level:3},{value:"jpgdecode",id:"jpgdecode",level:3},{value:"jpgread",id:"jpgread",level:3},{value:"Example",id:"example",level:2},{value:"jpgencode",id:"jpgencode-1",level:3},{value:"jpgdecode",id:"jpgdecode-1",level:3},{value:"jpgread",id:"jpgread-1",level:3},{value:"Additional Note: TurboJPEG",id:"additional-note-turbojpeg",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"jpg-process",children:"JPG Process"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/012540eebaebb2718987dd3ec0f7dcf40f403caa/docsaidkit/vision/improc.py#L34C5-L34C25",children:"get_orientation_code(stream: Union[str, Path, bytes]) -> Union[ROTATE, None]"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/012540eebaebb2718987dd3ec0f7dcf40f403caa/docsaidkit/vision/improc.py#L50",children:"jpgencode(img: np.ndarray, quality: int = 90) -> Union[bytes, None]"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/012540eebaebb2718987dd3ec0f7dcf40f403caa/docsaidkit/vision/improc.py#L60",children:"jpgdecode(byte_: bytes) -> Union[np.ndarray, None]"})}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/012540eebaebb2718987dd3ec0f7dcf40f403caa/docsaidkit/vision/improc.py#L72",children:"jpgread(img_file: Union[str, Path]) -> Union[np.ndarray, None]"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This set of functions provides support for encoding, decoding, and reading JPG images, as well as automatically adjusting the image orientation from EXIF data."}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"get_orientation_code"}),": Extracts orientation information from the image's EXIF data and converts it into a code suitable for image rotation. This step is automatically performed in the ",(0,o.jsx)(n.code,{children:"jpgdecode"})," and ",(0,o.jsx)(n.code,{children:"jpgread"})," functions to ensure that the orientation of the read image is correct."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"jpgencode"}),": Encodes a NumPy image array into a byte string in JPG format. When using the ",(0,o.jsx)(n.code,{children:"jpgencode"})," function, you can adjust the ",(0,o.jsx)(n.code,{children:"quality"})," parameter to balance image quality and file size."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"jpgdecode"}),": Decodes a byte string in JPG format into a NumPy image array and adjusts the image orientation based on EXIF data."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"jpgread"}),": Reads a JPG image from a file, decodes it into a NumPy image array, and adjusts the image orientation based on EXIF data."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsx)(n.h3,{id:"jpgencode",children:"jpgencode"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"img"})," (",(0,o.jsx)(n.code,{children:"np.ndarray"}),"): The image array to be encoded."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"quality"})," (",(0,o.jsx)(n.code,{children:"int"}),"): Encoding quality, ranging from 1 to 100. Default is 90."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"jpgdecode",children:"jpgdecode"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"byte_"})," (",(0,o.jsx)(n.code,{children:"bytes"}),"): The byte string in JPG format to be decoded."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"jpgread",children:"jpgread"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"img_file"})," (",(0,o.jsx)(n.code,{children:"Union[str, Path]"}),"): The path to the JPG image file to be read."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.h3,{id:"jpgencode-1",children:"jpgencode"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import numpy as np\nimport docsaidkit as D\n\nimg_array = np.random.rand(100, 100, 3) * 255\nencoded_bytes = D.jpgencode(img_array, quality=95)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"jpgdecode-1",children:"jpgdecode"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"decoded_img = D.jpgdecode(encoded_bytes)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"jpgread-1",children:"jpgread"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"img_array = D.jpgread('path/to/image.jpg')\n"})}),"\n",(0,o.jsx)(n.h2,{id:"additional-note-turbojpeg",children:"Additional Note: TurboJPEG"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/libjpeg-turbo/libjpeg-turbo",children:"TurboJPEG"})," is an efficient JPEG image processing library that provides fast encoding, decoding, compression, and decompression of images. In the ",(0,o.jsx)(n.code,{children:"jpgencode"})," and ",(0,o.jsx)(n.code,{children:"jpgdecode"})," functions, we utilize ",(0,o.jsx)(n.code,{children:"TurboJPEG"})," for encoding and decoding JPG images. TurboJPEG is a Python wrapper for ",(0,o.jsx)(n.code,{children:"libjpeg-turbo"}),", which offers faster image encoding and decoding speeds and supports various image formats."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Features"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Efficiency"}),": Leveraging the high-performance features of the libjpeg-turbo library, TurboJPEG significantly improves image processing speed compared to traditional JPEG processing methods."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Ease of Use"}),": Provides a concise and clear API, allowing developers to easily implement efficient JPEG image processing in their applications."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Flexibility"}),": Supports various image quality and compression level settings to meet the requirements for image quality and file size in different scenarios."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cross-Platform"}),": Supports multiple operating systems including Windows, macOS, and Linux, making it convenient to use in different development environments."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Once installed, TurboJPEG can be used in Python for encoding and decoding functionalities as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from turbojpeg import TurboJPEG\n\n# Initialize a TurboJPEG instance\njpeg = TurboJPEG()\n\n# Decode\nbgr_array = jpeg.decode(byte_)\n\n# Encode\nbyte_ = jpeg.encode(img, quality=quality)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var o=i(96540);const s={},d=o.createContext(s);function r(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);