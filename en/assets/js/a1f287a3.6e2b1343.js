"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["78354"],{12901:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>s,default:()=>p,contentTitle:()=>i,assets:()=>o,toc:()=>l,metadata:()=>a});var a=JSON.parse('{"id":"capybara/funcs/vision/ipcam/ipcamcapture","title":"IpcamCapture","description":"IpcamCapture(url str) -> None","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/capybara/funcs/vision/ipcam/ipcamcapture.md","sourceDirName":"capybara/funcs/vision/ipcam","slug":"/capybara/funcs/vision/ipcam/ipcamcapture","permalink":"/en/docs/capybara/funcs/vision/ipcam/ipcamcapture","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1734942587000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ipcam","permalink":"/en/docs/category/ipcam"},"next":{"title":"WebDemo","permalink":"/en/docs/capybara/funcs/vision/ipcam/webdemo"}}'),c=r(85893),t=r(50065);let s={},i="IpcamCapture",o={},l=[];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"ipcamcapture",children:"IpcamCapture"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://github.com/DocsaidLab/Capybara/blob/975d62fba4f76db59e715c220f7a2af5ad8d050e/capybara/vision/ipcam/camera.py#L11",children:"IpcamCapture(url: int, str, color_base: str) -> None"})}),"\n"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Description"}),": Captures images from an IP camera."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"url"})," (",(0,c.jsx)(n.code,{children:"int"}),", ",(0,c.jsx)(n.code,{children:"str"}),"): The identifier for the video source. It can be the device index for a locally connected camera or a string containing the network address of an IP camera. For local cameras, 0 is typically the default camera. Default is 0."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"color_base"})," (",(0,c.jsx)(n.code,{children:"str"}),"): The color space for the output frame. It can be 'BGR' or 'RGB'. Note that OpenCV input frames are always in BGR format. If ",(0,c.jsx)(n.code,{children:"color_base"})," is set to 'RGB', each frame will be converted from BGR to RGB before returning. Default is 'BGR'."]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Attributes"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"color_base"})," (",(0,c.jsx)(n.code,{children:"str"}),"): The color space of the output frame."]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Methods"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"get_frame() -> np.ndarray"}),": Retrieves the current captured frame."]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Example"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"import capybara as cb\n\ncam = cb.IpcamCapture(url='http://your_ip:your_port/video')\nfor frame in cam:\n    cb.imwrite(frame, 'frame.jpg')\n"})}),"\n"]}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},50065:function(e,n,r){r.d(n,{Z:()=>i,a:()=>s});var a=r(67294);let c={},t=a.createContext(c);function s(e){let n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);