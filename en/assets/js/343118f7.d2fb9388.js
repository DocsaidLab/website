"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["18378"],{51982:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return d}});var i=t(16429),s=t(85893),a=t(50065);let r={slug:"builds-dashboard-system",title:"I, an AI Engineer, Actually Built a Backend System?",authors:"Z. Yuan",image:"/en/img/2025/0316.webp",tags:["React","FastAPI","User Authentication"],description:"A sharing of the experience building a backend system from scratch."},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Are You Just Bored?",id:"are-you-just-bored",level:2},{value:"The First Generation Backend: Minimalist Style",id:"the-first-generation-backend-minimalist-style",level:2},{value:"Second Generation Backend: Minimalist Style",id:"second-generation-backend-minimalist-style",level:2},{value:"User Login System",id:"user-login-system",level:3},{value:"API Token Issuance System",id:"api-token-issuance-system",level:3},{value:"Technical Stack Summary",id:"technical-stack-summary",level:2},{value:"Final Thoughts",id:"final-thoughts",level:2}];function c(e){let n={del:"del",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Good afternoon, or good evening."}),"\n",(0,s.jsx)(n.p,{children:"Recently, I've been a bit slack in updating articles, so I owe everyone an apology."}),"\n",(0,s.jsx)(n.p,{children:"The reason is that I've been sidetracked into writing both front-end and back-end code."}),"\n",(0,s.jsx)(n.h2,{id:"are-you-just-bored",children:"Are You Just Bored?"}),"\n",(0,s.jsx)(n.p,{children:"Well, yes."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"I just had a long vacation recently and finally had the time to tackle some problems I hadn\u2019t been able to solve before:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"This website doesn't have a backend!"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You might know that this website is built on the Docusaurus framework as a static site. When I first set up the website, I just wanted to occasionally write some blog posts and share some paper notes, without any specific planning or grand goals."}),"\n",(0,s.jsx)(n.p,{children:"The pros and cons of static websites versus dynamic websites are something I don't need to explain. I had tried using WordPress to set up a site before, but after a few steps, some guy would pop up asking for money, which was really annoying. After trying a few rounds, I went back to the static site setup."}),"\n",(0,s.jsx)(n.p,{children:"There are pros and cons to everything, and as the content of the site gradually accumulated, I started receiving more and more emails from readers, most of which were about how to use the models\u2014questions like how to configure the environment, install dependencies, or solve strange errors encountered during execution."}),"\n",(0,s.jsxs)(n.p,{children:["These are easy problems to solve; I just tell them to ask ChatGPT, and it\u2019s all good. (",(0,s.jsx)(n.del,{children:"Isn\u2019t that too casual?"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"The trickier request was: some readers wanted to directly call my backend API!"}),"\n",(0,s.jsx)(n.h2,{id:"the-first-generation-backend-minimalist-style",children:"The First Generation Backend: Minimalist Style"}),"\n",(0,s.jsx)(n.p,{children:'Going back a little further in time, after writing a few articles, I wanted to make the models available for everyone to try, so I created a few model demos and built the first generation of the backend: yes! It\u2019s the "Playground" on the navigation bar of this website. If you haven\u2019t tried it, you can give it a go.'}),"\n",(0,s.jsx)(n.p,{children:"That said, if you want to use the models on a webpage, generally there are two solutions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Load the model directly from the webpage and perform inference in the browser."})}),"\n",(0,s.jsx)(n.p,{children:"I rejected this solution immediately."}),"\n",(0,s.jsx)(n.p,{children:"Because it would mean I would have to provide a model download endpoint, and the traffic issues that would arise could potentially bring me down."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. Provide a backend service that returns the inference results."})}),"\n",(0,s.jsx)(n.p,{children:"This was the solution I ended up adopting."}),"\n",(0,s.jsx)(n.p,{children:"But this also meant that, one way or another, I had to handcraft a backend system to provide the corresponding service."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Since I was already using Docusaurus for the front-end, I had to adopt a decoupled architecture for the front-end and back-end. Before starting to code, I drew an architecture diagram."}),"\n",(0,s.jsx)(n.p,{children:"In fact, aside from the architecture diagram, I also wrote a bunch of specifications, system operation flows, and detailed input/output designs, etc. But here, I'll just show the architecture diagram, as the details would be too long to explain."}),"\n",(0,s.jsx)(n.p,{children:"The architecture should look something like this:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\n    subgraph Frontend\n        Input[Send Data]\n        Render[Receive Data and Render]\n    end\n\n    subgraph Backend\n        Nginx[Nginx]\n        FastAPI[Backend API]\n        SQL[Database]\n        Model[Model Inference]\n    end\n\n    Input --\x3e|HTTP Request| Nginx\n    Nginx --\x3e|Forward Request| FastAPI\n    FastAPI --\x3e |Store Result| SQL\n    FastAPI --\x3e Model\n    Model --\x3e|Store Result| SQL\n    FastAPI --\x3e|HTTP Response| Nginx\n    Nginx --\x3e|Send Response| Render\n\n    style Input fill:#a7e4ae,stroke:#5cb867,stroke-width:2px\n    style Render fill:#f8e9a1,stroke:#e0c35f,stroke-width:2px\n    style Nginx fill:#7eaefc,stroke:#4c84d9,stroke-width:2px\n    style FastAPI fill:#f7b2bd,stroke:#e3798b,stroke-width:2px\n    style SQL fill:#ffbc75,stroke:#e09a3f,stroke-width:2px\n    style Model fill:#cbaacb,stroke:#9a6d9a,stroke-width:2px"}),"\n",(0,s.jsx)(n.p,{children:'After finalizing the specifications, I followed the diagram to implement the system, which is now the operational logic behind the "Playground" feature on the website.'}),"\n",(0,s.jsx)(n.p,{children:"Up to this point, although it looks simple, it's worth discussing the technologies I chose to use."}),"\n",(0,s.jsx)(n.p,{children:"After all, behind every technology choice, there are often unseen little details:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Nginx"})}),"\n",(0,s.jsx)(n.p,{children:"Another common choice here is Apache, which was once the king of web servers, rich in features, with many modules, a large community, and a very broad user base. But Apache's configuration is a bit more complex, and its ability to handle high concurrency connections is somewhat inferior to Nginx."}),"\n",(0,s.jsx)(n.p,{children:"To be honest, I don\u2019t think Apache is bad, it\u2019s just that I really like the clean and intuitive configuration style of Nginx. Whether it\u2019s static resource proxying, reverse proxying, or load balancing, Nginx\u2019s setup always gets straight to the point, and it\u2019s easy to understand at a glance."}),"\n",(0,s.jsx)(n.p,{children:"Moreover, Nginx was specifically designed to handle a large number of concurrent connections, and its stability and performance have been tested by the market and time, making it particularly reliable to use."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"FastAPI"})}),"\n",(0,s.jsx)(n.p,{children:"The reason I chose FastAPI is partly because I\u2019m more familiar with the Python development environment. If I suddenly switched to learn NodeJS or another backend framework, it would involve a lot of learning costs, potentially delaying the development process."}),"\n",(0,s.jsx)(n.p,{children:"Besides familiarity, FastAPI\u2019s other features also made it hard to resist: it natively supports asynchronous (async) operations, which are perfect for backend model inference scenarios that are time-consuming but require high efficiency in handling concurrent requests. Plus, it has Pydantic validation built-in, which automatically generates API documentation and even prepares a test interface for you, greatly reducing the pain during API development and maintenance."}),"\n",(0,s.jsx)(n.p,{children:"More importantly, FastAPI\u2019s design structure is clear and easy to understand. It\u2019s neither as heavy and cumbersome as Django nor as free-form as Flask, which might lead to chaotic architecture. The development experience is just right."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"PostgreSQL"})}),"\n",(0,s.jsx)(n.p,{children:"Speaking of databases, I used to be more familiar with MySQL."}),"\n",(0,s.jsx)(n.p,{children:"MySQL certainly has a good reputation in the development community and is the go-to choice for many newcomers to databases, but since Oracle acquired it, MySQL\u2019s open-source license has gradually shifted toward commercialization, increasing the uncertainty of its ecosystem, which makes me a bit worried."}),"\n",(0,s.jsx)(n.p,{children:"In contrast, PostgreSQL has shown a stable and gradually growing healthy state in the open-source community. Apart from ongoing community support, PostgreSQL also supports many powerful advanced features, such as native JSON data types and GIS geographic information processing, which make it more flexible and practical in situations where complex data requirements are needed."}),"\n",(0,s.jsx)(n.p,{children:"Additionally, PostgreSQL integrates seamlessly with FastAPI and various ORM tools (like SQLAlchemy), providing a smooth and enjoyable experience. Not to mention, PostgreSQL performs excellently when handling a large number of concurrent and high-load requests, so if the website traffic increases or the backend requirements become more complex in the future, at least I won\u2019t have to worry about the database becoming a bottleneck."}),"\n",(0,s.jsx)(n.hr,{}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"I\u2019ve said a lot, but this may not necessarily be the best combination; it\u2019s mainly sufficient to meet the current needs."}),"\n",(0,s.jsx)(n.h2,{id:"second-generation-backend-minimalist-style",children:"Second Generation Backend: Minimalist Style"}),"\n",(0,s.jsx)(n.p,{children:"Back to the issue I mentioned at the beginning, a reader emailed asking to directly call my backend API through their program."}),"\n",(0,s.jsx)(n.p,{children:"The originally designed API was simply intended for web use and did not include a complete security mechanism or authentication process. Exposing it publicly could lead to various security issues. Therefore, I had to build a more complete API authentication and authorization system by myself."}),"\n",(0,s.jsx)(n.p,{children:"But I don\u2019t understand it!"}),"\n",(0,s.jsx)(n.p,{children:"Although I didn\u2019t understand it, since the goal was set, I had to dive in and do it anyway!"}),"\n",(0,s.jsx)(n.h3,{id:"user-login-system",children:"User Login System"}),"\n",(0,s.jsx)(n.p,{children:"The prerequisite for API authentication is building a complete user system, including user registration, login, permission management, email verification, and other features."}),"\n",(0,s.jsx)(n.p,{children:"In addition to the existing FastAPI and PostgreSQL database, I introduced Redis to handle session caching and token management. To enhance user experience, I also designed email verification and password recovery features, sending verification emails via an SMTP service."}),"\n",(0,s.jsx)(n.p,{children:"Now, I can draw another architecture diagram. Let me sketch it out:"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph LR\n    %% Frontend Block\n    subgraph Frontend\n        UserRegister[User Registration]\n        UserLogin[User Login]\n    end\n\n    %% Backend Block\n    subgraph Backend\n        Nginx[Nginx]\n        FastAPI[Backend API]\n        UserDB[User Database]\n        Redis[Redis Cache]\n        EmailVerification[Email Verification Module]\n        ForgotPassword[Forgot Password Module]\n    end\n\n    %% Registration Process (Blue)\n    UserRegister -- "Registration Request" --\x3e Nginx\n    Nginx -- "Forward Registration Request" --\x3e FastAPI\n    FastAPI -- "Validate and Store Data" --\x3e UserDB\n    FastAPI -- "Write to Cache/Create Session" --\x3e Redis\n    FastAPI -- "Respond with Registration Result" --\x3e Nginx\n    Nginx -- "Send Result" --\x3e UserRegister\n\n    %% Login Process (Orange)\n    UserLogin -- "Login Request" --\x3e Nginx\n    Nginx -- "Forward Login Request" --\x3e FastAPI\n    FastAPI -- "Query and Validate Data" --\x3e UserDB\n    FastAPI -- "Read/Update Session Cache" --\x3e Redis\n    FastAPI -- "Respond with Login Result (JWT/Session)" --\x3e Nginx\n    Nginx -- "Send Result" --\x3e UserLogin\n\n    %% Email Verification Process (Purple) - Example of Interaction with Backend\n    FastAPI -- "Send Verification Email" --\x3e EmailVerification\n    EmailVerification -- "Update User Verification Status" --\x3e UserDB\n    EmailVerification -- "Respond with Result" --\x3e FastAPI\n\n    %% Forgot Password Process (Pink) - Example of Interaction with Backend\n    FastAPI -- "Forgot Password Request" --\x3e ForgotPassword\n    ForgotPassword -- "Update User Password" --\x3e UserDB\n    ForgotPassword -- "Respond with Result" --\x3e FastAPI\n\n    %% Original Arrow Styles (Registration=Blue / Login=Orange)\n    linkStyle 0 stroke:#007BFF,stroke-width:2px\n    linkStyle 1 stroke:#007BFF,stroke-width:2px\n    linkStyle 2 stroke:#007BFF,stroke-width:2px\n    linkStyle 3 stroke:#007BFF,stroke-width:2px\n    linkStyle 4 stroke:#007BFF,stroke-width:2px\n    linkStyle 5 stroke:#007BFF,stroke-width:2px\n\n    linkStyle 6 stroke:#fd7e14,stroke-width:2px\n    linkStyle 7 stroke:#fd7e14,stroke-width:2px\n    linkStyle 8 stroke:#fd7e14,stroke-width:2px\n    linkStyle 9 stroke:#fd7e14,stroke-width:2px\n    linkStyle 10 stroke:#fd7e14,stroke-width:2px\n    linkStyle 11 stroke:#fd7e14,stroke-width:2px\n\n    %% Email Verification Arrows (Purple: from line 12)\n    linkStyle 12 stroke:#6f42c1,stroke-width:2px\n    linkStyle 13 stroke:#6f42c1,stroke-width:2px\n    linkStyle 14 stroke:#6f42c1,stroke-width:2px\n\n    %% Forgot Password Arrows (Pink: from line 15)\n    linkStyle 15 stroke:#d63384,stroke-width:2px\n    linkStyle 16 stroke:#d63384,stroke-width:2px\n    linkStyle 17 stroke:#d63384,stroke-width:2px'}),"\n",(0,s.jsx)(n.p,{children:"This user system needs to include a user database, password encryption, registration email verification, password reset flow, and various other details. I haven\u2019t considered integrating third-party login services yet, like allowing users to log in via Google or Facebook accounts. If I were to integrate third-party login verification, that would be a whole other task, which I\u2019ll leave for the future."}),"\n",(0,s.jsx)(n.p,{children:"Speaking of registration email verification, it turned out to be more troublesome than I expected."}),"\n",(0,s.jsx)(n.p,{children:"At first, I applied for Amazon SES, but after a day of waiting, they rejected me, saying that I looked suspicious. (What?)"}),"\n",(0,s.jsx)("div",{align:"center",children:(0,s.jsx)("figure",{style:{width:"60%"},children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"amazon",src:t(46531).Z+"",width:"2291",height:"1617"})})})}),"\n",(0,s.jsx)(n.p,{children:"Fine, then I thought I could just set up my own email server, right?"}),"\n",(0,s.jsx)(n.p,{children:"But after I set up the server, the emails I sent were rejected by Gmail, and they too thought I was suspicious. (\uD83D\uDE2D \uD83D\uDE2D \uD83D\uDE2D)"}),"\n",(0,s.jsx)(n.p,{children:"Anyway, after some setbacks, I finally found another supplier to sort this out."}),"\n",(0,s.jsx)(n.h3,{id:"api-token-issuance-system",children:"API Token Issuance System"}),"\n",(0,s.jsx)(n.p,{children:"After completing the user system, I finally got to work on the API Token functionality."}),"\n",(0,s.jsx)(n.p,{children:"Here, I used the JWT (JSON Web Token) mechanism to generate and verify tokens. The user logs in to authenticate their identity, and the system generates a JWT that is stored in Redis. When the user sends an API request, the JWT is sent as a Bearer Token to the backend for identity verification. Once the token is validated successfully, the user can access the backend model inference service."}),"\n",(0,s.jsx)(n.p,{children:"This part is fairly simple, so here\u2019s an architecture diagram for the token request flow:"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph LR\n    subgraph Frontend\n        apiClient[API Request Client]\n    end\n\n    subgraph Backend\n        Nginx[Nginx]\n        subgraph Authentication Service\n            APIToken[API Token Issuance Service]\n        end\n        UserDB[User Database]\n        Redis[Redis Cache]\n    end\n\n    apiClient -- "Token Request" --\x3e Nginx\n    Nginx -- "Forward Token Request" --\x3e APIToken\n    APIToken -- "Verify (Redis)" --\x3e Redis\n    APIToken -- "Verify (UserDB)" --\x3e UserDB\n    APIToken -- "Generate and Store Token" --\x3e Redis\n    APIToken -- "Respond with Token" --\x3e Nginx\n    Nginx -- "Send Token" --\x3e apiClient\n\n    linkStyle 0 stroke:#00bfff,stroke-width:2px\n    linkStyle 1 stroke:#00bfff,stroke-width:2px\n    linkStyle 2 stroke:#00bfff,stroke-width:2px\n    linkStyle 3 stroke:#00bfff,stroke-width:2px\n    linkStyle 4 stroke:#00bfff,stroke-width:2px\n    linkStyle 5 stroke:#00bfff,stroke-width:2px\n    linkStyle 6 stroke:#00bfff,stroke-width:2px\n\n    %% Node Styles\n    style apiClient fill:#ffe0b3,stroke:#ffb366,stroke-width:2px\n    style Nginx fill:#7eaefc,stroke:#4c84d9,stroke-width:2px\n    style APIToken fill:#d9c8f5,stroke:#a58bdd,stroke-width:2px\n    style UserDB fill:#ffbc75,stroke:#e09a3f,stroke-width:2px\n    style Redis fill:#cbaacb,stroke:#9a6d9a,stroke-width:2px'}),"\n",(0,s.jsx)(n.p,{children:"Once the user has the token, they can use it to call the API. Redis is used to limit traffic and track the number of calls. The general flow for API requests looks like this:"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph LR\n    subgraph Frontend\n        apiClient[API Request Client]\n    end\n\n    subgraph Backend\n        Nginx[Nginx]\n        subgraph Authentication Service\n            APIToken[API Token Issuance Service]\n        end\n        ModelService[Deep Learning Model Inference Service]\n        UserDB[User Database]\n        Redis[Redis Cache]\n    end\n\n    apiClient -- "Model Inference Request (with Token)" --\x3e Nginx\n    Nginx -- "Forward Inference Request" --\x3e APIToken\n    APIToken -- "Verify Token (Redis)" --\x3e Redis\n    APIToken -- "Verify Token (UserDB)" --\x3e UserDB\n    APIToken -- "Token Verified" --\x3e ModelService\n    ModelService -- "Return Inference Result" --\x3e APIToken\n    APIToken -- "Respond with Result" --\x3e Nginx\n    Nginx -- "Send Inference Result" --\x3e apiClient\n\n    %% Change line colors to pink\n    linkStyle 0 stroke:#ff1493,stroke-width:2px\n    linkStyle 1 stroke:#ff1493,stroke-width:2px\n    linkStyle 2 stroke:#ff1493,stroke-width:2px\n    linkStyle 3 stroke:#ff1493,stroke-width:2px\n    linkStyle 4 stroke:#ff1493,stroke-width:2px\n    linkStyle 5 stroke:#ff1493,stroke-width:2px\n    linkStyle 6 stroke:#ff1493,stroke-width:2px\n    linkStyle 7 stroke:#ff1493,stroke-width:2px\n\n    %% Node Styles (can be kept or modified as needed)\n    style apiClient fill:#ffe0b3,stroke:#ffb366,stroke-width:2px\n    style Nginx fill:#7eaefc,stroke:#4c84d9,stroke-width:2px\n    style APIToken fill:#d9c8f5,stroke:#a58bdd,stroke-width:2px\n    style ModelService fill:#e6e6fa,stroke:#b565a7,stroke-width:2px\n    style UserDB fill:#ffbc75,stroke:#e09a3f,stroke-width:2px\n    style Redis fill:#cbaacb,stroke:#9a6d9a,stroke-width:2px'}),"\n",(0,s.jsx)(n.h2,{id:"technical-stack-summary",children:"Technical Stack Summary"}),"\n",(0,s.jsx)(n.p,{children:"The second-generation backend mainly introduced two core features: the user registration system and the API token issuance mechanism."}),"\n",(0,s.jsx)(n.p,{children:"After this upgrade, the overall tech stack is clearer and more complete, as listed below:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend Framework"}),": React (Docusaurus)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend Framework"}),": FastAPI (Python)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": PostgreSQL"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache Service"}),": Redis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reverse Proxy and Load Balancing"}),": Nginx"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Aside from the newly added Redis, most of these technologies were already part of the first generation of the backend. However, at that time, there wasn\u2019t a dedicated frontend page to clearly present this information. Through this update, I created a dedicated frontend backend page, making management more intuitive and efficient."}),"\n",(0,s.jsx)(n.p,{children:"As a deep learning engineer, Python with FastAPI is an essential tool for me. While this tech stack isn't particularly innovative, it significantly improves development efficiency and smoothness, as familiar tools allow for faster implementation."}),"\n",(0,s.jsx)(n.p,{children:"For deployment, I continue to use Docker Compose with Nginx, hosted on my personal server. Although I would prefer to use a cloud server, the cost is too high, and I can't afford it, so I have to settle with hosting it on my home machine for now."}),"\n",(0,s.jsx)(n.p,{children:"In terms of development insights, I believe that clearly defining backend specifications early on is a crucial step. Well-defined input/output endpoints greatly reduce integration friction between the frontend and backend. Since I handled this project by myself, I avoided many of the communication issues common in cross-team collaboration. In practical terms, if developed by a separated frontend and backend team, simply clarifying responsibilities and interface specifications could lead to weeks of discussion."}),"\n",(0,s.jsx)(n.p,{children:"In conclusion, the system is now running smoothly, and I\u2019ll continue to observe and improve it as it runs."}),"\n",(0,s.jsx)(n.h2,{id:"final-thoughts",children:"Final Thoughts"}),"\n",(0,s.jsx)(n.p,{children:"While reading papers, the logic often feels abstract, but after reading through them a few times, I usually manage to replicate them successfully."}),"\n",(0,s.jsxs)(n.p,{children:["Frontend documentation might seem clear at first glance, but each step in practice could hide pitfalls\u2014truly deceptive. (",(0,s.jsx)(n.del,{children:"Not familiar with it? Don\u2019t blame everything else!"}),")"]}),"\n",(0,s.jsx)(n.p,{children:'In the past, late-night debugging was often about issues like "loss not converging" or "GPU memory running out," which are everyday challenges for AI engineers. Now, it\u2019s more about React throwing frequent errors, form buttons not working, and backend API specifications not matching, among other tedious problems.'}),"\n",(0,s.jsx)(n.p,{children:"What\u2019s more, this was done with the help of ChatGPT for immediate assistance. If it had been the pre-ChatGPT era, I\u2019m not sure whether I would have been able to successfully build this backend."}),"\n",(0,s.jsx)(n.p,{children:"I will continue adding more features in the future and keep improving the user experience. If you encounter any bugs or problems while using the system, for security reasons, please contact me via email. I\u2019d greatly appreciate it if you could provide detailed error messages or screenshots to help me locate and fix the problem more quickly."}),"\n",(0,s.jsx)(n.p,{children:"Also, if you have any suggestions or feedback on the system, feel free to share them in the comments."}),"\n",(0,s.jsx)(n.p,{children:"I hope you enjoy your time here!"})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},46531:function(e,n,t){t.d(n,{Z:function(){return i}});let i=t.p+"assets/images/img1-17d661c856bca0be72bad9dcd0ad15de.jpg"},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return r}});var i=t(67294);let s={},a=i.createContext(s);function r(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},16429:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/builds-dashboard-system","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025/03-16-builds-dashboard-system/index.md","title":"I, an AI Engineer, Actually Built a Backend System?","description":"A sharing of the experience building a backend system from scratch.","date":"2025-03-16T00:00:00.000Z","tags":[{"inline":true,"label":"React","permalink":"/en/blog/tags/react"},{"inline":true,"label":"FastAPI","permalink":"/en/blog/tags/fast-api"},{"inline":true,"label":"User Authentication","permalink":"/en/blog/tags/user-authentication"}],"readingTime":13.005,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"builds-dashboard-system","title":"I, an AI Engineer, Actually Built a Backend System?","authors":"Z. Yuan","image":"/en/img/2025/0316.webp","tags":["React","FastAPI","User Authentication"],"description":"A sharing of the experience building a backend system from scratch."},"unlisted":false,"nextItem":{"title":"Setting Up Amazon SES DNS on Namecheap","permalink":"/en/blog/amazon-ses-setting-dns-on-namecheap"}}')}}]);