"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["11057"],{91801:function(e,n,r){r.r(n),r.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>i,assets:()=>d,toc:()=>c,contentTitle:()=>s});var i=JSON.parse('{"id":"autotraderx/masterlink/trader","title":"Order System","description":"After analyzing MasterLink\'s Python API for the order system, we can develop a customized order system based on our needs.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/autotraderx/masterlink/trader.md","sourceDirName":"autotraderx/masterlink","slug":"/autotraderx/masterlink/trader","permalink":"/en/docs/autotraderx/masterlink/trader","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1719059132000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Quotation System","permalink":"/en/docs/autotraderx/masterlink/quotation"},"next":{"title":"Backtesting System","permalink":"/en/docs/autotraderx/masterlink/backtesting"}}'),t=r("85893"),o=r("50065");let a={sidebar_position:7},s="Order System",d={},c=[{value:"Logging In",id:"logging-in",level:2},{value:"Checking Inventory",id:"checking-inventory",level:2},{value:"Checking Order Information",id:"checking-order-information",level:2},{value:"Checking Transaction Information",id:"checking-transaction-information",level:2},{value:"Order Type Definitions",id:"order-type-definitions",level:2},{value:"OrderType",id:"ordertype",level:3},{value:"PriceType",id:"pricetype",level:3},{value:"TradingType",id:"tradingtype",level:3},{value:"TradingUnit",id:"tradingunit",level:3},{value:"TradingSession",id:"tradingsession",level:3},{value:"Side",id:"side",level:3},{value:"Placing a Buy Order",id:"placing-a-buy-order",level:2},{value:"Placing a Sell Order",id:"placing-a-sell-order",level:2},{value:"Custom Order Settings",id:"custom-order-settings",level:2},{value:"Changing the Order Price",id:"changing-the-order-price",level:2},{value:"Changing the Order Quantity",id:"changing-the-order-quantity",level:2},{value:"Canceling an Order",id:"canceling-an-order",level:2},{value:"Other Functions",id:"other-functions",level:2}];function l(e){let n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"order-system",children:"Order System"})}),"\n",(0,t.jsx)(n.p,{children:"After analyzing MasterLink's Python API for the order system, we can develop a customized order system based on our needs."}),"\n",(0,t.jsx)(n.p,{children:"In most scenarios, we will operate a single securities account, so our current implementation is based on a single account."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"We do not recommend any stocks; all stock information in the securities account will be blurred."})}),"\n",(0,t.jsx)(n.h2,{id:"logging-in",children:"Logging In"}),"\n",(0,t.jsx)(n.p,{children:"You can directly input your username and password into the class, or follow our approach by storing account information in a YAML file."}),"\n",(0,t.jsx)(n.p,{children:"The parameter file must include the username, password, and account number to log into MasterLink successfully."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from autotraderx import load_yaml\nfrom autotraderx.masterlink import Trader\n\n# Load account info\ncfg = load_yaml(DIR / "account.yaml")\n\n# Login account\naccount = Trader(\n    user=cfg["user"],\n    password=cfg["password"],\n    account_number=str(cfg["account_number"]),\n    is_sim=False,\n    is_force=True,\n    is_event=False,\n)\n\naccount.login()\n# Do something\naccount.stop()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"checking-inventory",children:"Checking Inventory"}),"\n",(0,t.jsxs)(n.p,{children:["After logging in, call the ",(0,t.jsx)(n.code,{children:"get_inventory"})," function to check the current inventory status."]}),"\n",(0,t.jsx)(n.p,{children:"The query results are displayed directly in the command line, showing the current inventory status. If you need the information for further use, you can directly use the return value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"data = account.get_inventory()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Check Inventory",src:r(11171).Z+"",width:"3171",height:"627"})}),"\n",(0,t.jsxs)(n.p,{children:["The output format of ",(0,t.jsx)(n.code,{children:"data"})," is a dictionary, with contents like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"{\n    '2002': {\n        'Stock': 'CSC',\n        'Short Selling Inventory (lots)': '0',\n        'Financing Inventory (lots)': '0',\n        'Custody Inventory (lots)': '1',\n        'Odd Lot Inventory (shares)': '0'\n    },\n    '2330': {\n        'Stock': 'TSMC',\n        'Short Selling Inventory (lots)': '0',\n        'Financing Inventory (lots)': '0',\n        'Custody Inventory (lots)': '1',\n        'Odd Lot Inventory (shares)': '0'\n    },\n    # ...omitted\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you don't want the information to be displayed in the command line, set the ",(0,t.jsx)(n.code,{children:"verbose"})," parameter to ",(0,t.jsx)(n.code,{children:"False"})," when initializing the ",(0,t.jsx)(n.code,{children:"Trader"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"account = Trader(\n    verbose=False\n)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"checking-order-information",children:"Checking Order Information"}),"\n",(0,t.jsxs)(n.p,{children:["After logging in, call the ",(0,t.jsx)(n.code,{children:"get_order_report"})," function to check all current order information."]}),"\n",(0,t.jsx)(n.p,{children:"The query results are displayed directly in the command line, showing all current order information. If you need the information for further use, you can directly use the return value."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Check Order Information",src:r(60227).Z+"",width:"4042",height:"1100"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"data = account.get_order_report()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The output format of ",(0,t.jsx)(n.code,{children:"data"})," is List[Dict], with contents like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"[\n    {\n        'Order Price': '13.95',\n        'Order Type (Price)': 'Limit Order',\n        'Order Type (Validity)': 'Day Order',\n        'Order Time': '08:31:32.032000',\n        'Order Number': 'i0040',\n        'Order Quantity': '4000',\n        'Transaction Price': '',\n        'Transaction Time': '',\n        'Transaction Quantity': '',\n        'Status': '',\n        'Stock': 'Blurred',\n        'Stock Code': 'Blurred',\n        'Message': '',\n        'Side': 'Sell',\n        'Type': 'Order'\n    },\n    # ...omitted\n]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"checking-transaction-information",children:"Checking Transaction Information"}),"\n",(0,t.jsxs)(n.p,{children:["After logging in, call the ",(0,t.jsx)(n.code,{children:"get_trade_report"})," function to check all current transaction information."]}),"\n",(0,t.jsx)(n.p,{children:"The query results are displayed directly in the command line, showing all current transaction information. If you need the information for further use, you can directly use the return value."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Check Transaction Information",src:r(47550).Z+"",width:"4042",height:"563"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"data = account.get_trade_report()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The output format of ",(0,t.jsx)(n.code,{children:"data"})," is List[Dict], with contents like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"[\n    {\n        'Order Price': '13.95',\n        'Order Type (Price)': 'Limit Order',\n        'Order Type (Validity)': 'Day Order',\n        'Order Time': '08:31:32.032000',\n        'Order Number': 'i0040',\n        'Order Quantity': '4000',\n        'Transaction Price': '',\n        'Transaction Time': '09:00:11.609000',\n        'Transaction Quantity': '4000',\n        'Status': '111) Fully Executed',\n        'Stock': 'Blurred',\n        'Stock Code': 'Blurred',\n        'Message': '',\n        'Side': 'Sell',\n        'Type': 'Order'\n    },\n    # ...omitted\n]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"order-type-definitions",children:"Order Type Definitions"}),"\n",(0,t.jsx)(n.p,{children:"In the order process, MasterLink defines several constants that we need to understand."}),"\n",(0,t.jsx)(n.h3,{id:"ordertype",children:"OrderType"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Order Type (Validity)\nclass OrderType(str, Enum):\n    # Day Order\n    ROD = "R"\n    # Immediate or Cancel\n    IOC = "I"\n    # Fill or Kill\n    FOK = "F"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"pricetype",children:"PriceType"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Order Type (Price)\nclass PriceType(str, Enum):\n    # Limit Order\n    LMT = "L"\n    # Market Order\n    MKT = "M"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"tradingtype",children:"TradingType"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Trading Type\nclass TradingType(str, Enum):\n    # Custody\n    CUSTODY = "G"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"tradingunit",children:"TradingUnit"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Trading Unit\nclass TradingUnit(int, Enum):\n    COMMON = 1000\n    ODD = 1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tradingsession",children:"TradingSession"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Trading Session\nclass TradingSession(str, Enum):\n    # Normal\n    NORMAL = "N"\n    # After-Hours\n    FIXED_NORMAL = "F"\n    # Intraday Odd Lot\n    ODD = "R"\n    # After-Hours Odd Lot\n    FIXED_ODD = "L"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"side",children:"Side"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Buy/Sell\nclass Side(str, Enum):\n    # Buy\n    Buy = "B"\n    # Sell\n    Sell = "S"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"placing-a-buy-order",children:"Placing a Buy Order"}),"\n",(0,t.jsxs)(n.p,{children:["After logging in, call the ",(0,t.jsx)(n.code,{children:"buy"})," function to place a buy order."]}),"\n",(0,t.jsx)(n.p,{children:"For example, buy 1 lot of TSMC (stock code: 2330) at 500 TWD."}),"\n",(0,t.jsx)(n.p,{children:"Default order settings:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Price Type: OrderType.KMT, Limit Order"}),"\n",(0,t.jsx)(n.li,{children:"Order Type: PriceType.ROD, Day Order"}),"\n",(0,t.jsx)(n.li,{children:"Trading Session: TradingSession.NORMAL, Normal Trading Session"}),"\n",(0,t.jsx)(n.li,{children:"Trading Unit: TradingUnit.COMMON, Common Trading Unit"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'account.buy(symbol="2330", qty=1, price=500)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"placing-a-sell-order",children:"Placing a Sell Order"}),"\n",(0,t.jsxs)(n.p,{children:["After logging in, call the ",(0,t.jsx)(n.code,{children:"sell"})," function to place a sell order."]}),"\n",(0,t.jsx)(n.p,{children:"For example, sell 1 lot of TSMC (stock code: 2330) at 500 TWD."}),"\n",(0,t.jsx)(n.p,{children:"Default order settings:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Price Type: OrderType.KMT, Limit Order"}),"\n",(0,t.jsx)(n.li,{children:"Order Type: PriceType.ROD, Day Order"}),"\n",(0,t.jsx)(n.li,{children:"Trading Session: TradingSession.NORMAL, Normal Trading Session"}),"\n",(0,t.jsx)(n.li,{children:"Trading Unit: TradingUnit.COMMON, Common Trading Unit"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'account.sell(symbol="2330", qty=1, price=500)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"custom-order-settings",children:"Custom Order Settings"}),"\n",(0,t.jsxs)(n.p,{children:["After logging in, call the ",(0,t.jsx)(n.code,{children:"set_order"})," function to place a custom order."]}),"\n",(0,t.jsxs)(n.p,{children:["Below is the definition of the ",(0,t.jsx)(n.code,{children:"set_order"})," function, allowing you to set order parameters as needed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:" def set_order(\n        self,\n        symbol: str,    # Stock Code\n        side: Side,     # Buy/Sell\n        qty: int,       # Order Quantity\n        price: float,   # Order Price\n        order_type: OrderType = OrderType.ROD,  # Order Type\n        price_type: PriceType = PriceType.MKT,  # Price Type\n        trading_session: TradingSession = TradingSession.NORMAL,  # Trading Session\n        trading_unit: TradingUnit = TradingUnit.COMMON,  # Trading Unit\n    ):\n        self.api.ReqBasic(symbol)\n\n        order = Order(\n            tradingSession=trading_session,\n            side=side,\n            symbol=symbol,\n            priceType=price_type,\n            price=str(price),\n            tradingUnit=trading_unit,\n            qty=str(qty),\n            orderType=order_type,\n            tradingAccount=self.account_number,\n            userDef=''\n        )\n        rc = self.api.NewOrder(order)\n        if rc == RCode.OK:\n            print('Order placed successfully')\n        else:\n            print('Order placement failed! Please run the program again and correct the input based on the feedback')\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"set_order"})," function, to buy 1 lot, the ",(0,t.jsx)(n.code,{children:"qty"})," parameter should be 1000."]})}),"\n",(0,t.jsx)(n.p,{children:"For example, buy 1 lot of TSMC (stock code: 2330) at 500 TWD, with the order type as Fill or Kill, and the price type as Market Order."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'account.set_order(\n    symbol="2330",\n    side=Side.Buy,\n    qty=1000,\n    price=500,\n    order_type=OrderType.FOK,\n    price_type=PriceType.MKT\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"changing-the-order-price",children:"Changing the Order Price"}),"\n",(0,t.jsxs)(n.p,{children:['You need to find the "Order Number" to change the price, then call the ',(0,t.jsx)(n.code,{children:"change_price"})," function."]}),"\n",(0,t.jsx)(n.p,{children:"For example, change the price of TSMC (stock code: 2330) to 600 TWD."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'account.change_price(order_number="i0041", mod_price=600)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"changing-the-order-quantity",children:"Changing the Order Quantity"}),"\n",(0,t.jsxs)(n.p,{children:['You need to find the "Order Number" to change the quantity, then call the ',(0,t.jsx)(n.code,{children:"change_qty"})," function."]}),"\n",(0,t.jsx)(n.p,{children:"For example, change the quantity of TSMC (stock code: 2330) from 1 lot to 2 lots."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'account.change_qty(order_number="i0041", mod_qty=2000)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"canceling-an-order",children:"Canceling an Order"}),"\n",(0,t.jsxs)(n.p,{children:['To cancel an order, change the "Order Quantity" to 0 using the ',(0,t.jsx)(n.code,{children:"change_qty"})," function."]}),"\n",(0,t.jsx)(n.h2,{id:"other-functions",children:"Other Functions"}),"\n",(0,t.jsx)(n.p,{children:"The original API also has functions for querying collateral balances. However, we currently do not have the necessary permissions on our account to develop and test these functions."}),"\n",(0,t.jsxs)(n.p,{children:['Moreover, we could not find information on "querying the transaction price of the account inventory" in MasterLink\'s API. Upon tracing the code, we discovered that the final data layer is encapsulated in ',(0,t.jsx)(n.code,{children:".dll"})," files. To obtain this information, we would need to decompile the ",(0,t.jsx)(n.code,{children:".dll"})," files and parse the data, which is quite an extensive task."]}),"\n",(0,t.jsx)(n.p,{children:'As a result, we currently cannot provide the "inventory average price calculation" service. Hopefully, MasterLink will release this feature in the future.'}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:'If you know how to obtain the "average price of inventory," i.e., the "transaction price per share of inventory," please let us know! \uD83D\uDE4F \uD83D\uDE4F \uD83D\uDE4F'})})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11171:function(e,n,r){r.d(n,{Z:function(){return i}});let i=r.p+"assets/images/get_inventory-eb33667bb33a3ac17715589d8779865d.jpg"},60227:function(e,n,r){r.d(n,{Z:function(){return i}});let i=r.p+"assets/images/get_order_report-5aadc13f2ee2420c5dbebe43f162e7c1.jpg"},47550:function(e,n,r){r.d(n,{Z:function(){return i}});let i=r.p+"assets/images/get_trade_report-0beb27a6163997936a494e9caf828114.jpg"},50065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return a}});var i=r(67294);let t={},o=i.createContext(t);function a(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);