"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["50748"],{67536:function(n,e,t){t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=t(43339),a=t(74848),o=t(84429);let s={slug:"extract-font-info-by-python",title:"Extract Font File Information",authors:"Z. Yuan",image:"/en/img/2024/1226.webp",tags:["font-tools","Python"],description:"Retrieve font file information using Python."},r,l={authorsImageUrls:[void 0]},c=[{value:"Install <code>fontTools</code>",id:"install-fonttools",level:2},{value:"Key Implementation Points",id:"key-implementation-points",level:2},{value:"Code",id:"code",level:2},{value:"Example Output",id:"example-output",level:2},{value:"References",id:"references",level:2}];function d(n){let e={a:"a",admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"Although we frequently use various fonts, we often get stuck when it comes to retrieving font parameters."}),"\n",(0,a.jsx)(e.p,{children:"We forget after using them, and then look them up again next time?"}),"\n",(0,a.jsx)(e.p,{children:"This makes us seem unprofessional, so we need to write a program to solve the problem."}),"\n",(0,a.jsxs)(e.h2,{id:"install-fonttools",children:["Install ",(0,a.jsx)(e.code,{children:"fontTools"})]}),"\n",(0,a.jsxs)(e.p,{children:["We use ",(0,a.jsx)(e.code,{children:"fontTools"})," to retrieve font-related information. It is a widely praised Python package for handling font files, allowing us to manipulate and parse various TTF and OTF files."]}),"\n",(0,a.jsxs)(e.p,{children:["First, install ",(0,a.jsx)(e.code,{children:"fontTools"})," using the following command:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"pip install fonttools\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["If you're interested in ",(0,a.jsx)(e.code,{children:"fontTools"}),", you can refer to their project on GitHub: ",(0,a.jsx)(e.a,{href:"https://github.com/fonttools/fonttools",children:(0,a.jsx)(e.strong,{children:"fontTools-github"})})]})}),"\n",(0,a.jsx)(e.p,{children:"Once installed, you can start running the program."}),"\n",(0,a.jsx)(e.h2,{id:"key-implementation-points",children:"Key Implementation Points"}),"\n",(0,a.jsx)(e.p,{children:"Before we start using the code, let\u2019s review the key implementation points:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Remove Control Characters (",(0,a.jsx)(e.code,{children:"remove_control_characters"}),")"]})}),"\n",(0,a.jsxs)(e.p,{children:["This function is used to clean up control or invisible characters from a string, as these characters may interfere with subsequent processing. We need to remove them first. Additionally, some characters are made up of multiple Unicode combinations. We use the ",(0,a.jsx)(e.code,{children:"unicodedata"})," module to normalize the string, converting these composite characters into a single character to ensure consistency."]}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsxs)(e.p,{children:["If you don\u2019t need this functionality, you can set ",(0,a.jsx)(e.code,{children:"normalize"})," to ",(0,a.jsx)(e.code,{children:"False"}),"."]})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Extract Font Information (",(0,a.jsx)(e.code,{children:"extract_font_info"}),")"]})}),"\n",(0,a.jsx)(e.p,{children:"This function extracts various pieces of information from a font and organizes them into a structured, easy-to-read dictionary. It includes a variety of keys, described as follows:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"fileName"}),": The path of the font file on the system."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"tables"}),": Lists all available tables in the font file."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"nameTable"}),": The raw name table indexed by ",(0,a.jsx)(e.code,{children:"nameID"}),"."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"nameTableReadable"}),": Maps common ",(0,a.jsx)(e.code,{children:"nameID"})," values (e.g., font family, version) to more readable keys."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"cmapTable"}),": A mapping of various encodings (platformID, platEncID) to glyph names."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"headTable"}),": Basic font parameter information such as ",(0,a.jsx)(e.code,{children:"unitsPerEm"}),", ",(0,a.jsx)(e.code,{children:"xMin"}),", ",(0,a.jsx)(e.code,{children:"yMin"}),", etc."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"hheaTable"}),": Horizontal layout information, including ascent, descent, and line gap."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"OS2Table"}),": Information about weight (usWeightClass), width (usWidthClass), and embedding restrictions (fsType)."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"postTable"}),": PostScript-related information, such as whether the font is monospaced (isFixedPitch) and the italic angle (italicAngle)."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"layoutMetrics"}),": Typography metrics derived from multiple tables, including bounding box, unitsPerEm, line spacing, etc."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"summary"}),": A quick overview of the font, including font family, subfamily, version, weight class, and whether it is italic."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.p,{children:["One of the most important parts is the ",(0,a.jsx)(e.code,{children:"cmapTable"}),", which maps various encodings to corresponding characters. In our implementation, we further process this table to convert encodings into readable platform names and encoding names:"]}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Platform Name (",(0,a.jsx)(e.code,{children:"platform_name"}),")"]})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"platformID"})," represents the platform supported by the font. Common platform codes include:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"0"}),": Unicode (general font standard)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"1"}),": Macintosh (Mac system-specific fonts)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"3"}),": Windows (Windows system-specific fonts)"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"In the code, these codes are converted to their corresponding descriptions via a dictionary:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"platform_name = {\n    0: 'Unicode',\n    1: 'Macintosh',\n    3: 'Windows'\n}.get(cmap.platformID, f\"Platform {cmap.platformID}\")\n"})}),"\n",(0,a.jsxs)(e.p,{children:["This code first checks if the ",(0,a.jsx)(e.code,{children:"platformID"})," exists in the dictionary. If a corresponding value is found, it returns the name (e.g., ",(0,a.jsx)(e.code,{children:"'Unicode'"}),"). If not, it returns ",(0,a.jsx)(e.code,{children:"Platform {cmap.platformID}"})," to handle custom platform codes not in the dictionary."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Encoding Name (",(0,a.jsx)(e.code,{children:"encoding_name"}),")"]})}),"\n",(0,a.jsxs)(e.p,{children:["The encoding method in the font is determined by both ",(0,a.jsx)(e.code,{children:"platformID"})," and ",(0,a.jsx)(e.code,{children:"platEncID"}),". Common combinations and their meanings are as follows:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"(0, 0)"}),": Unicode 1.0"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"(0, 3)"}),": Unicode 2.0+"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"(0, 4)"}),": Unicode 2.0+ with BMP (Basic Multilingual Plane)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"(1, 0)"}),": Mac Roman (Macintosh Roman alphabet encoding)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"(3, 1)"}),": Windows Unicode BMP (Windows Basic Multilingual Plane encoding)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"(3, 10)"}),": Windows Unicode Full (Windows Full Unicode encoding)"]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["In the code, these combinations are stored in a nested dictionary and looked up using the tuple ",(0,a.jsx)(e.code,{children:"(platformID, platEncID)"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"encoding_name = {\n    (0, 0): 'Unicode 1.0',\n    (0, 3): 'Unicode 2.0+',\n    (0, 4): 'Unicode 2.0+ with BMP',\n    (1, 0): 'Mac Roman',\n    (3, 1): 'Windows Unicode BMP',\n    (3, 10): 'Windows Unicode Full'\n}.get((cmap.platformID, cmap.platEncID), f\"Encoding {cmap.platEncID}\")\n"})}),"\n",(0,a.jsxs)(e.p,{children:["If a matching combination is found, the program returns the corresponding description. If no match is found, it defaults to ",(0,a.jsx)(e.code,{children:"Encoding {cmap.platEncID}"}),", used to handle unknown encodings."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"code",children:"Code"}),"\n",(0,a.jsx)(e.p,{children:"Here is the complete code. You can export the output information as JSON for further analysis or tracking."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import re\nimport unicodedata\nfrom pathlib import Path\nfrom typing import List, Union\n\nfrom fontTools.ttLib import TTFont\n\n\ndef load_ttfont(font_path: Union[str, Path], **kwargs) -> TTFont:\n    \"\"\"Load a TrueType font file.\"\"\"\n    if isinstance(font_path, Path):\n        font_path = str(font_path)\n    return TTFont(font_path, **kwargs)\n\n\ndef remove_control_characters(text: str, normalize: bool = True) -> str:\n    \"\"\"\n    Remove control characters and invisible formatting characters from a string.\n\n    Args:\n        text (str): The input string.\n        normalize (bool): Whether to normalize the text to remove inconsistencies.\n\n    Returns:\n        str: The sanitized string with control and invisible characters removed.\n    \"\"\"\n    # Remove basic control characters (C0 and C1 control codes)\n    sanitized = re.sub(r'[\\x00-\\x1F\\x7F-\\x9F]', '', text)\n\n    # Remove specific Unicode control and invisible formatting characters\n    sanitized = re.sub(\n        r'[\\u200B-\\u200F\\u2028-\\u202F\\u2060-\\u206F]', '', sanitized)\n\n    # Remove directional formatting characters (optional, adjust if needed)\n    sanitized = re.sub(r'[\\u202A-\\u202E]', '', sanitized)\n\n    # Optionally, normalize the text to remove any leftover inconsistencies\n    if normalize:\n        sanitized = unicodedata.normalize('NFKC', sanitized)\n\n    return sanitized\n\n\ndef extract_font_info(\n    font_path: Union[str, Path],\n    normalize: bool = True\n) -> dict:\n    \"\"\"Extract detailed metadata and structural information from a font file.\n\n    Args:\n        font_path (Union[str, Path]): Path to the font file.\n\n    Returns:\n        dict: A dictionary containing font metadata and tables, including:\n\n            - fileName (str): Path to the font file.\n            - tables (list): List of available tables in the font.\n            - nameTable (dict): Raw name table values, keyed by nameID.\n            - nameTableReadable (dict): Readable name table with keys:\n                * copyright (str): Copyright information.\n                * fontFamily (str): Font family name.\n                * fontSubfamily (str): Font subfamily name.\n                * uniqueID (str): Unique identifier for the font.\n                * fullName (str): Full font name.\n                * version (str): Font version string.\n                * postScriptName (str): PostScript name.\n            - cmapTable (dict): Character-to-glyph mappings, keyed by encoding.\n            - cmapTableIndex (list): List of encoding descriptions.\n            - headTable (dict): Font header table with keys:\n                * unitsPerEm (int): Units per em.\n                * xMin (int): Minimum x-coordinate of the glyph bounding box.\n                * yMin (int): Minimum y-coordinate of the glyph bounding box.\n                * xMax (int): Maximum x-coordinate of the glyph bounding box.\n                * yMax (int): Maximum y-coordinate of the glyph bounding box.\n            - hheaTable (dict): Horizontal header table with keys:\n                * ascent (int): Typographic ascent.\n                * descent (int): Typographic descent.\n                * lineGap (int): Line gap.\n            - OS2Table (dict): OS/2 table with keys:\n                * usWeightClass (int): Weight class.\n                * usWidthClass (int): Width class.\n                * fsType (int): Embedding restrictions.\n            - postTable (dict): PostScript table with keys:\n                * isFixedPitch (bool): Whether the font is monospaced.\n                * italicAngle (float): Italic angle of the font.\n            - layoutMetrics (dict): Font layout metrics with keys:\n                * unitsPerEm (int): Units per em.\n                * boundingBox (dict): Bounding box coordinates:\n                    - xMin (int): Minimum x-coordinate.\n                    - yMin (int): Minimum y-coordinate.\n                    - xMax (int): Maximum x-coordinate.\n                    - yMax (int): Maximum y-coordinate.\n                * ascent (int): Typographic ascent.\n                * descent (int): Typographic descent.\n                * lineGap (int): Line gap.\n            - summary (dict): High-level font summary with keys:\n                * fontFamily (str): Font family name.\n                * fontSubfamily (str): Font subfamily name.\n                * version (str): Font version.\n                * weightClass (int): Weight class.\n                * isItalic (bool): Whether the font is italic.\n    \"\"\"\n\n    if isinstance(font_path, Path):\n        font_path = str(font_path)\n\n    font = TTFont(font_path)\n    font_info = {}\n\n    # File name and available tables\n    font_info['fileName'] = font_path\n    font_info['tables'] = list(font.keys())\n\n    # Parse name table\n    name_table = {}\n    for record in font['name'].names:\n        try:\n            raw_string = record.string.decode('utf-16-be').strip()\n            clean_string = remove_control_characters(raw_string, normalize)\n            name_table[record.nameID] = clean_string\n        except UnicodeDecodeError:\n            name_table[record.nameID] = remove_control_characters(\n                record.string.decode(errors='ignore'), normalize)\n    font_info['nameTable'] = name_table\n\n    # Readable name table for common nameIDs\n    name_table_readable = {\n        'copyright': name_table.get(0, ''),\n        'fontFamily': name_table.get(1, ''),\n        'fontSubfamily': name_table.get(2, ''),\n        'uniqueID': name_table.get(3, ''),\n        'fullName': name_table.get(4, ''),\n        'version': name_table.get(5, ''),\n        'postScriptName': name_table.get(6, ''),\n    }\n    font_info['nameTableReadable'] = {\n        k: remove_control_characters(v, normalize)\n        for k, v in name_table_readable.items()\n    }\n\n    # Parse cmap table\n    cmap_table = {}\n    cmap_table_index = []\n\n    for cmap in font['cmap'].tables:\n        platform_name = {\n            0: 'Unicode',\n            1: 'Macintosh',\n            3: 'Windows'\n        }.get(cmap.platformID, f\"Platform {cmap.platformID}\")\n\n        encoding_name = {\n            (0, 0): 'Unicode 1.0',\n            (0, 3): 'Unicode 2.0+',\n            (0, 4): 'Unicode 2.0+ with BMP',\n            (1, 0): 'Mac Roman',\n            (3, 1): 'Windows Unicode BMP',\n            (3, 10): 'Windows Unicode Full'\n        }.get((cmap.platformID, cmap.platEncID), f\"Encoding {cmap.platEncID}\")\n\n        cmap_entries = {}\n        for codepoint, glyph_name in cmap.cmap.items():\n            char = chr(codepoint)\n            cmap_entries[remove_control_characters(char, normalize)] = \\\n                remove_control_characters(glyph_name, normalize)\n\n        key = f\"{platform_name}, {encoding_name}\"\n        cmap_table[key] = cmap_entries\n        cmap_table_index.append(key)\n\n    font_info['cmapTable'] = cmap_table\n    font_info['cmapTableIndex'] = cmap_table_index\n\n    # Parse head table\n    head = font['head']\n    head_table = {\n        'unitsPerEm': head.unitsPerEm,\n        'xMin': head.xMin,\n        'yMin': head.yMin,\n        'xMax': head.xMax,\n        'yMax': head.yMax,\n    }\n    font_info['headTable'] = head_table\n\n    # Parse hhea table\n    hhea = font['hhea']\n    hhea_table = {\n        'ascent': hhea.ascent,\n        'descent': hhea.descent,\n        'lineGap': hhea.lineGap,\n    }\n    font_info['hheaTable'] = hhea_table\n\n    # Parse OS/2 table\n    os2 = font['OS/2']\n    os2_table = {\n        'usWeightClass': os2.usWeightClass,\n        'usWidthClass': os2.usWidthClass,\n        'fsType': os2.fsType,\n    }\n    font_info['OS2Table'] = os2_table\n\n    # Parse post table\n    post = font['post']\n    post_table = {\n        'isFixedPitch': post.isFixedPitch,\n        'italicAngle': post.italicAngle,\n    }\n    font_info['postTable'] = post_table\n\n    # Combine layout-related metrics\n    font_info['layoutMetrics'] = {\n        'unitsPerEm': head_table['unitsPerEm'],\n        'boundingBox': {\n            'xMin': head_table['xMin'],\n            'yMin': head_table['yMin'],\n            'xMax': head_table['xMax'],\n            'yMax': head_table['yMax']\n        },\n        'ascent': hhea_table['ascent'],\n        'descent': hhea_table['descent'],\n        'lineGap': hhea_table['lineGap']\n    }\n\n    # Font summary\n    font_info['summary'] = {\n        'fontFamily': name_table_readable['fontFamily'],\n        'fontSubfamily': name_table_readable['fontSubfamily'],\n        'version': name_table_readable['version'],\n        'weightClass': os2.usWeightClass,\n        'isItalic': post_table['italicAngle'] != 0\n    }\n\n    return font_info\n"})}),"\n",(0,a.jsx)(e.h2,{id:"example-output",children:"Example Output"}),"\n",(0,a.jsxs)(e.p,{children:["Let\u2019s take the font file ",(0,a.jsx)(e.code,{children:"OcrB-Regular.ttf"})," as an example. We will call the function and then export the results to a JSON file:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import json\n\nfont_infos = extract_font_info('OcrB-Regular.ttf')\njson.dump(font_infos, open('OcrB-Regular-Info.json', 'w'),\n          indent=2, ensure_ascii=False)\n"})}),"\n",(0,a.jsx)(e.p,{children:"The output will be as follows:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "fileName": "/path/to/your/folder/OcrB-Regular.ttf",\n  "tables": [\n    "GlyphOrder",\n    "head",\n    "hhea",\n    "maxp",\n    "OS/2",\n    "hmtx",\n    "hdmx",\n    "cmap",\n    "fpgm",\n    "prep",\n    "cvt ",\n    "loca",\n    "glyf",\n    "name",\n    "post"\n  ],\n  "nameTable": {\n    "0": "This is a copyrighted typeface program",\n    "1": "OcrB",\n    "2": "Regular",\n    "3": "Altsys Fontographer 3.5  OcrB Regular",\n    "4": "OcrB Regular",\n    "5": "Altsys Fontographer 3.5  4/15/93",\n    "6": "OcrB Regular"\n  },\n  "nameTableReadable": {\n    "copyright": "This is a copyrighted typeface program",\n    "fontFamily": "OcrB",\n    "fontSubfamily": "Regular",\n    "uniqueID": "Altsys Fontographer 3.5  OcrB Regular",\n    "fullName": "OcrB Regular",\n    "version": "Altsys Fontographer 3.5  4/15/93",\n    "postScriptName": "OcrB Regular"\n  },\n  "cmapTable": {\n    "Unicode, Unicode 1.0": {\n      " ": "nonbreakingspace",\n      "!": "exclam",\n      "\\"": "quotedbl",\n      "#": "numbersign",\n      "$": "dollar",\n      "%": "percent",\n      "&": "ampersand",\n      "\'": "quotesingle",\n      "(": "parenleft",\n      ")": "parenright",\n      "*": "asterisk",\n      "+": "plus",\n      ",": "comma",\n      "-": "hyphen",\n      ".": "period",\n      "/": "slash",\n      "0": "zero",\n      "1": "one",\n      "2": "two",\n      "3": "three",\n      "4": "four",\n      "5": "five",\n      "6": "six",\n      "7": "seven",\n      "8": "eight",\n      "9": "nine",\n      ":": "colon",\n      ";": "semicolon",\n      "<": "less",\n      "=": "equal",\n      ">": "greater",\n      "?": "question",\n      "@": "at",\n      "A": "A",\n      "B": "B",\n      "C": "C",\n      "D": "D",\n      "E": "E",\n      "F": "F",\n      "G": "G",\n      "H": "H",\n      "I": "I",\n      "J": "J",\n      "K": "K",\n      "L": "L",\n      "M": "M",\n      "N": "N",\n      "O": "O",\n      "P": "P",\n      "Q": "Q",\n      "R": "R",\n      "S": "S",\n      "T": "T",\n      "U": "U",\n      "V": "V",\n      "W": "W",\n      "X": "X",\n      "Y": "Y",\n      "Z": "Z",\n      "[": "bracketleft",\n      "\\\\": "backslash",\n      "]": "bracketright",\n      "^": "asciicircum",\n      "_": "underscore",\n      "`": "grave",\n      "a": "a",\n      "b": "b",\n      "c": "c",\n      "d": "d",\n      "e": "e",\n      "f": "f",\n      "g": "g",\n      "h": "h",\n      "i": "i",\n      "j": "j",\n      "k": "k",\n      "l": "l",\n      "m": "m",\n      "n": "n",\n      "o": "o",\n      "p": "p",\n      "q": "q",\n      "r": "r",\n      "s": "zcaron",\n      "t": "t",\n      "u": "u",\n      "v": "v",\n      "w": "w",\n      "x": "x",\n      "y": "y",\n      "z": "z",\n      "{": "braceleft",\n      "|": "bar",\n      "}": "braceright",\n      "\xa1": "exclamdown",\n      "\xa2": "cent",\n      "\xa3": "sterling",\n      "\xa4": "currency",\n      "\xa5": "yen",\n      "\xa7": "section",\n      " \u0308": "dieresis",\n      "\xab": "guillemotleft",\n      "\xad": "hyphen",\n      " \u0304": "macron",\n      " \u0301": "acute",\n      "\xb7": "periodcentered",\n      " \u0327": "cedilla",\n      "\xbb": "guillemotright",\n      "\xbf": "questiondown",\n      "\xc0": "Agrave",\n      "\xc1": "Aacute",\n      "\xc2": "Acircumflex",\n      "\xc3": "Atilde",\n      "\xc4": "Adieresis",\n      "\xc5": "Aring",\n      "\xc6": "AE",\n      "\xc7": "Ccedilla",\n      "\xc8": "Egrave",\n      "\xc9": "Eacute",\n      "\xca": "Ecircumflex",\n      "\xcb": "Edieresis",\n      "\xcc": "Igrave",\n      "\xcd": "Iacute",\n      "\xce": "Icircumflex",\n      "\xcf": "Idieresis",\n      "\xd0": "Eth",\n      "\xd1": "Ntilde",\n      "\xd2": "Ograve",\n      "\xd3": "Oacute",\n      "\xd4": "Ocircumflex",\n      "\xd5": "Otilde",\n      "\xd6": "Odieresis",\n      "\xd7": ".null",\n      "\xd8": "Oslash",\n      "\xd9": "Ugrave",\n      "\xda": "Uacute",\n      "\xdb": "Ucircumflex",\n      "\xdc": "Udieresis",\n      "\xdd": "Yacute#1",\n      "\xde": "Thorn",\n      "\xdf": "germandbls",\n      "\xe0": "agrave",\n      "\xe1": "aacute",\n      "\xe2": "acircumflex",\n      "\xe3": "atilde",\n      "\xe4": "adieresis",\n      "\xe5": "aring",\n      "\xe6": "ae",\n      "\xe7": "ccedilla",\n      "\xe8": "egrave",\n      "\xe9": "eacute",\n      "\xea": "ecircumflex",\n      "\xeb": "edieresis",\n      "\xec": "igrave",\n      "\xed": "iacute",\n      "\xee": "icircumflex",\n      "\xef": "idieresis",\n      "\xf0": "Yacute",\n      "\xf1": "ntilde",\n      "\xf2": "ograve",\n      "\xf3": "oacute",\n      "\xf4": "ocircumflex",\n      "\xf5": "otilde",\n      "\xf6": "odieresis",\n      "\xf8": "oslash",\n      "\xf9": "ugrave",\n      "\xfa": "uacute",\n      "\xfb": "ucircumflex",\n      "\xfc": "udieresis",\n      "\xfd": "yacute",\n      "\xfe": "thorn",\n      "\xff": "ydieresis",\n      "\u0131": "dotlessi",\n      "\u0141": "Lslash",\n      "\u0142": "lslash",\n      "\u0152": "OE",\n      "\u0153": "oe",\n      "\u0160": "Scaron",\n      "\u0161": "scaron",\n      "\u0178": "Ydieresis",\n      "\u017D": "Zcaron",\n      "\u02BA": "hungarumlaut",\n      "\u02C6": "circumflex",\n      "\u02C7": "caron",\n      "\u02C9": "macron",\n      " \u0306": "breve",\n      " \u0307": "dotaccent",\n      " \u030A": "ring",\n      " \u0328": "ogonek",\n      " \u0303": "tilde",\n      "\u2013": "endash",\n      "\u2014": "emdash",\n      "\u2018": "quoteleft",\n      "\u201A": "quotesinglbase",\n      "\u201C": "quotedblleft",\n      "\u201D": "quotedblright",\n      "\u201E": "quotedblbase",\n      "\u2020": "dagger",\n      "\u2021": "daggerdbl",\n      "...": "ellipsis",\n      "\u2039": "guilsinglleft",\n      "\u203A": "guilsinglright",\n      "\u2212": "minus",\n      "\u2219": "periodcentered"\n    },\n    "Macintosh, Mac Roman": {\n      "": "udieresis",\n      " ": "dagger",\n      "!": "exclam",\n      "\\"": "quotedbl",\n      "#": "numbersign",\n      "$": "dollar",\n      "%": "percent",\n      "&": "ampersand",\n      "\'": "quotesingle",\n      "(": "parenleft",\n      ")": "parenright",\n      "*": "asterisk",\n      "+": "plus",\n      ",": "comma",\n      "-": "hyphen",\n      ".": "period",\n      "/": "slash",\n      "0": "zero",\n      "1": "one",\n      "2": "two",\n      "3": "three",\n      "4": "four",\n      "5": "five",\n      "6": "six",\n      "7": "seven",\n      "8": "eight",\n      "9": "nine",\n      ":": "colon",\n      ";": "semicolon",\n      "<": "less",\n      "=": "equal",\n      ">": "greater",\n      "?": "question",\n      "@": "at",\n      "A": "A",\n      "B": "B",\n      "C": "C",\n      "D": "D",\n      "E": "E",\n      "F": "F",\n      "G": "G",\n      "H": "H",\n      "I": "I",\n      "J": "J",\n      "K": "K",\n      "L": "L",\n      "M": "M",\n      "N": "N",\n      "O": "O",\n      "P": "P",\n      "Q": "Q",\n      "R": "R",\n      "S": "S",\n      "T": "T",\n      "U": "U",\n      "V": "V",\n      "W": "W",\n      "X": "X",\n      "Y": "Y",\n      "Z": "Z",\n      "[": "bracketleft",\n      "\\\\": "backslash",\n      "]": "bracketright",\n      "^": "asciicircum",\n      "_": "underscore",\n      "`": "grave",\n      "a": "a",\n      "b": "b",\n      "c": "c",\n      "d": "d",\n      "e": "e",\n      "f": "f",\n      "g": "g",\n      "h": "h",\n      "i": "i",\n      "j": "j",\n      "k": "k",\n      "l": "l",\n      "m": "m",\n      "n": "n",\n      "o": "o",\n      "p": "p",\n      "q": "q",\n      "r": "r",\n      "s": "s",\n      "t": "t",\n      "u": "u",\n      "v": "v",\n      "w": "w",\n      "x": "x",\n      "y": "y",\n      "z": "z",\n      "{": "braceleft",\n      "|": "bar",\n      "}": "braceright",\n      "\xa2": "cent",\n      "\xa3": "sterling",\n      "\xa4": "section",\n      "\xa7": "germandbls",\n      "\xab": "acute",\n      "\xac": "dieresis",\n      "\xae": "AE",\n      " \u0304": "Oslash",\n      " \u0301": "yen",\n      "3\u20444": "ae",\n      "\xbf": "oslash",\n      "\xc0": "questiondown",\n      "\xc1": "exclamdown",\n      "\xc7": "guillemotleft",\n      "\xc8": "guillemotright",\n      "\xc9": "ellipsis",\n      "\xca": "nonbreakingspace",\n      "\xcb": "Agrave",\n      "\xcc": "Atilde",\n      "\xcd": "Otilde",\n      "\xce": "OE",\n      "\xcf": "oe",\n      "\xd0": "endash",\n      "\xd1": "emdash",\n      "\xd2": "quotedblleft",\n      "\xd3": "quotedblright",\n      "\xd4": "quoteleft",\n      "\xd8": "ydieresis",\n      "\xd9": "Ydieresis",\n      "\xdb": "currency",\n      "\xdc": "guilsinglleft",\n      "\xdd": "guilsinglright",\n      "\xe0": "daggerdbl",\n      "\xe1": "periodcentered",\n      "\xe2": "quotesinglbase",\n      "\xe3": "quotedblbase",\n      "\xe5": "Acircumflex",\n      "\xe6": "Ecircumflex",\n      "\xe7": "Aacute",\n      "\xe8": "Edieresis",\n      "\xe9": "Egrave",\n      "\xea": "Iacute",\n      "\xeb": "Icircumflex",\n      "\xec": "Idieresis",\n      "\xed": "Igrave",\n      "\xee": "Oacute",\n      "\xef": "Ocircumflex",\n      "\xf1": "Ograve",\n      "\xf2": "Uacute",\n      "\xf3": "Ucircumflex",\n      "\xf4": "Ugrave",\n      "\xf5": "dotlessi",\n      "\xf6": "circumflex",\n      "\xf7": "tilde",\n      "\xf8": "macron",\n      "\xf9": "breve",\n      "\xfa": "dotaccent",\n      "\xfb": "ring",\n      "\xfc": "cedilla",\n      "\xfd": "hungarumlaut",\n      "\xfe": "ogonek",\n      "\xff": "caron"\n    },\n    "Windows, Windows Unicode BMP": {\n      " ": "nonbreakingspace",\n      "!": "exclam",\n      "\\"": "quotedbl",\n      "#": "numbersign",\n      "$": "dollar",\n      "%": "percent",\n      "&": "ampersand",\n      "\'": "quotesingle",\n      "(": "parenleft",\n      ")": "parenright",\n      "*": "asterisk",\n      "+": "plus",\n      ",": "comma",\n      "-": "hyphen",\n      ".": "period",\n      "/": "slash",\n      "0": "zero",\n      "1": "one",\n      "2": "two",\n      "3": "three",\n      "4": "four",\n      "5": "five",\n      "6": "six",\n      "7": "seven",\n      "8": "eight",\n      "9": "nine",\n      ":": "colon",\n      ";": "semicolon",\n      "<": "less",\n      "=": "equal",\n      ">": "greater",\n      "?": "question",\n      "@": "at",\n      "A": "A",\n      "B": "B",\n      "C": "C",\n      "D": "D",\n      "E": "E",\n      "F": "F",\n      "G": "G",\n      "H": "H",\n      "I": "I",\n      "J": "J",\n      "K": "K",\n      "L": "L",\n      "M": "M",\n      "N": "N",\n      "O": "O",\n      "P": "P",\n      "Q": "Q",\n      "R": "R",\n      "S": "S",\n      "T": "T",\n      "U": "U",\n      "V": "V",\n      "W": "W",\n      "X": "X",\n      "Y": "Y",\n      "Z": "Z",\n      "[": "bracketleft",\n      "\\\\": "backslash",\n      "]": "bracketright",\n      "^": "asciicircum",\n      "_": "underscore",\n      "`": "grave",\n      "a": "a",\n      "b": "b",\n      "c": "c",\n      "d": "d",\n      "e": "e",\n      "f": "f",\n      "g": "g",\n      "h": "h",\n      "i": "i",\n      "j": "j",\n      "k": "k",\n      "l": "l",\n      "m": "m",\n      "n": "n",\n      "o": "o",\n      "p": "p",\n      "q": "q",\n      "r": "r",\n      "s": "zcaron",\n      "t": "t",\n      "u": "u",\n      "v": "v",\n      "w": "w",\n      "x": "x",\n      "y": "y",\n      "z": "z",\n      "{": "braceleft",\n      "|": "bar",\n      "}": "braceright",\n      "\xa1": "exclamdown",\n      "\xa2": "cent",\n      "\xa3": "sterling",\n      "\xa4": "currency",\n      "\xa5": "yen",\n      "\xa7": "section",\n      " \u0308": "dieresis",\n      "\xab": "guillemotleft",\n      "\xad": "hyphen",\n      " \u0304": "macron",\n      " \u0301": "acute",\n      "\xb7": "periodcentered",\n      " \u0327": "cedilla",\n      "\xbb": "guillemotright",\n      "\xbf": "questiondown",\n      "\xc0": "Agrave",\n      "\xc1": "Aacute",\n      "\xc2": "Acircumflex",\n      "\xc3": "Atilde",\n      "\xc4": "Adieresis",\n      "\xc5": "Aring",\n      "\xc6": "AE",\n      "\xc7": "Ccedilla",\n      "\xc8": "Egrave",\n      "\xc9": "Eacute",\n      "\xca": "Ecircumflex",\n      "\xcb": "Edieresis",\n      "\xcc": "Igrave",\n      "\xcd": "Iacute",\n      "\xce": "Icircumflex",\n      "\xcf": "Idieresis",\n      "\xd0": "Eth",\n      "\xd1": "Ntilde",\n      "\xd2": "Ograve",\n      "\xd3": "Oacute",\n      "\xd4": "Ocircumflex",\n      "\xd5": "Otilde",\n      "\xd6": "Odieresis",\n      "\xd7": ".null",\n      "\xd8": "Oslash",\n      "\xd9": "Ugrave",\n      "\xda": "Uacute",\n      "\xdb": "Ucircumflex",\n      "\xdc": "Udieresis",\n      "\xdd": "Yacute#1",\n      "\xde": "Thorn",\n      "\xdf": "germandbls",\n      "\xe0": "agrave",\n      "\xe1": "aacute",\n      "\xe2": "acircumflex",\n      "\xe3": "atilde",\n      "\xe4": "adieresis",\n      "\xe5": "aring",\n      "\xe6": "ae",\n      "\xe7": "ccedilla",\n      "\xe8": "egrave",\n      "\xe9": "eacute",\n      "\xea": "ecircumflex",\n      "\xeb": "edieresis",\n      "\xec": "igrave",\n      "\xed": "iacute",\n      "\xee": "icircumflex",\n      "\xef": "idieresis",\n      "\xf0": "Yacute",\n      "\xf1": "ntilde",\n      "\xf2": "ograve",\n      "\xf3": "oacute",\n      "\xf4": "ocircumflex",\n      "\xf5": "otilde",\n      "\xf6": "odieresis",\n      "\xf8": "oslash",\n      "\xf9": "ugrave",\n      "\xfa": "uacute",\n      "\xfb": "ucircumflex",\n      "\xfc": "udieresis",\n      "\xfd": "yacute",\n      "\xfe": "thorn",\n      "\xff": "ydieresis",\n      "\u0131": "dotlessi",\n      "\u0141": "Lslash",\n      "\u0142": "lslash",\n      "\u0152": "OE",\n      "\u0153": "oe",\n      "\u0160": "Scaron",\n      "\u0161": "scaron",\n      "\u0178": "Ydieresis",\n      "\u017D": "Zcaron",\n      "\u02BA": "hungarumlaut",\n      "\u02C6": "circumflex",\n      "\u02C7": "caron",\n      "\u02C9": "macron",\n      " \u0306": "breve",\n      " \u0307": "dotaccent",\n      " \u030A": "ring",\n      " \u0328": "ogonek",\n      " \u0303": "tilde",\n      "\u2013": "endash",\n      "\u2014": "emdash",\n      "\u2018": "quoteleft",\n      "\u201A": "quotesinglbase",\n      "\u201C": "quotedblleft",\n      "\u201D": "quotedblright",\n      "\u201E": "quotedblbase",\n      "\u2020": "dagger",\n      "\u2021": "daggerdbl",\n      "...": "ellipsis",\n      "\u2039": "guilsinglleft",\n      "\u203A": "guilsinglright",\n      "\u2212": "minus",\n      "\u2219": "periodcentered"\n    }\n  },\n  "cmapTableIndex": [\n    "Unicode, Unicode 1.0",\n    "Macintosh, Mac Roman",\n    "Windows, Windows Unicode BMP"\n  ],\n  "headTable": {\n    "unitsPerEm": 1000,\n    "xMin": -89,\n    "yMin": -337,\n    "xMax": 691,\n    "yMax": 744\n  },\n  "hheaTable": {\n    "ascent": 744,\n    "descent": -337,\n    "lineGap": 0\n  },\n  "OS2Table": {\n    "usWeightClass": 400,\n    "usWidthClass": 5,\n    "fsType": 2\n  },\n  "postTable": {\n    "isFixedPitch": 0,\n    "italicAngle": 0.0\n  },\n  "layoutMetrics": {\n    "unitsPerEm": 1000,\n    "boundingBox": {\n      "xMin": -89,\n      "yMin": -337,\n      "xMax": 691,\n      "yMax": 744\n    },\n    "ascent": 744,\n    "descent": -337,\n    "lineGap": 0\n  },\n  "summary": {\n    "fontFamily": "OcrB",\n    "fontSubfamily": "Regular",\n    "version": "Altsys Fontographer 3.5  4/15/93",\n    "weightClass": 400,\n    "isItalic": false\n  }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"references",children:"References"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html?utm_source=chatgpt.com",children:(0,a.jsx)(e.strong,{children:"Character to Glyph Mapping Table"})})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/en-us/typography/opentype/spec/cmap?utm_source=chatgpt.com",children:(0,a.jsx)(e.strong,{children:"cmap \u2014 Character to Glyph Index Mapping Table"})})}),"\n"]})]})}function h(n={}){let{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},84429:function(n,e,t){t.d(e,{R:()=>s,x:()=>r});var i=t(96540);let a={},o=i.createContext(a);function s(n){let e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(o.Provider,{value:e},n.children)}},43339:function(n){n.exports=JSON.parse('{"permalink":"/en/blog/extract-font-info-by-python","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024/12-26-extract-font-info-by-python/index.md","title":"Extract Font File Information","description":"Retrieve font file information using Python.","date":"2024-12-26T00:00:00.000Z","tags":[{"inline":true,"label":"font-tools","permalink":"/en/blog/tags/font-tools"},{"inline":true,"label":"Python","permalink":"/en/blog/tags/python"}],"readingTime":13.33,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"extract-font-info-by-python","title":"Extract Font File Information","authors":"Z. Yuan","image":"/en/img/2024/1226.webp","tags":["font-tools","Python"],"description":"Retrieve font file information using Python."},"unlisted":false,"prevItem":{"title":"Useful GitHub Markdown Syntax","permalink":"/en/blog/github-markdown-advanced-syntax"},"nextItem":{"title":"Batch Video Conversion","permalink":"/en/blog/flexible-video-conversion-by-python"}}')}}]);