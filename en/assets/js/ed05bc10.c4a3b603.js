"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["11080"],{30669:function(e,n,s){s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var i=s(96475),t=s(74848),r=s(84429);let a={slug:"docusaurus-sidebars-enhanced-counting",title:"Advanced Implementation of Docusaurus Sidebar Counting: Recursive Counting and Stable Slugs",authors:"Z. Yuan",image:"/en/img/2025/0724.jpg",tags:["Docusaurus","Sidebar","Enhancement"],description:"Recursive counting of subfolders and slug stability optimization."},o,l={authorsImageUrls:[void 0]},c=[{value:"Issues with the Original Version",id:"issues-with-the-original-version",level:2},{value:"Three Major Improvements",id:"three-major-improvements",level:2},{value:"1. Recursive Counting of All Subfolders",id:"1-recursive-counting-of-all-subfolders",level:3},{value:"2. Stable Slug Generation",id:"2-stable-slug-generation",level:3},{value:"3. Folder Sorting Optimization",id:"3-folder-sorting-optimization",level:3},{value:"Summary",id:"summary",level:2},{value:"Preview",id:"preview",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"A long time ago, I wrote an article explaining how to modify Docusaurus Sidebar to automatically count the number of articles."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Background: ",(0,t.jsx)(n.a,{href:"/en/blog/customized-docusaurus-sidebars-auto-count",children:(0,t.jsx)(n.strong,{children:"Automatically Count Article Numbers in Docusaurus Sidebar"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["After using it for several months, I found there was still room for improvement. So this time, I made ",(0,t.jsx)(n.strong,{children:"three improvements"})," to solve pain points and enhance the experience all at once."]}),"\n",(0,t.jsx)(n.h2,{id:"issues-with-the-original-version",children:"Issues with the Original Version"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Counting is not precise enough"}),": It only counts Markdown files directly under the current folder, ignoring deeper nested directories."]}),"\n",(0,t.jsx)(n.p,{children:"For example, if the file structure is"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"papers/\n\u251C\u2500\u2500 classic-cnns/\n\u2502   \u251C\u2500\u2500 alexnet.md\n\u2502   \u251C\u2500\u2500 vgg/\n\u2502   \u2502   \u251C\u2500\u2500 vgg16.md\n\u2502   \u2502   \u2514\u2500\u2500 vgg19.md\n\u2502   \u2514\u2500\u2500 resnet/\n\u2502       \u2514\u2500\u2500 resnet50.md\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The old version would only display ",(0,t.jsx)(n.code,{children:"Classic CNNs (1)"}),", but the expected result should be: ",(0,t.jsx)(n.code,{children:"Classic CNNs (4)"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Unstable slug"}),": Category links depend on Docusaurus\u2019s automatic slug generation mechanism, occasionally causing path changes."]}),"\n",(0,t.jsx)(n.p,{children:"Since Docusaurus automatically generates slugs based on the category names we provide, whenever we change or add categories, the slug also changes, causing original links to break."}),"\n",(0,t.jsxs)(n.p,{children:["In the old version, links looked like this: ",(0,t.jsx)(n.code,{children:"papers/category/classic-cnns-11"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["After adding a new article, this link might change to ",(0,t.jsx)(n.code,{children:"papers/category/classic-cnns-12"}),". Such changes confuse users, as they may have already shared the original link, which is now invalid."]}),"\n",(0,t.jsx)(n.p,{children:"Beyond user frustration, Google\u2019s crawlers lose trust in these frequently changing links, negatively impacting the website\u2019s SEO ranking."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"three-major-improvements",children:"Three Major Improvements"}),"\n",(0,t.jsx)(n.h3,{id:"1-recursive-counting-of-all-subfolders",children:"1. Recursive Counting of All Subfolders"}),"\n",(0,t.jsxs)(n.p,{children:["The old Sidebar only counted ",(0,t.jsx)(n.code,{children:".md"})," files directly inside the current folder. This version uses deep recursion to correctly count all Markdown files including those in all subfolders, ensuring the numbers on category labels are accurate."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'/**\n * Recursively counts all Markdown (.md) files under a given directory.\n * Ignores hidden entries (starting with \'.\') and Docusaurus config files like \'_category_.json\'.\n *\n * @param {string} dirPath - Absolute path to the target directory.\n * @returns {number} Total number of Markdown files found.\n */\nfunction countMarkdownFiles(dirPath) {\n  let count = 0;\n\n  // Read all items (files and subdirectories) under the current directory\n  for (const name of fs.readdirSync(dirPath)) {\n    // Ignore hidden files and _category_.json config files\n    if (name.startsWith(".") || name === "_category_.json") continue;\n\n    const fullPath = path.join(dirPath, name); // Get full path\n    const stat = fs.statSync(fullPath); // Get file or directory status\n\n    if (stat.isDirectory()) {\n      // If it is a folder, recursively count Markdown files inside\n      count += countMarkdownFiles(fullPath);\n    } else if (stat.isFile() && name.endsWith(".md")) {\n      // If it is a Markdown file, increment count\n      count += 1;\n    }\n  }\n\n  return count;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-stable-slug-generation",children:"2. Stable Slug Generation"}),"\n",(0,t.jsx)(n.p,{children:"In Docusaurus, each category link is automatically converted to a URL slug."}),"\n",(0,t.jsxs)(n.p,{children:["However, this can cause \u201Cunpredictable\u201D changes, such as inconsistencies in URLs when paths contain spaces, Chinese characters, or special symbols. To ensure ",(0,t.jsx)(n.strong,{children:"stability and controllability"})," of links, we implement a ",(0,t.jsx)(n.code,{children:"toSlug"})," function that encodes paths into stable, predictable slugs."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Converts a relative POSIX path into a URL-safe slug.\n * Ensures cross-platform consistency by normalizing slashes and applying encodeURIComponent.\n *\n * @param {string} relPath - Relative path like 'classic-cnns/vgg'.\n * @returns {string} Encoded URL slug like 'classic-cnns/vgg'.\n */\nfunction toSlug(relPath) {\n  return relPath\n    .replace(/\\\\/g, \"/\") // Replace Windows backslashes with POSIX separators\n    .split(\"/\") // Split into directory segments\n    .map(encodeURIComponent) // URL encode each segment\n    .join(\"/\"); // Join back with '/' for a clean, stable slug\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then in ",(0,t.jsx)(n.code,{children:"buildCategoryItem()"}),", we first try to read the custom slug from ",(0,t.jsx)(n.code,{children:"_category_.json"}),". If none is set, we fallback to using the above ",(0,t.jsx)(n.code,{children:"toSlug()"})," default:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const defaultSlug = `/category/${toSlug(relativeDirPath)}`;\n\nconst link = {\n  type: "generated-index",\n  slug: metadata.link?.slug || defaultSlug, // Prefer custom slug, fallback otherwise\n  title: metadata.link?.title || baseLabel,\n  ...metadata.link, // Preserve other fields such as description\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-folder-sorting-optimization",children:"3. Folder Sorting Optimization"}),"\n",(0,t.jsx)(n.p,{children:"In Docusaurus Sidebar auto-generation, folders are by default sorted alphabetically if no order is controlled."}),"\n",(0,t.jsx)(n.p,{children:"In practice, we often want to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Prioritize folders containing ",(0,t.jsx)(n.code,{children:"_category_.json"})]})," (representing explicitly defined categories)"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Sort other undefined folders alphabetically afterwards"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This gives the Sidebar better organization and guides readers to browse \u201Cdesigned topic groups\u201D first."}),"\n",(0,t.jsx)(n.p,{children:"Here is the implementation of this sorting logic:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'/**\n * Sorts subdirectories such that:\n * - Folders with `_category_.json` come first (i.e., manually defined categories)\n * - Others follow, sorted alphabetically\n *\n * @param {string} dir - Absolute path to parent directory\n * @returns {string[]} Sorted list of subdirectory names\n */\nfunction getSortedSubDirs(dir) {\n  return fs\n    .readdirSync(dir)\n    .filter((name) => {\n      const fullPath = path.join(dir, name);\n      return !name.startsWith(".") && fs.statSync(fullPath).isDirectory();\n    })\n    .sort((a, b) => {\n      const aHasCategory = fs.existsSync(path.join(dir, a, "_category_.json"));\n      const bHasCategory = fs.existsSync(path.join(dir, b, "_category_.json"));\n\n      // Folders with _category_.json come first\n      if (aHasCategory && !bHasCategory) return -1;\n      if (bHasCategory && !aHasCategory) return 1;\n\n      // Otherwise sort alphabetically\n      return a.localeCompare(b);\n    });\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"Now, the Sidebar\u2019s numbers, links, and hierarchy are all properly handled."}),"\n",(0,t.jsx)(n.p,{children:"It should be good to go for a while!"}),"\n",(0,t.jsx)(n.p,{children:"Wish me luck."}),"\n",(0,t.jsx)(n.h2,{id:"preview",children:"Preview"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Full code is available here \u{1F449} ",(0,t.jsx)(n.a,{href:"https://github.com/DocsaidLab/website/blob/main/sidebarsPapers.js",children:(0,t.jsx)(n.strong,{children:"sidebarsPapers.js"})})]}),"\n",(0,t.jsxs)(n.li,{children:["See the results directly here \u{1F449} ",(0,t.jsx)(n.a,{href:"https://docsaid.org/en/papers/intro",children:(0,t.jsx)(n.strong,{children:"Paper Notes"})})]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},84429:function(e,n,s){s.d(n,{R:()=>a,x:()=>o});var i=s(96540);let t={},r=i.createContext(t);function a(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},96475:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/docusaurus-sidebars-enhanced-counting","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025/07-24-docusaurus-sidebars-enhanced-counting/index.md","title":"Advanced Implementation of Docusaurus Sidebar Counting: Recursive Counting and Stable Slugs","description":"Recursive counting of subfolders and slug stability optimization.","date":"2025-07-24T00:00:00.000Z","tags":[{"inline":true,"label":"Docusaurus","permalink":"/en/blog/tags/docusaurus"},{"inline":true,"label":"Sidebar","permalink":"/en/blog/tags/sidebar"},{"inline":true,"label":"Enhancement","permalink":"/en/blog/tags/enhancement"}],"readingTime":4,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"docusaurus-sidebars-enhanced-counting","title":"Advanced Implementation of Docusaurus Sidebar Counting: Recursive Counting and Stable Slugs","authors":"Z. Yuan","image":"/en/img/2025/0724.jpg","tags":["Docusaurus","Sidebar","Enhancement"],"description":"Recursive counting of subfolders and slug stability optimization."},"unlisted":false,"prevItem":{"title":"FortiClient VPN Split Routing Configuration and Route Testing","permalink":"/en/blog/mac-forticlient-vpn-split-routing"},"nextItem":{"title":"Fix Markdown PDF Mermaid Export Error","permalink":"/en/blog/fix-markdown-pdf-mermaid-export-error"}}')}}]);