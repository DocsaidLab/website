"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["61576"],{20422:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return a},default:function(){return h},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return c}});var i=t(81470),o=t(85893),s=t(50065);let r={slug:"flexible-video-conversion-by-python",title:"Batch Video Conversion",authors:"Zephyr",image:"/en/img/2024/1217.webp",tags:["Media-Processing","Python","ffmpeg"],description:"Build a batch conversion process with Python and ffmpeg to convert to a specified format."},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Design Draft",id:"design-draft",level:2},{value:"What is FFMPEG?",id:"what-is-ffmpeg",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Example Code",id:"example-code",level:2},{value:"How to Use",id:"how-to-use",level:2},{value:"Advanced Use",id:"advanced-use",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"A batch of MOV video files were received, but the system does not support reading them. They need to be converted to MP4 for compatibility."}),"\n",(0,o.jsx)(n.p,{children:"I had to write some code myself."}),"\n",(0,o.jsx)(n.h2,{id:"design-draft",children:"Design Draft"}),"\n",(0,o.jsx)(n.p,{children:"The go-to tool for video conversion is undoubtedly ffmpeg. This open-source tool supports almost all audio and video formats and allows you to control the conversion process through command-line parameters."}),"\n",(0,o.jsx)(n.p,{children:"Initially, we wanted to implement this functionality directly in the frontend, so others could convert files however they wanted..."}),"\n",(0,o.jsx)(n.p,{children:"However, we encountered difficulties when calling it from the browser and spent an hour trying to resolve the issue without success. So, we decided to handle the conversion locally."}),"\n",(0,o.jsx)(n.p,{children:"Converting locally is much easier. At first, we considered writing a Bash script, but then we realized Python might be easier to maintain, so we chose to use Python together with ffmpeg to accomplish the task."}),"\n",(0,o.jsx)(n.h2,{id:"what-is-ffmpeg",children:"What is FFMPEG?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://ffmpeg.org/",children:"ffmpeg"})," is an extremely powerful open-source multimedia processing tool, widely used for tasks like format conversion, streaming, editing, and merging multimedia files."]}),"\n",(0,o.jsx)(n.p,{children:"It supports a wide range of common and uncommon audio and video formats and includes a large number of codecs. With simple command-line operations, ffmpeg allows you to quickly perform tasks like conversion, cutting, embedding subtitles, resampling, compression, and cross-platform streaming."}),"\n",(0,o.jsx)(n.p,{children:"Since ffmpeg is an open-source project and can be easily installed and run on various operating systems (Linux, macOS, Windows), it has become an indispensable tool in media workflows."}),"\n",(0,o.jsx)(n.p,{children:"In general, we can accomplish common conversion tasks with simple commands, such as converting a MOV file to MP4:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ffmpeg -i input.mov -c copy output.mp4\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"-i"})," specifies the input file path, and ",(0,o.jsx)(n.code,{children:"-c copy"})," means copying the video and audio streams directly (without re-encoding), which significantly reduces processing time and maintains the original quality. If you want to adjust quality, encoding parameters, output resolution, bitrate, or channels, ffmpeg provides highly flexible command-line parameters for customization."]}),"\n",(0,o.jsx)(n.p,{children:"In short, it's an excellent tool that you should learn to use!"}),"\n",(0,o.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,o.jsx)(n.p,{children:"We are developing on an Ubuntu system, and similar Linux systems can be used as well."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Python Environment"}),": Ensure that Python 3.x is installed:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"python3 --version\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Install ffmpeg"}),": On Ubuntu, you can install ffmpeg with the following commands:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install ffmpeg\n"})}),"\n",(0,o.jsx)(n.p,{children:"After installation, check the version:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ffmpeg -version\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Code Structure"}),": Create a ",(0,o.jsx)(n.code,{children:"convert.py"})," file in your project folder (you can name it differently), and paste the following code into it."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example-code",children:"Example Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import subprocess\nimport sys\nfrom pathlib import Path\n\ndef convert_videos(input_dir: Path, src_format: str, dest_format: str):\n    # Check if the target directory exists\n    if not input_dir.is_dir():\n        print(f"Error: The target directory \'{input_dir}\' does not exist.")\n        sys.exit(1)\n\n    # Automatically create an output directory\n    output_dir = input_dir / "output"\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    # Ensure format strings start with a period\n    if not src_format.startswith("."):\n        src_format = f".{src_format}"\n    if not dest_format.startswith("."):\n        dest_format = f".{dest_format}"\n\n    # Iterate over all files with the source format (case insensitive)\n    video_files = [f for f in input_dir.rglob("*") if f.suffix.casefold() == src_format.casefold()]\n\n    if not video_files:\n        print(f"No {src_format} files found.")\n        sys.exit(0)\n\n    for file in video_files:\n        output_file = output_dir / f"{file.stem}{dest_format}"\n        print(f"Converting: \'{file}\' -> \'{output_file}\'")\n\n        # Use ffmpeg to convert the file\n        try:\n            subprocess.run(\n                [\n                    "ffmpeg", "-i", str(file),\n                    "-c", "copy",\n                    str(output_file)\n                ],\n                check=True,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE\n            )\n            print(f"Conversion successful: \'{output_file}\'")\n        except subprocess.CalledProcessError as e:\n            print(f"Conversion failed: \'{file}\'")\n            print(e.stderr.decode())\n\n    print(f"All files processed. Output directory: \'{output_dir}\'")\n\n\nif __name__ == "__main__":\n    # Check if the user has provided parameters\n    if len(sys.argv) != 4:\n        print(f"Usage: python {sys.argv[0]} <input directory> <source format> <destination format>")\n        print(f"Example: python {sys.argv[0]} \'videos\' \'MOV\' \'mp4\'")\n        sys.exit(1)\n\n    input_dir = Path(sys.argv[1]).resolve()\n    src_format = sys.argv[2]\n    dest_format = sys.argv[3]\n\n    convert_videos(input_dir, src_format, dest_format)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"how-to-use",children:"How to Use"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Prepare Source Files"}),": Place the files to be converted (e.g., MOV, AVI, MKV) into the specified directory (e.g., ",(0,o.jsx)(n.code,{children:"videos"}),")."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Run the Conversion"}),": Navigate to the directory containing the script and run the following command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"python3 convert.py videos MOV mp4\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you want to convert AVI files to MKV, use:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"python3 convert.py videos avi mkv\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After running the command, the program will generate the converted files in the ",(0,o.jsx)(n.code,{children:"videos/output"})," folder."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Check the Results"}),": Ensure that the ",(0,o.jsx)(n.code,{children:"output"})," folder contains the correctly converted files in the desired format."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"advanced-use",children:"Advanced Use"}),"\n",(0,o.jsx)(n.p,{children:"If you want to compress and adjust the quality of the files, you can add specific parameters to the ffmpeg command, such as:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ffmpeg -i input.avi -c:v libx264 -crf 20 output.mp4\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can modify the script to adjust how ffmpeg is called for this purpose."}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"That's it! We wrote a simple script during development, and I hope it's helpful to you."}),"\n",(0,o.jsx)(n.p,{children:"You can now start converting your files!"})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return r}});var i=t(67294);let o={},s=i.createContext(o);function r(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},81470:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/flexible-video-conversion-by-python","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024/12-17-flexible-video-conversion-by-python/index.md","title":"Batch Video Conversion","description":"Build a batch conversion process with Python and ffmpeg to convert to a specified format.","date":"2024-12-17T00:00:00.000Z","tags":[{"inline":true,"label":"Media-Processing","permalink":"/en/blog/tags/media-processing"},{"inline":true,"label":"Python","permalink":"/en/blog/tags/python"},{"inline":true,"label":"ffmpeg","permalink":"/en/blog/tags/ffmpeg"}],"readingTime":3.965,"hasTruncateMarker":true,"authors":[{"name":"Zephyr","title":"Engineer","url":"https://github.com/zephyr-sh","imageURL":"https://github.com/zephyr-sh.png","key":"Zephyr","page":null}],"frontMatter":{"slug":"flexible-video-conversion-by-python","title":"Batch Video Conversion","authors":"Zephyr","image":"/en/img/2024/1217.webp","tags":["Media-Processing","Python","ffmpeg"],"description":"Build a batch conversion process with Python and ffmpeg to convert to a specified format."},"unlisted":false,"prevItem":{"title":"Extract Font File Information","permalink":"/en/blog/extract-font-info-by-python"},"nextItem":{"title":"Automating Ubuntu System Status Checks with ChatGPT","permalink":"/en/blog/system-status-checking-by-chatgpt"}}')}}]);