"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["98570"],{92782:function(n,e,a){a.r(e),a.d(e,{metadata:()=>r,contentTitle:()=>o,default:()=>m,assets:()=>l,toc:()=>d,frontMatter:()=>t});var r=JSON.parse('{"id":"capybara/funcs/drawings/draw_mask","title":"draw_mask","description":"drawmask(img np.ndarray, colormap Tuple[float, float] = (0.5, 0.5), gamma bool = False) -> np.ndarray","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/capybara/funcs/drawings/draw_mask.md","sourceDirName":"capybara/funcs/drawings","slug":"/capybara/funcs/drawings/draw_mask","permalink":"/en/docs/capybara/funcs/drawings/draw_mask","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1734622390000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"draw_text","permalink":"/en/docs/capybara/funcs/drawings/draw_text"},"next":{"title":"draw_ocr_infos","permalink":"/en/docs/capybara/funcs/drawings/draw_ocr_infos"}}'),s=a("85893"),i=a("50065");let t={sidebar_position:6},o="draw_mask",l={},d=[];function c(n){let e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"draw_mask",children:"draw_mask"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/71170598902b6f8e89a969f1ce27ed4fd05b2ff2/docsaidkit/vision/visualization/draw.py#L366",children:"draw_mask(img: np.ndarray, mask: np.ndarray, colormap: int = cv2.COLORMAP_JET, weight: Tuple[float, float] = (0.5, 0.5), gamma: float = 0, min_max_normalize: bool = False) -> np.ndarray"})}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Description"})}),"\n",(0,s.jsx)(e.p,{children:"Draw a mask on an image."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"img"})," (",(0,s.jsx)(e.code,{children:"np.ndarray"}),"): The image to draw on."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"mask"})," (",(0,s.jsx)(e.code,{children:"np.ndarray"}),"): The mask to draw."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"colormap"})," (",(0,s.jsx)(e.code,{children:"int"}),"): The colormap used for the mask. Defaults to ",(0,s.jsx)(e.code,{children:"cv2.COLORMAP_JET"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"weight"})," (",(0,s.jsx)(e.code,{children:"Tuple[float, float]"}),"): The weights of the image and the mask. Defaults to (0.5, 0.5)."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"gamma"})," (",(0,s.jsx)(e.code,{children:"float"}),"): The gamma value of the mask. Defaults to 0."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"min_max_normalize"})," (",(0,s.jsx)(e.code,{children:"bool"}),"): Whether to normalize the mask to the range [0, 1]. Defaults to False."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"np.ndarray"}),": The image with the drawn mask."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"import docsaidkit as D\nimport numpy as np\n\nimg = D.imread('lena.png')\npolygon = D.Polygon([(20, 20), (100, 20), (80, 80), (20, 40)])\nmask = D.draw_polygon(np.zeros_like(img), polygon, fillup=True, color=255)\nmask_img = D.draw_mask(img, mask, colormap=cv2.COLORMAP_JET, weight=(0.5, 0.5), gamma=0, min_max_normalize=False)\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"draw_mask",src:a(46732).Z+"",width:"256",height:"256"})}),"\n"]}),"\n"]})]})}function m(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},46732:function(n,e,a){a.d(e,{Z:function(){return r}});let r=a.p+"assets/images/test_draw_mask-790affdfa66ebbf22fceb184402c9c8f.jpg"},50065:function(n,e,a){a.d(e,{Z:function(){return o},a:function(){return t}});var r=a(67294);let s={},i=r.createContext(s);function t(n){let e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);