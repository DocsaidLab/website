"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([["88351"],{15944:function(n,e,i){i.r(e),i.d(e,{metadata:()=>t,contentTitle:()=>r,default:()=>p,assets:()=>l,toc:()=>c,frontMatter:()=>d});var t=JSON.parse('{"id":"capybara/funcs/vision/functionals/pad","title":"pad","description":"pad(img Union[int, Tuple[int, int], Tuple[int, int, int, int]], fillvalue Union[str, int, BORDER] = BORDER.CONSTANT) -> np.ndarray","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/capybara/funcs/vision/functionals/pad.md","sourceDirName":"capybara/funcs/vision/functionals","slug":"/capybara/funcs/vision/functionals/pad","permalink":"/en/docs/capybara/funcs/vision/functionals/pad","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1734933829000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"medianblur","permalink":"/en/docs/capybara/funcs/vision/functionals/medianblur"},"next":{"title":"geometric","permalink":"/en/docs/category/geometric"}}'),a=i("85893"),s=i("50065");let d={},r="pad",l={},c=[];function o(n){let e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"pad",children:"pad"})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://github.com/DocsaidLab/Capybara/blob/975d62fba4f76db59e715c220f7a2af5ad8d050e/capybara/vision/functionals.py#L194",children:"pad(img: np.ndarray, pad_size: Union[int, Tuple[int, int], Tuple[int, int, int, int]], fill_value: Optional[Union[int, Tuple[int, int, int]]] = 0, pad_mode: Union[str, int, BORDER] = BORDER.CONSTANT) -> np.ndarray"})}),"\n"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Description"}),": Applies padding to the input image."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"img"})," (",(0,a.jsx)(e.code,{children:"np.ndarray"}),"): The input image to be padded."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"pad_size"})," (",(0,a.jsx)(e.code,{children:"Union[int, Tuple[int, int], Tuple[int, int, int, int]]"}),"): The padding size. Can be an integer to specify the same padding for all sides, a tuple ",(0,a.jsx)(e.code,{children:"(pad_top, pad_bottom, pad_left, pad_right)"})," for different padding sizes for each side, or a tuple ",(0,a.jsx)(e.code,{children:"(pad_height, pad_width)"})," for the same padding size for height and width."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"fill_value"})," (",(0,a.jsx)(e.code,{children:"Optional[Union[int, Tuple[int, int, int]]]"}),"): The value to use for padding. If the input image is color (3 channels), ",(0,a.jsx)(e.code,{children:"fill_value"})," can be an integer or a tuple ",(0,a.jsx)(e.code,{children:"(R, G, B)"})," to specify the padding color. If the input image is grayscale (1 channel), ",(0,a.jsx)(e.code,{children:"fill_value"})," should be an integer. Default is 0."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"pad_mode"})," (",(0,a.jsx)(e.code,{children:"Union[str, int, BORDER]"}),"): The padding mode. Available options:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"BORDER.CONSTANT"}),": Pad with a constant value (",(0,a.jsx)(e.code,{children:"fill_value"}),")."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"BORDER.REPLICATE"}),": Pad by replicating the edge pixels."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"BORDER.REFLECT"}),": Pad by reflecting the image around the edge."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"BORDER.REFLECT101"}),": Pad by reflecting the image around the edge with a slight adjustment to avoid artificial artifacts.\nDefault is ",(0,a.jsx)(e.code,{children:"BORDER.CONSTANT"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Returns"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"np.ndarray"}),": The padded image."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import capybara as cb\n\nimg = cb.imread('lena.png')\npad_img = cb.pad(img, pad_size=20, fill_value=(255, 0, 0))\n\n# Resize the padded image to the original size for visualization\npad_img = cb.imresize(pad_img, [img.shape[0], img.shape[1]])\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"pad",src:i(54929).Z+"",width:"426",height:"256"})}),"\n"]}),"\n"]})]})}function p(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(o,{...n})}):o(n)}},54929:function(n,e,i){i.d(e,{Z:function(){return t}});let t=i.p+"assets/images/test_pad-73035954aa862b84f070f6481de0c9d4.jpg"},50065:function(n,e,i){i.d(e,{Z:function(){return r},a:function(){return d}});var t=i(67294);let a={},s=t.createContext(a);function d(n){let e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:d(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);