"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4775],{94749:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=i(74848),r=i(28453);const t={sidebar_position:3},o="Advanced",a={id:"docsaidkit/advance",title:"Advanced",description:"Common References",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/docsaidkit/advance.md",sourceDirName:"docsaidkit",slug:"/docsaidkit/advance",permalink:"/en/docs/docsaidkit/advance",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"zephyr-sh",lastUpdatedAt:1721366419e3,sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/en/docs/docsaidkit/installation"},next:{title:"PIP configs",permalink:"/en/docs/docsaidkit/pipconfig"}},l={},c=[{value:"Common References",id:"common-references",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Use Docker!",id:"use-docker",level:2},{value:"Installing the Training Environment",id:"installing-the-training-environment",level:3},{value:"Installing the Inference Environment",id:"installing-the-inference-environment",level:3},{value:"Usage",id:"usage",level:2},{value:"Daily Use",id:"daily-use",level:3},{value:"Introducing <code>gosu</code> Configuration",id:"introducing-gosu-configuration",level:3},{value:"Installing Internal Packages",id:"installing-internal-packages",level:3},{value:"FAQs",id:"faqs",level:2},{value:"Permission Denied",id:"permission-denied",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"advanced",children:"Advanced"}),"\n",(0,s.jsx)(n.h2,{id:"common-references",children:"Common References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For detailed information on each version of the PyTorch image built by NVIDIA, refer to: ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/index.html",children:(0,s.jsx)(n.strong,{children:"PyTorch Release Notes"})})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For preparations required for NVIDIA runtime, see: ",(0,s.jsx)(n.a,{href:"https://github.com/NVIDIA/nvidia-docker/wiki/Installation-(Native-GPU-Support)#usage",children:(0,s.jsx)(n.strong,{children:"Installation (Native GPU Support)"})})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For instructions on installing the NVIDIA Toolkit, refer to: ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html",children:(0,s.jsx)(n.strong,{children:"Installing the NVIDIA Container Toolkit"})})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For information on ONNXRuntime, see: ",(0,s.jsx)(n.a,{href:"https://onnxruntime.ai/docs/execution-providers/CUDA-ExecutionProvider.html#requirements",children:(0,s.jsx)(n.strong,{children:"ONNX Runtime Release Notes"})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,s.jsx)(n.p,{children:"Our working environment, though not overly complex, can encounter compatibility issues with some packages."}),"\n",(0,s.jsx)(n.p,{children:"Generally speaking, we can categorize our setup into:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Training Environment"}),": Requires PyTorch, OpenCV, CUDA, and cuDNN to be compatible."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment Environment"}),": Requires ONNXRuntime, OpenCV, and CUDA to be compatible."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The most common conflict occurs between the versions of PyTorch-CUDA and ONNXRuntime-CUDA."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Why do they always mismatch? \ud83d\udca2 \ud83d\udca2 \ud83d\udca2"})}),"\n",(0,s.jsx)(n.h2,{id:"use-docker",children:"Use Docker!"}),"\n",(0,s.jsx)(n.p,{children:"We always use Docker for installation to ensure consistency across environments, with no exceptions."}),"\n",(0,s.jsx)(n.p,{children:"Using Docker saves a lot of time adjusting the environment and avoids many unnecessary issues."}),"\n",(0,s.jsx)(n.p,{children:"We continuously test related environments during development, and you can use the following commands:"}),"\n",(0,s.jsx)(n.h3,{id:"installing-the-training-environment",children:"Installing the Training Environment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd DocsaidKit\nbash docker/build.bash\n"})}),"\n",(0,s.jsxs)(n.p,{children:['In the "training environment", we use ',(0,s.jsx)(n.code,{children:"nvcr.io/nvidia/pytorch:24.05-py3"})," as the base image."]}),"\n",(0,s.jsx)(n.p,{children:"Users can replace this according to their needs, and the version number (e.g., 24.05) will update over time."}),"\n",(0,s.jsxs)(n.p,{children:["For details on the image, refer to: ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/index.html",children:(0,s.jsx)(n.strong,{children:"PyTorch Release Notes"})})]}),"\n",(0,s.jsxs)(n.p,{children:["To integrate your training module, you can use ",(0,s.jsx)(n.code,{children:"docsaid_training_base_image"})," as the base image for further development after compilation."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Typically, ONNXRuntime is not required during training. Even if there are CUDA issues, ONNXRuntime can switch to CPU mode."})}),"\n",(0,s.jsx)(n.h3,{id:"installing-the-inference-environment",children:"Installing the Inference Environment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd DocsaidKit\nbash docker/build_infer.bash\n"})}),"\n",(0,s.jsxs)(n.p,{children:['In the "inference environment", we use ',(0,s.jsx)(n.code,{children:"nvcr.io/nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04"})," as the base image."]}),"\n",(0,s.jsx)(n.p,{children:"This image is specifically designed for deploying models, so it doesn't include training environment packages like PyTorch."}),"\n",(0,s.jsx)(n.p,{children:"Users can replace this according to their needs, and the versions will change with updates to ONNXRuntime."}),"\n",(0,s.jsxs)(n.p,{children:["For inference-related images, refer to: ",(0,s.jsx)(n.a,{href:"https://ngc.nvidia.com/catalog/containers/nvidia:cuda",children:(0,s.jsx)(n.strong,{children:"NVIDIA NGC"})})]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["Generally, we apply this module in projects like ",(0,s.jsx)(n.code,{children:"DocAligner"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"daily-use",children:"Daily Use"}),"\n",(0,s.jsxs)(n.p,{children:["Here's an example. Suppose you have a ",(0,s.jsx)(n.code,{children:"your_scripts.py"})," file that you need to run with Python."]}),"\n",(0,s.jsxs)(n.p,{children:["Assuming you've completed the installation of the inference environment, write a ",(0,s.jsx)(n.code,{children:"Dockerfile"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="your_Dockerfile"',children:'# syntax=docker/dockerfile:experimental\nFROM docsaid_infer_image:latest\n\n# Set working directory, replace as needed\nWORKDIR /code\n\n# Example: Install DocAligner\nRUN git clone https://github.com/DocsaidLab/DocAligner.git && \\\n    cd DocAligner && \\\n    python setup.py bdist_wheel && \\\n    pip install dist/*.whl && \\\n    cd .. && rm -rf DocAligner\n\nENTRYPOINT ["python"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then build the image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -f your_Dockerfile -t your_image_name .\n"})}),"\n",(0,s.jsx)(n.p,{children:"After completion, run the command wrapped in Docker each time:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\ndocker run \\\n    --gpus all \\\n    -v ${PWD}:/code\n    -it --rm your_image_name your_scripts.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is equivalent to directly calling the packaged Python environment, ensuring consistency."}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["If you want to enter the container instead of starting Python, change the entry point to ",(0,s.jsx)(n.code,{children:"/bin/bash"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",children:'ENTRYPOINT ["/bin/bash"]\n'})})]}),"\n",(0,s.jsxs)(n.h3,{id:"introducing-gosu-configuration",children:["Introducing ",(0,s.jsx)(n.code,{children:"gosu"})," Configuration"]}),"\n",(0,s.jsx)(n.p,{children:"If you encounter permission issues when running Docker:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.strong,{children:["For example: Output files or images in the container have root",":root"," permissions, making them difficult to modify or delete!"]})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We recommend considering the ",(0,s.jsx)(n.code,{children:"gosu"})," tool."]}),"\n",(0,s.jsxs)(n.p,{children:["Modify the original Dockerfile for ",(0,s.jsx)(n.code,{children:"gosu"})," usage as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="your_Dockerfile"',children:'# syntax=docker/dockerfile:experimental\nFROM docsaid_infer_image:latest\n\n# Set working directory, replace as needed\nWORKDIR /code\n\n# Example: Install DocAligner\nRUN git clone https://github.com/DocsaidLab/DocAligner.git && \\\n    cd DocAligner && \\\n    python setup.py bdist_wheel && \\\n    pip install dist/*.whl && \\\n    cd .. && rm -rf DocAligner\n\n# Set entry point script path\nENV ENTRYPOINT_SCRIPT=/entrypoint.sh\n\n# Install gosu\nRUN apt-get update && apt-get install -y gosu && rm -rf /var/lib/apt/lists/*\n\n# Create entry point script\nRUN printf \'#!/bin/bash\\n\\\n    if [ ! -z "$USER_ID" ] && [ ! -z "$GROUP_ID" ]; then\\n\\\n    groupadd -g "$GROUP_ID" -o usergroup\\n\\\n    useradd --shell /bin/bash -u "$USER_ID" -g "$GROUP_ID" -o -c "" -m user\\n\\\n    export HOME=/home/user\\n\\\n    chown -R "$USER_ID":"$GROUP_ID" /home/user\\n\\\n    chown -R "$USER_ID":"$GROUP_ID" /code\\n\\\n    fi\\n\\\n    \\n\\\n    # Check if there are arguments\\n\\\n    if [ $# -gt 0 ]; then\\n\\\n    exec gosu ${USER_ID:-0}:${GROUP_ID:-0} python "$@"\\n\\\n    else\\n\\\n    exec gosu ${USER_ID:-0}:${GROUP_ID:-0} bash\\n\\\n    fi\' > "$ENTRYPOINT_SCRIPT"\n\n# Grant permissions\nRUN chmod +x "$ENTRYPOINT_SCRIPT"\n\n# Entry point\nENTRYPOINT ["/bin/bash", "/entrypoint.sh"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then build the image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -f your_Dockerfile -t your_image_name .\n"})}),"\n",(0,s.jsx)(n.p,{children:"Run the command wrapped in Docker each time:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\ndocker run \\\n    -e USER_ID=$(id -u) \\\n    -e GROUP_ID=$(id -g) \\\n    --gpus all \\\n    -v ${PWD}:/code\n    -it --rm your_image_name your_scripts.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"installing-internal-packages",children:"Installing Internal Packages"}),"\n",(0,s.jsx)(n.p,{children:"If you need to install some internal packages while building the image, include environment variables."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="your_Dockerfile"',children:'# syntax=docker/dockerfile:experimental\nFROM docsaid_infer_image:latest\n\n# Set working directory, replace as needed\nWORKDIR /code\n\n# Example: Install DocAligner (assuming it\'s an internal package)\n\n# Introduce environment variables\nARG PYPI_ACCOUNT\nARG PYPI_PASSWORD\n\n# Change to your internal package source\nENV SERVER_IP=192.168.100.100:28080/simple/\n\n# Install DocAligner\n# Remember to change to your package server address\nRUN python -m pip install \\\n    --trusted-host 192.168.100.100 \\\n    --index-url http://${PYPI_ACCOUNT}:${PYPI_PASSWORD}@192.168.100.100:16000/simple docaligner\n\nENTRYPOINT ["python"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then build the image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build \\\n    -f your_Dockerfile \\\n    --build-arg PYPI_ACCOUNT=your_account \\\n    --build-arg PYPI_PASSWORD=your_password \\\n    -t your_image_name .\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If your account and password are stored elsewhere, such as in a ",(0,s.jsx)(n.code,{children:"pip.conf"})," file, you can parse the string to import them:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build \\\n    -f your_Dockerfile \\\n    --build-arg PYPI_PASSWORD=$(awk -F '://|@' '/index-url/{print $2}' your/config/path/pip.conf | cut -d: -f2) \\\n    -t your_image_name .\n"})}),"\n",(0,s.jsx)(n.p,{children:"After completion, run the command wrapped in Docker each time. The usage is the same as above."}),"\n",(0,s.jsx)(n.h2,{id:"faqs",children:"FAQs"}),"\n",(0,s.jsx)(n.h3,{id:"permission-denied",children:"Permission Denied"}),"\n",(0,s.jsxs)(n.p,{children:["After switching users with ",(0,s.jsx)(n.code,{children:"gosu"}),", your permissions will be restricted. If you need to read/write files in the container, you might encounter permission issues."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if you installed the ",(0,s.jsx)(n.code,{children:"DocAligner"})," package, it automatically downloads model files when starting the model, placing them in a Python-related folder."]}),"\n",(0,s.jsx)(n.p,{children:"In this example, the default path for model files is:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/usr/local/lib/python3.10/dist-packages/docaligner/heatmap_reg/ckpt"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This path is beyond the user's permission range!"}),"\n",(0,s.jsx)(n.p,{children:"To grant this path to the user, modify the Dockerfile as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="your_Dockerfile" {28}',children:'# syntax=docker/dockerfile:experimental\nFROM docsaid_infer_image:latest\n\n# Set working directory, replace as needed\nWORKDIR /code\n\n# Example: Install DocAligner\nRUN git clone https://github.com/DocsaidLab/DocAligner.git && \\\n    cd DocAligner && \\\n    python setup.py bdist_wheel && \\\n    pip install dist/*.whl && \\\n    cd .. && rm -rf DocAligner\n\n# Set entry point script path\nENV ENTRYPOINT_SCRIPT=/entrypoint.sh\n\n# Install gosu\nRUN apt-get update && apt-get install -y gosu && rm -rf /var/lib/apt/lists/*\n\n# Create entry point script\nRUN printf \'#!/bin/bash\\n\\\n    if [ ! -z "$USER_ID" ] && [ ! -z "$GROUP_ID" ]; then\\n\\\n    groupadd -g "$GROUP_ID" -o usergroup\\n\\\n    useradd --shell /bin/bash -u "$USER_ID" -g "$GROUP_ID" -o -c "" -m user\\n\\\n    export HOME=/home/user\\n\\\n    chown -R "$USER_ID":"$GROUP_ID" /home/user\\n\\\n    chown -R "$USER_ID":"$GROUP_ID" /code\\n\\\n    chmod -R 777 /usr/local/lib/python3.10/dist-packages\\n\\\n    fi\\n\\\n    \\n\\\n    # Check if there are arguments\\n\\\n    if [ $# -gt 0 ]; then\\n\\\n    exec gosu ${USER_ID:-0}:${GROUP_ID:-0} python "$@"\\n\\\n    else\\n\\\n    exec gosu ${USER_ID:-0}:${GROUP_ID:-0} bash\\n\\\n    fi\' > "$ENTRYPOINT_SCRIPT"\n\n# Grant permissions\nRUN chmod +x "$ENTRYPOINT_SCRIPT"\n\n# Entry point\nENTRYPOINT ["/bin/bash", "/entrypoint.sh"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you encounter similar issues, you can resolve them this way."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);