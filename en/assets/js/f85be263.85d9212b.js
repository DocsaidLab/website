"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["95479"],{45276:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return a},metadata:function(){return r},toc:function(){return d}});var r=t(67389),i=t(85893),s=t(50065);let a={slug:"customized-docusaurus-sidebars-auto-count",title:"Automatically Count Articles in Docusaurus Sidebar",authors:"Zephyr",image:"/en/img/2024/0914.webp",tags:["Docusaurus","Sidebar"],description:"Adding some new features to the sidebar."},o=void 0,c={authorsImageUrls:[void 0]},d=[{value:"Reference Material",id:"reference-material",level:2},{value:"Implementation",id:"implementation",level:2}];function l(e){let n={a:"a",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Docusaurus provides a very feature-rich Sidebar by default, but sometimes it doesn't fit all our needs."}),"\n",(0,i.jsx)(n.p,{children:"Let's tweak it a bit this time."}),"\n",(0,i.jsxs)(n.p,{children:["The goal is simple. The original Sidebar displays the categories we've specified. When the site starts, it looks for the ",(0,i.jsx)(n.code,{children:"_category_.json"})," in each directory level, which contains something like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "label": "Classic CNNs",\n  "link": {\n    "type": "generated-index"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This would display:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Classic CNNs"}),"\n",(0,i.jsx)(n.li,{children:"... (other categories)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"What I'd like to do is count the number of items under each folder and display it directly on the page, like this:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Classic CNNs (8)"}),"\n",(0,i.jsx)(n.li,{children:"... (other categories)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Can we just add the count directly in the ",(0,i.jsx)(n.code,{children:"_category_.json"})," file?"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "label": "Classic CNNs (8)",\n  "link": {\n    "type": "generated-index"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"And manually update the count every time we add an article?"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Absolutely not! We can't write code like that."})}),"\n",(0,i.jsx)(n.h2,{id:"reference-material",children:"Reference Material"}),"\n",(0,i.jsx)(n.p,{children:"To solve this issue, as usual, let's first check Docusaurus' official documentation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docusaurus.io/docs/sidebar",children:(0,i.jsx)(n.strong,{children:"Docusaurus Sidebar"})})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The default Sidebar is autogenerated through the ",(0,i.jsx)(n.code,{children:"autogenerated"})," option:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"/**\n * Creating a sidebar enables you to:\n - create an ordered group of docs\n - render a sidebar for each doc of that group\n - provide next/previous navigation\n\n The sidebars can be generated from the filesystem, or explicitly defined here.\n\n Create as many sidebars as you want.\n */\n\n// @ts-check\n\n/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */\nconst sidebars = {\n  // By default, Docusaurus generates a sidebar from the docs folder structure\n  tutorialSidebar: [{ type: \"autogenerated\", dirName: \".\" }],\n\n  // But you can create a sidebar manually\n  /*\n  tutorialSidebar: [\n    'intro',\n    'hello',\n    {\n      type: 'category',\n      label: 'Tutorial',\n      items: ['tutorial-basics/create-a-document'],\n    },\n  ],\n   */\n};\n\nexport default sidebars;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"After reviewing it, it seems there is no built-in feature that fits our needs. Let's build one ourselves."}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.p,{children:"I'll include comments directly in the code. Here are a few places to note where modifications may be required based on your setup:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Line 8: ",(0,i.jsx)(n.code,{children:'const baseDir = path.join(__dirname, "papers");'})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"papers"})," here refers to our folder name. Ensure your directory path is correct."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Line 20: ",(0,i.jsx)(n.code,{children:'sidebarItems.push("intro");'})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"intro"})," here refers to the name of our homepage. Ensure your homepage name is correct. If there's no homepage, you can remove this line."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Line 72: ",(0,i.jsx)(n.code,{children:'return stat.isDirectory() || (stat.isFile() && item.endsWith(".md"));'})]}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:".md"})," is the format of our articles. Adjust it based on your format."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Here's the implementation. You can see the result directly on the webpage: ",(0,i.jsx)(n.a,{href:"/papers/intro",children:(0,i.jsx)(n.strong,{children:"Papers"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'showLineNumbers title="/sidebars.js"',children:'const fs = require("fs"); // Import Node.js file system module to work with files and directories\nconst path = require("path"); // Import Node.js path module to handle file paths\n\n/** @type {import(\'@docusaurus/plugin-content-docs\').SidebarsConfig} */\n// This is a type definition for Docusaurus sidebar configuration to enable IDE autocompletion\nfunction generateSidebar() {\n  // Set the base directory path, pointing to the \'papers\' folder. Modify as needed.\n  const baseDir = path.join(__dirname, "papers");\n\n  // Read all subdirectories under \'papers\', filtering out hidden ones (starting with a dot)\n  const categories = fs.readdirSync(baseDir).filter((item) => {\n    const itemPath = path.join(baseDir, item);\n    // Ensure it\'s a directory and not hidden\n    return fs.statSync(itemPath).isDirectory() && !item.startsWith(".");\n  });\n\n  const sidebarItems = []; // Array to store sidebar items\n\n  // Add a fixed \'intro\' item at the beginning\n  sidebarItems.push("intro");\n\n  // Iterate through all category directories\n  categories.forEach((category) => {\n    const categoryPath = path.join(baseDir, category); // Get the full path for each category\n    const count = countItemsInDirectory(categoryPath); // Count the number of items in the directory\n\n    // Try to read the \'_category_.json\' file within the category directory to get label and link\n    const categoryJsonPath = path.join(categoryPath, "_category_.json");\n    let label = category; // Default label is the directory name\n    let link = undefined; // Default link is undefined\n    if (fs.existsSync(categoryJsonPath)) {\n      // If the \'_category_.json\' file exists\n      const categoryJson = JSON.parse(\n        fs.readFileSync(categoryJsonPath, "utf8")\n      ); // Read and parse the JSON file\n      label = categoryJson.label || category; // Use the label from the JSON file or default to directory name\n      link = categoryJson.link; // Use the link from the JSON file\n    }\n\n    // Append the item count to the label\n    label = `${label} (${count})`;\n\n    // Create a sidebar item, with type \'category\', indicating this is a category\n    const sidebarItem = {\n      type: "category",\n      label: label, // Display label\n      items: [{ type: "autogenerated", dirName: category }], // Automatically generate document items under the category\n    };\n\n    if (link) {\n      // If a link is provided, add it to the category\n      sidebarItem.link = link;\n    }\n\n    sidebarItems.push(sidebarItem); // Add the category item to the sidebar array\n  });\n\n  // Return an object containing the sidebar configuration\n  return {\n    papersSidebar: sidebarItems,\n  };\n}\n\n// Count the valid items (including subdirectories and Markdown files) in a specified directory\nfunction countItemsInDirectory(dirPath) {\n  const items = fs.readdirSync(dirPath).filter((item) => {\n    const itemPath = path.join(dirPath, item);\n    // Exclude \'_category_.json\' and hidden files (starting with a dot)\n    if (item === "_category_.json" || item.startsWith(".")) return false;\n    const stat = fs.statSync(itemPath);\n    // Only count directories and .md files\n    return stat.isDirectory() || (stat.isFile() && item.endsWith(".md"));\n  });\n  return items.length; // Return the count of items\n}\n\n// Export the generated sidebar configuration for Docusaurus to use\nexport default generateSidebar();\n'})})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return a}});var r=t(67294);let i={},s=r.createContext(i);function a(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},67389:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/customized-docusaurus-sidebars-auto-count","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024/09-14-customized-docusaurus-sidebars-auto-count/index.md","title":"Automatically Count Articles in Docusaurus Sidebar","description":"Adding some new features to the sidebar.","date":"2024-09-14T00:00:00.000Z","tags":[{"inline":true,"label":"Docusaurus","permalink":"/en/blog/tags/docusaurus"},{"inline":true,"label":"Sidebar","permalink":"/en/blog/tags/sidebar"}],"readingTime":4.315,"hasTruncateMarker":true,"authors":[{"name":"Zephyr","title":"Engineer","url":"https://github.com/zephyr-sh","imageURL":"https://github.com/zephyr-sh.png","key":"Zephyr","page":null}],"frontMatter":{"slug":"customized-docusaurus-sidebars-auto-count","title":"Automatically Count Articles in Docusaurus Sidebar","authors":"Zephyr","image":"/en/img/2024/0914.webp","tags":["Docusaurus","Sidebar"],"description":"Adding some new features to the sidebar."},"unlisted":false,"prevItem":{"title":"Python Implementation of a Web File Downloader","permalink":"/en/blog/file-crawler-python-implementation"},"nextItem":{"title":"Customizing the Docusaurus 404 Page","permalink":"/en/blog/customized-docusaurus-404-page"}}')}}]);