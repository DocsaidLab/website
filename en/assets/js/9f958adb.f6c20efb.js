"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["44425"],{72785:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return c}});var i=t(17793),s=t(85893),o=t(50065);let a={slug:"react-hook-vs-python",title:"What exactly is React Hook hooking?",authors:"Z. Yuan",image:"/en/img/2025/0417.jpg",tags:["react","hook"],description:"Deconstructing the concepts behind React Hook."},r=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Starting with Python",id:"starting-with-python",level:2},{value:"Traditional OOP Approach",id:"traditional-oop-approach",level:2},{value:"Functional + State Binding",id:"functional--state-binding",level:2},{value:"OOP vs Functional",id:"oop-vs-functional",level:2},{value:"Functional Thinking",id:"functional-thinking",level:2},{value:"Think of it in a Different Scenario",id:"think-of-it-in-a-different-scenario",level:2},{value:"What if You Use OOP?",id:"what-if-you-use-oop",level:2},{value:"But What if You Use Functional Programming?",id:"but-what-if-you-use-functional-programming",level:2},{value:"Why Give Up OOP?",id:"why-give-up-oop",level:2},{value:"So",id:"so",level:2}];function h(e){let n={code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"A few years ago, when I first started learning React, I felt like React was living in a parallel universe and was hard to understand."}),"\n",(0,s.jsx)(n.p,{children:"Look at this Hook\u2014doesn\u2019t it seem counterintuitive?"}),"\n",(0,s.jsx)(n.h2,{id:"starting-with-python",children:"Starting with Python"}),"\n",(0,s.jsx)(n.p,{children:"You might be like me, more comfortable with Python, so let\u2019s start there!"}),"\n",(0,s.jsx)(n.p,{children:"Let's take a look at the simplest counter. In React, we would write it like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { useState } from "react";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return <button onClick={handleClick}>Clicked! Count = {count}</button>;\n}\n\nexport default Counter;\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you had to write the counter in Python, how would you do it?"}),"\n",(0,s.jsx)(n.p,{children:"You think it\u2019s simple? Then let\u2019s do it using OOP!"}),"\n",(0,s.jsx)(n.h2,{id:"traditional-oop-approach",children:"Traditional OOP Approach"}),"\n",(0,s.jsx)(n.p,{children:"Here\u2019s how I would write it. This problem itself is not difficult:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Counter:\n\n    def __init__(self):\n        self.count = 0\n\n    def handle_click(self):\n        self.count += 1\n        self.render()\n\n    def render(self):\n        print(f"Clicked! Count = {self.count}")\n\n\n# Usage\ncounter = Counter()\ncounter.handle_click()  # Click once\ncounter.handle_click()  # Click again\n'})}),"\n",(0,s.jsx)(n.p,{children:"But this approach doesn\u2019t quite match up with the React example, so let\u2019s try a different method:"}),"\n",(0,s.jsx)(n.h2,{id:"functional--state-binding",children:"Functional + State Binding"}),"\n",(0,s.jsx)(n.p,{children:'Instead of using classes, let\u2019s define a function that separates the "state" and "render logic," using pure functions and closures to manage the state:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def use_state(initial_value):\n\n    state = {"value": initial_value}\n\n    def get_value():\n        return state["value"]\n\n    def set_value(new_value):\n        state["value"] = new_value\n\n    return get_value, set_value\n'})}),"\n",(0,s.jsx)(n.p,{children:"By now, does this feel a bit more familiar?"}),"\n",(0,s.jsx)(n.p,{children:"Next, let\u2019s create a state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"get_count, set_count = use_state(0)\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is pure Python now\u2014don\u2019t tell me I\u2019m writing React anymore."}),"\n",(0,s.jsxs)(n.p,{children:["Now, we have the ",(0,s.jsx)(n.code,{children:"get_count"})," and ",(0,s.jsx)(n.code,{children:"set_count"}),' functions, and we\u2019ll write a "click event" function:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def render():\n    print(f"Clicked! Count = {get_count()}")\n\ndef handle_click():\n    set_count(get_count() + 1)\n    render()\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s simulate two clicks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"handle_click()\nhandle_click()\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Clicked! Count = 1\nClicked! Count = 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"Hmm? Isn\u2019t this exactly what we did in React just now?"}),"\n",(0,s.jsx)(n.h2,{id:"oop-vs-functional",children:"OOP vs Functional"}),"\n",(0,s.jsx)(n.p,{children:"You might ask, why doesn\u2019t React use OOP?"}),"\n",(0,s.jsxs)(n.p,{children:["Isn\u2019t using classes more intuitive? Like the ",(0,s.jsx)(n.code,{children:"Counter"})," class we just wrote in Python, the state is clear at a glance!"]}),"\n",(0,s.jsxs)(n.p,{children:["Let\u2019s revisit the previous example and see the actual difference between these two approaches when it comes to ",(0,s.jsx)(n.strong,{children:"state management"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Writing a counter in Python with OOP is like building a desktop application, where the entire component is wrapped in a class:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"self.count"})," is the state."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"handle_click"})," is the event handler."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"render"})," is the view update."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The advantage here is that the structure is clear, and the behavior is well-encapsulated."}),"\n",(0,s.jsxs)(n.p,{children:["But here\u2019s the problem: as the component grows more complex, you may need to manage multiple states (e.g., a countdown, background color, error messages, etc.), all of which are stored in ",(0,s.jsx)(n.code,{children:"self"}),". Before long, your code starts to look like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"self.count\nself.timer\nself.error_message\nself.loading\nself.is_dark_mode\nself.is_visible\nself.is_editable\nself.is_submitting\nself.is_valid\nself.is_disabled\n"})}),"\n",(0,s.jsx)(n.p,{children:"And that\u2019s when you start questioning life."}),"\n",(0,s.jsx)(n.h2,{id:"functional-thinking",children:"Functional Thinking"}),"\n",(0,s.jsx)(n.p,{children:"React uses Hooks to break state logic down into smaller functions, letting you \u201Cassemble\u201D the component\u2019s functionality."}),"\n",(0,s.jsxs)(n.p,{children:["Remember our ",(0,s.jsx)(n.code,{children:"use_state"}),"?"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"get_count, set_count = use_state(0)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, you have two functions: ",(0,s.jsx)(n.code,{children:"get_count()"})," and ",(0,s.jsx)(n.code,{children:"set_count()"}),", which you can use anywhere, without needing a class to store this information."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["This is the essence of Hooks: the state is tied there, and as long as you can access ",(0,s.jsx)(n.code,{children:"get_count()"})," or ",(0,s.jsx)(n.code,{children:"set_count()"}),", you can retrieve and update it anytime. It\u2019s like holding a hook (Hook) that you can use to grab that state and pull it out whenever you need it."]})}),"\n",(0,s.jsx)(n.p,{children:'Don\u2019t believe me? Let\u2019s try adding a feature: "remind every 5 clicks."'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"With OOP"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Counter:\n\n    def __init__(self):\n        self.count = 0\n\n    def handle_click(self):\n        self.count += 1\n        if self.count % 5 == 0:\n            print("\uD83C\uDF89 You clicked 5 times!")\n        self.render()\n\n    def render(self):\n        print(f"Clicked! Count = {self.count}")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"With Functional"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'get_count, set_count = use_state(0)\n\ndef use_celebrate_every(n):\n    def check():\n        if get_count() % n == 0 and get_count() != 0:\n            print(f"\uD83C\uDF89 You clicked {n} times!")\n    return check\n\ncelebrate = use_celebrate_every(5)\n\ndef handle_click():\n    set_count(get_count() + 1)\n    celebrate()\n    render()\n\ndef render():\n    print(f"Clicked! Count = {get_count()}")\n'})}),"\n",(0,s.jsxs)(n.p,{children:['Here, we\u2019ve separated the "reminder every n clicks" logic into its own Hook: ',(0,s.jsx)(n.code,{children:"use_celebrate_every(n)"}),', which you can use for any component that needs "periodic reminders."']}),"\n",(0,s.jsx)(n.p,{children:"This is the power of functional programming: you break down functionality into modular blocks, making it easier to decompose, recombine, and reuse."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"But functional programming does seem more complex!"}),"\n",(0,s.jsx)(n.p,{children:"Don\u2019t worry, let\u2019s look at another example."}),"\n",(0,s.jsx)(n.p,{children:"In fact, if you\u2019re just writing a simple button, OOP is far more intuitive than functional programming."}),"\n",(0,s.jsx)(n.p,{children:"But React isn\u2019t designed for you to just \u201Cwrite a button\u201D\u2014it\u2019s built to let you \u201Cassemble an entire application.\u201D"}),"\n",(0,s.jsx)(n.p,{children:"So the real question isn\u2019t, \u201CWhich is simpler?\u201D"}),"\n",(0,s.jsxs)(n.p,{children:["It\u2019s, \u201C",(0,s.jsx)(n.strong,{children:"When things get complicated, which one can still hold up?"}),"\u201D"]}),"\n",(0,s.jsx)(n.h2,{id:"think-of-it-in-a-different-scenario",children:"Think of it in a Different Scenario"}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s say you start by writing a simple component like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function LoginForm() {\n  const [username, setUsername] = useState("");\n  return (\n    <input value={username} onChange={(e) => setUsername(e.target.value)} />\n  );\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"No problem, nice and simple."}),"\n",(0,s.jsx)(n.p,{children:"But then the product manager comes along, and says:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Show a loading animation when logging in."}),"\n",(0,s.jsx)(n.li,{children:"The error message should disappear automatically after 3 seconds."}),"\n",(0,s.jsx)(n.li,{children:"Remember the user's username and store it in localStorage."}),"\n",(0,s.jsx)(n.li,{children:"Auto-focus the password field after the username is entered."}),"\n",(0,s.jsx)(n.li,{children:"Lock the account for 30 seconds after 3 consecutive failed attempts."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now you need to handle:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Loading state"}),"\n",(0,s.jsx)(n.li,{children:"Error message display and auto-clear"}),"\n",(0,s.jsx)(n.li,{children:"Side effects: localStorage operations, focus control"}),"\n",(0,s.jsx)(n.li,{children:"Time logic: account lock timer"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"what-if-you-use-oop",children:"What if You Use OOP?"}),"\n",(0,s.jsx)(n.p,{children:"You might write it like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class LoginForm:\n\n    def __init__(self):\n        self.username = ""\n        self.loading = False\n        self.error_message = ""\n        self.failed_attempts = 0\n        self.lock_until = None\n        # Then you write a bunch of methods: handle_input, handle_submit, handle_error...\n'})}),"\n",(0,s.jsx)(n.p,{children:"The states are all mixed together, and the logic is spread across ten different methods. And if something goes wrong? It\u2019ll blow up in your face."}),"\n",(0,s.jsxs)(n.p,{children:['Want to reuse the "error message disappearing after 3 seconds" behavior? Sorry, that\u2019s private to the ',(0,s.jsx)(n.code,{children:"LoginForm"})," class, so no one else can reuse it. You\u2019ll either need to rewrite the same code or directly extend that class."]}),"\n",(0,s.jsx)(n.h2,{id:"but-what-if-you-use-functional-programming",children:"But What if You Use Functional Programming?"}),"\n",(0,s.jsx)(n.p,{children:"You could break it down like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'const [username, setUsername] = useState("");\nconst [loading, setLoading] = useState(false);\nconst errorMessage = useTimedError(3000); // Error message shows for 3 seconds\nuseLocalStorage("last-username", username); // Automatically store the username\nuseAutoFocus(ref); // Auto-focus the input field\nuseLoginRateLimit(); // Limit the number of failed login attempts\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Each requirement is encapsulated into its own ",(0,s.jsx)(n.strong,{children:"Hook module"}),", with no entanglements between them."]}),"\n",(0,s.jsx)(n.p,{children:"It\u2019s like putting together building blocks, rather than untying knots."}),"\n",(0,s.jsx)(n.p,{children:"Doesn\u2019t that feel much easier?"}),"\n",(0,s.jsx)(n.h2,{id:"why-give-up-oop",children:"Why Give Up OOP?"}),"\n",(0,s.jsxs)(n.p,{children:["In fact, React initially did have ",(0,s.jsx)(n.code,{children:"class"})," components. You might still remember writing this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"class Counter extends React.Component {\n  state = { count: 0 };\n  handleClick = () => this.setState({ count: this.state.count + 1 });\n  render() {\n    return (\n      <button onClick={this.handleClick}>Count = {this.state.count}</button>\n    );\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["But once you have a need for ",(0,s.jsx)(n.strong,{children:"shared logic"})," (like form validation, detecting device sizes, making API requests, etc.), these behaviors can\u2019t be broken down into reusable modules. You\u2019re forced to use ",(0,s.jsx)(n.strong,{children:"higher-order components"})," or ",(0,s.jsx)(n.strong,{children:"pass functions into functional components"})," to break things apart. The result? The code gets messier and messier, and you end up feeling like you're writing Java."]}),"\n",(0,s.jsx)(n.p,{children:"No offense to Java, of course."}),"\n",(0,s.jsx)(n.h2,{id:"so",children:"So"}),"\n",(0,s.jsx)(n.p,{children:"You say functional programming looks complicated? Yes, at first it is."}),"\n",(0,s.jsx)(n.p,{children:"But the complexity of a single button is not the same as the complexity of a complete application."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'The design of Hooks is not meant to make "getting started easier," but to ensure that "it doesn\'t break when things scale up."'})}),"\n",(0,s.jsx)(n.p,{children:'When you\u2019ve written the 8th component that needs "auto-save," "error handling," and "window detection," you\u2019ll be glad you used Hooks, rather than cramming everything into a weird object.'})]})}function d(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return a}});var i=t(67294);let s={},o=i.createContext(s);function a(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},17793:function(e){e.exports=JSON.parse('{"permalink":"/en/blog/react-hook-vs-python","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025/04-17-react-hook-vs-python/index.md","title":"What exactly is React Hook hooking?","description":"Deconstructing the concepts behind React Hook.","date":"2025-04-17T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/en/blog/tags/react"},{"inline":true,"label":"hook","permalink":"/en/blog/tags/hook"}],"readingTime":6.69,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"react-hook-vs-python","title":"What exactly is React Hook hooking?","authors":"Z. Yuan","image":"/en/img/2025/0417.jpg","tags":["react","hook"],"description":"Deconstructing the concepts behind React Hook."},"unlisted":false,"prevItem":{"title":"What is Closure?","permalink":"/en/blog/closure-in-python"},"nextItem":{"title":"Your Terminal Shouldn\'t Just Be Black and White","permalink":"/en/blog/colorful-cli-with-ansi-escape-codes"}}')}}]);