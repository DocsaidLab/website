"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["28374"],{54771:function(n,e,r){r.r(e),r.d(e,{assets:function(){return l},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return t},metadata:function(){return i},toc:function(){return c}});var i=r(23010),s=r(85893),o=r(50065);let t={slug:"python-env-info-collector",title:"\u30E2\u30C7\u30EB\u8A13\u7DF4\u74B0\u5883\u306E\u554F\u984C\u3092\u8A18\u9332\u3057\u3066\u30C8\u30E9\u30D6\u30EB\u30B7\u30E5\u30FC\u30C6\u30A3\u30F3\u30B0",authors:"Z. Yuan",tags:["python","training-log"],image:"/ja/img/2023/0922.webp",description:"\u81EA\u4F5C\u306E\u8A18\u9332\u30C4\u30FC\u30EB\u3092\u30B7\u30A7\u30A2\u3057\u307E\u3059\u3002"},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"\u6982\u8981",id:"\u6982\u8981",level:2},{value:"\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",id:"\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",level:2},{value:"<code>get_package_versions</code> \u306E\u4F7F\u7528",id:"get_package_versions-\u306E\u4F7F\u7528",level:2},{value:"<code>get_gpu_cuda_versions</code> \u306E\u4F7F\u7528",id:"get_gpu_cuda_versions-\u306E\u4F7F\u7528",level:2},{value:"<code>get_system_info</code> \u306E\u4F7F\u7528",id:"get_system_info-\u306E\u4F7F\u7528",level:2},{value:"\u6CE8\u610F\u70B9\u3068\u4EE3\u66FF\u6848",id:"\u6CE8\u610F\u70B9\u3068\u4EE3\u66FF\u6848",level:2},{value:"\u30B3\u30FC\u30C9",id:"\u30B3\u30FC\u30C9",level:2}];function d(n){let e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"\u81EA\u4F5C\u306EPython\u30C4\u30FC\u30EB\u3092\u30B7\u30A7\u30A2\u3057\u307E\u3059\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u3053\u306E\u30C4\u30FC\u30EB\u306F\u3001\u30E2\u30C7\u30EB\u8A13\u7DF4\u306B\u95A2\u9023\u3059\u308B\u60C5\u5831\u3092\u7C21\u5358\u306B\u78BA\u8A8D\u3059\u308B\u305F\u3081\u306E\u3082\u306E\u3067\u3001\u5168\u6A5F\u80FD\u304C\u7DB2\u7F85\u3055\u308C\u3066\u3044\u308B\u308F\u3051\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u304C\u3001\u57FA\u672C\u7684\u306A\u30C8\u30E9\u30D6\u30EB\u30B7\u30E5\u30FC\u30C6\u30A3\u30F3\u30B0\u306B\u306F\u5341\u5206\u3067\u3059\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,s.jsx)(e.p,{children:"\u30E2\u30C7\u30EB\u306E\u8A13\u7DF4\u304C\u3046\u307E\u304F\u3044\u304B\u306A\u304B\u3063\u305F\u5834\u5408\u3001\u539F\u56E0\u3092\u7279\u5B9A\u3059\u308B\u305F\u3081\u306B\u8A13\u7DF4\u30DB\u30B9\u30C8\u306E\u74B0\u5883\u60C5\u5831\u3092\u30C1\u30A7\u30C3\u30AF\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002\u4F8B\u3048\u3070\u3001Python\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3001PyTorch\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3001CUDA\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3001GPU\u60C5\u5831\u3001CPU\u60C5\u5831\u3001RAM\u60C5\u5831\u3001\u30C7\u30A3\u30B9\u30AF\u60C5\u5831\u3001IP\u30A2\u30C9\u30EC\u30B9\u306A\u3069\u3067\u3059\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u9762\u5012\u3067\u3059\u306D\uFF01"}),"\n",(0,s.jsx)(e.p,{children:"\u305D\u3053\u3067\u3001\u554F\u984C\u3092\u89E3\u6C7A\u3059\u308B\u305F\u3081\u306E\u30D7\u30ED\u30B0\u30E9\u30E0\u3092\u3044\u304F\u3064\u304B\u66F8\u304D\u307E\u3057\u305F\u3002\u4E00\u822C\u7684\u306B\u306F\u3001\u8A13\u7DF4\u958B\u59CB\u6642\u306B\u74B0\u5883\u60C5\u5831\u3092\u8A13\u7DF4\u30ED\u30B0\u306B\u8A18\u9332\u3057\u3066\u304A\u3051\u3070\u3001\u30E2\u30C7\u30EB\u304C\u58CA\u308C\u305F\u3068\u304D\u306B\u3059\u3050\u306B\u78BA\u8A8D\u3067\u304D\u307E\u3059\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",children:"\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB"}),"\n",(0,s.jsx)(e.p,{children:"\u5FC5\u8981\u306A\u30D1\u30C3\u30B1\u30FC\u30B8\u3092\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3057\u307E\u3059\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"pip install psutil requests\n"})}),"\n",(0,s.jsxs)(e.admonition,{type:"tip",children:[(0,s.jsx)(e.p,{children:"\u5B8C\u5168\u306A\u30B3\u30FC\u30C9\u306FGitHub\u306B\u3042\u308A\u307E\u3059\u3002\u3053\u306E\u8A18\u4E8B\u306E\u6700\u5F8C\u306B\u3082\u30EA\u30F3\u30AF\u3092\u63B2\u8F09\u3057\u307E\u3059\u3002"}),(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/DocsaidLab/Capybara/blob/main/capybara/utils/system_info.py",children:(0,s.jsx)(e.strong,{children:"system_info.py"})})}),"\n"]})]}),"\n",(0,s.jsxs)(e.h2,{id:"get_package_versions-\u306E\u4F7F\u7528",children:[(0,s.jsx)(e.code,{children:"get_package_versions"})," \u306E\u4F7F\u7528"]}),"\n",(0,s.jsxs)(e.p,{children:["\u79C1\u306F\u3053\u306E\u30C4\u30FC\u30EB\u3092 ",(0,s.jsx)(e.code,{children:"capybara-docsaid"})," \u306B\u7D71\u5408\u3057\u307E\u3057\u305F\u3002\u76F4\u63A5\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3057\u3066\u4F7F\u3046\u3053\u3068\u3082\u3067\u304D\u307E\u3059\uFF1A"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"pip install capybara-docsaid\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u5F8C\u3001Python\u30D7\u30ED\u30B0\u30E9\u30E0\u5185\u3067\u95A2\u6570\u3092\u547C\u3073\u51FA\u3057\u307E\u3059\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="get_package_versions.py"',children:"from capybara import get_package_versions\n\nget_package_versions()\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u5B9F\u884C\u5F8C\u3001\u4EE5\u4E0B\u306E\u7D50\u679C\u304C\u5F97\u3089\u308C\u307E\u3059\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "PyTorch Version": "2.1.1+cu121",\n  "PyTorch Lightning Version": "2.1.2",\n  "TensorFlow Error": "No module named \'tensorflow\'",\n  "Keras Error": "No module named \'keras\'",\n  "NumPy Version": "1.24.4",\n  "Pandas Version": "2.0.3",\n  "Scikit-learn Version": "1.3.2",\n  "OpenCV Version": "4.8.1"\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"PyTorch Version: PyTorch\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n",(0,s.jsx)(e.li,{children:"PyTorch Lightning Version: PyTorch Lightning\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n",(0,s.jsx)(e.li,{children:"TensorFlow Error: TensorFlow\u306E\u30A8\u30E9\u30FC\uFF08\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3055\u308C\u3066\u3044\u306A\u3044\u5834\u5408\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"Keras Error: Keras\u306E\u30A8\u30E9\u30FC\uFF08\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3055\u308C\u3066\u3044\u306A\u3044\u5834\u5408\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"NumPy Version: NumPy\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n",(0,s.jsx)(e.li,{children:"Pandas Version: Pandas\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n",(0,s.jsx)(e.li,{children:"Scikit-learn Version: Scikit-learn\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n",(0,s.jsx)(e.li,{children:"OpenCV Version: OpenCV\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"get_gpu_cuda_versions-\u306E\u4F7F\u7528",children:[(0,s.jsx)(e.code,{children:"get_gpu_cuda_versions"})," \u306E\u4F7F\u7528"]}),"\n",(0,s.jsx)(e.p,{children:"\u6B21\u306B\u3001CUDA\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3092\u8A18\u9332\u3059\u308B\u30D7\u30ED\u30B0\u30E9\u30E0\u3067\u3059\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="get_gpu_cuda_versions.py"',children:"from capybara import get_gpu_cuda_versions\n\nget_gpu_cuda_versions()\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u5B9F\u884C\u5F8C\u3001\u4EE5\u4E0B\u306E\u7D50\u679C\u304C\u5F97\u3089\u308C\u307E\u3059\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "CUDA Version": "12.1",\n  "NVIDIA Driver Version": "535.129.03"\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"CUDA Version: CUDA\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n",(0,s.jsx)(e.li,{children:"NVIDIA Driver Version: NVIDIA\u30C9\u30E9\u30A4\u30D0\u30FC\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"get_system_info-\u306E\u4F7F\u7528",children:[(0,s.jsx)(e.code,{children:"get_system_info"})," \u306E\u4F7F\u7528"]}),"\n",(0,s.jsx)(e.p,{children:"\u6B21\u306B\u3001\u57FA\u672C\u7684\u306A\u30B7\u30B9\u30C6\u30E0\u60C5\u5831\u3092\u53D6\u5F97\u3059\u308B\u30D7\u30ED\u30B0\u30E9\u30E0\u3067\u3059\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:'title="get_system_info.py"',children:"from capybara import get_system_info\n\nget_system_info()\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u5B9F\u884C\u5F8C\u3001\u4EE5\u4E0B\u306E\u7D50\u679C\u304C\u5F97\u3089\u308C\u307E\u3059\uFF1A"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "OS Version": "Linux-6.2.0-37-generic-x86_64-with-glibc2.34",\n  "CPU Model": "13th Gen Intel(R) Core(TM) i9-13900K",\n  "Physical CPU Cores": 24,\n  "Logical CPU Cores (incl. hyper-threading)": 32,\n  "Total RAM (GB)": 125.56,\n  "Available RAM (GB)": 110.9,\n  "Disk Total (GB)": 1832.21,\n  "Disk Used (GB)": 188.94,\n  "Disk Free (GB)": 1550.12,\n  "GPU Info": "NVIDIA GeForce RTX 4090",\n  "IPV4 Address": ["192.168.---.---"],\n  "IPV4 Address (External)": "---.---.---.---",\n  "MAC Address": ["--.--.--.--.--.--"]\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"OS Version: OS\u306E\u30D0\u30FC\u30B8\u30E7\u30F3"}),"\n",(0,s.jsx)(e.li,{children:"CPU Model: CPU\u306E\u30E2\u30C7\u30EB"}),"\n",(0,s.jsx)(e.li,{children:"Physical CPU Cores: \u7269\u7406\u7684\u306ACPU\u30B3\u30A2\u6570"}),"\n",(0,s.jsx)(e.li,{children:"Logical CPU Cores (incl. hyper-threading): \u8AD6\u7406\u7684\u306ACPU\u30B3\u30A2\u6570\uFF08\u30CF\u30A4\u30D1\u30FC\u30B9\u30EC\u30C3\u30C7\u30A3\u30F3\u30B0\u3092\u542B\u3080\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"Total RAM (GB): \u7DCFRAM\u5BB9\u91CF\uFF08GB\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"Available RAM (GB): \u5229\u7528\u53EF\u80FD\u306ARAM\u5BB9\u91CF\uFF08GB\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"Disk Total (GB): \u30C7\u30A3\u30B9\u30AF\u7DCF\u5BB9\u91CF\uFF08GB\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"Disk Used (GB): \u4F7F\u7528\u4E2D\u306E\u30C7\u30A3\u30B9\u30AF\u5BB9\u91CF\uFF08GB\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"Disk Free (GB): \u7A7A\u304D\u30C7\u30A3\u30B9\u30AF\u5BB9\u91CF\uFF08GB\uFF09"}),"\n",(0,s.jsx)(e.li,{children:"GPU Info: GPU\u306E\u60C5\u5831"}),"\n",(0,s.jsx)(e.li,{children:"IPV4 Address: \u5185\u90E8IPV4\u30A2\u30C9\u30EC\u30B9"}),"\n",(0,s.jsx)(e.li,{children:"IPV4 Address (External): \u5916\u90E8IPV4\u30A2\u30C9\u30EC\u30B9"}),"\n",(0,s.jsx)(e.li,{children:"MAC Address: MAC\u30A2\u30C9\u30EC\u30B9"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u6CE8\u610F\u70B9\u3068\u4EE3\u66FF\u6848",children:"\u6CE8\u610F\u70B9\u3068\u4EE3\u66FF\u6848"}),"\n",(0,s.jsx)(e.p,{children:"\u79C1\u306E\u30B7\u30B9\u30C6\u30E0\u74B0\u5883\u306FUbuntu\u3067\u3059\u304C\u3001\u4ED6\u306EOS\u3067\u5B9F\u884C\u3059\u308B\u5834\u5408\u3001\u52D5\u4F5C\u304C\u7570\u306A\u308B\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u4EE5\u4E0B\u306E\u70B9\u306B\u6CE8\u610F\u3057\u3066\u304F\u3060\u3055\u3044\uFF1A"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["OS\u306E\u5236\u9650\u306B\u3088\u308A\u3001\u4E00\u90E8\u306E\u95A2\u6570\u306F\u3059\u3079\u3066\u306E\u30D7\u30E9\u30C3\u30C8\u30D5\u30A9\u30FC\u30E0\u3067\u52D5\u4F5C\u3057\u306A\u3044\u5834\u5408\u304C\u3042\u308A\u307E\u3059\u3002\u4F8B\u3048\u3070\u3001",(0,s.jsx)(e.code,{children:"get_cpu_info"}),"\u306FWindows\u4E0A\u3067\u306F\u5B8C\u5168\u306ACPU\u30E2\u30C7\u30EB\u3092\u8868\u793A\u3057\u307E\u305B\u3093\u3002\u305D\u306E\u5834\u5408\u306F\u3001\u4ED6\u306E\u30C4\u30FC\u30EB\u3092\u4F7F\u7528\u3059\u308B\u304B\u3001\u624B\u52D5\u3067\u60C5\u5831\u3092\u53D6\u5F97\u3059\u308B\u3053\u3068\u3092\u691C\u8A0E\u3057\u3066\u304F\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(e.li,{children:["Windows\u74B0\u5883\u3067\u306F\u3001",(0,s.jsx)(e.code,{children:"nvidia-smi"}),"\u3092\u4F7F\u3063\u3066GPU\u60C5\u5831\u3092\u76F4\u63A5\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3002NVIDIA\u30C9\u30E9\u30A4\u30D0\u30FC\u3068\u95A2\u9023\u30C4\u30FC\u30EB\u3092\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3057\u3001\u30B3\u30DE\u30F3\u30C9\u30D7\u30ED\u30F3\u30D7\u30C8\u3067\u5B9F\u884C\u3059\u308B\u3053\u3068\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002"]}),"\n",(0,s.jsxs)(e.li,{children:["\u5916\u90E8IP\u30A2\u30C9\u30EC\u30B9\u306F",(0,s.jsx)(e.code,{children:"https://httpbin.org/ip"}),"\u304B\u3089\u53D6\u5F97\u3055\u308C\u308B\u305F\u3081\u3001\u30A4\u30F3\u30BF\u30FC\u30CD\u30C3\u30C8\u63A5\u7D9A\u304C\u5FC5\u8981\u3067\u3059\u3002"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"\u30B3\u30FC\u30C9",children:"\u30B3\u30FC\u30C9"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",metastring:"showLineNumbers",children:'import platform\nimport socket\nimport subprocess\n\nimport psutil\nimport requests\n\n\ndef get_package_versions():\n    """\n    Get versions of commonly used packages in deep learning and data science.\n\n    Returns:\n        dict: Dictionary containing versions of installed packages.\n    """\n    versions_info = {}\n\n    # PyTorch\n    try:\n        import torch\n        versions_info["PyTorch Version"] = torch.__version__\n    except Exception as e:\n        versions_info["PyTorch Error"] = str(e)\n\n    # PyTorch Lightning\n    try:\n        import pytorch_lightning as pl\n        versions_info["PyTorch Lightning Version"] = pl.__version__\n    except Exception as e:\n        versions_info["PyTorch Lightning Error"] = str(e)\n\n    # TensorFlow\n    try:\n        import tensorflow as tf\n        versions_info["TensorFlow Version"] = tf.__version__\n    except Exception as e:\n        versions_info["TensorFlow Error"] = str(e)\n\n    # Keras\n    try:\n        import keras\n        versions_info["Keras Version"] = keras.__version__\n    except Exception as e:\n        versions_info["Keras Error"] = str(e)\n\n    # NumPy\n    try:\n        import numpy as np\n        versions_info["NumPy Version"] = np.__version__\n    except Exception as e:\n        versions_info["NumPy Error"] = str(e)\n\n    # Pandas\n    try:\n        import pandas as pd\n        versions_info["Pandas Version"] = pd.__version__\n    except Exception as e:\n        versions_info["Pandas Error"] = str(e)\n\n    # Scikit-learn\n    try:\n        import sklearn\n        versions_info["Scikit-learn Version"] = sklearn.__version__\n    except Exception as e:\n        versions_info["Scikit-learn Error"] = str(e)\n\n    # OpenCV\n    try:\n        import cv2\n        versions_info["OpenCV Version"] = cv2.__version__\n    except Exception as e:\n        versions_info["OpenCV Error"] = str(e)\n\n    # ... and so on for any other packages you"re interested in\n\n    return versions_info\n\n\ndef get_gpu_cuda_versions():\n    """\n    Get GPU and CUDA versions using popular Python libraries.\n\n    Returns:\n        dict: Dictionary containing CUDA and GPU driver versions.\n    """\n\n    cuda_version = None\n\n    # Attempt to retrieve CUDA version using PyTorch\n    try:\n        import torch\n        cuda_version = torch.version.cuda\n    except ImportError:\n        pass\n\n    # If not retrieved via PyTorch, try using TensorFlow\n    if not cuda_version:\n        try:\n            import tensorflow as tf\n            cuda_version = tf.version.COMPILER_VERSION\n        except ImportError:\n            pass\n\n    # If still not retrieved, try using CuPy\n    if not cuda_version:\n        try:\n            import cupy\n            cuda_version = cupy.cuda.runtime.runtimeGetVersion()\n        except ImportError:\n            cuda_version = "Error: None of PyTorch, TensorFlow, or CuPy are installed."\n\n    # Try to get Nvidia driver version using nvidia-smi command\n    try:\n        smi_output = subprocess.check_output([\n            "nvidia-smi",\n            "--query-gpu=driver_version",\n            "--format=csv,noheader,nounits"\n        ]).decode("utf-8").strip()\n        nvidia_driver_version = smi_output.split("\\n")[0]\n    except Exception as e:\n        nvidia_driver_version = f"Error getting NVIDIA driver version: {e}"\n\n    return {\n        "CUDA Version": cuda_version,\n        "NVIDIA Driver Version": nvidia_driver_version\n    }\n\n\ndef get_cpu_info():\n    """\n    Retrieve the CPU model name based on the platform.\n\n    Returns:\n        str: CPU model name or "N/A" if not found.\n    """\n    if platform.system() == "Windows":\n        return platform.processor()\n    elif platform.system() == "Darwin":\n        # For macOS\n        command = "sysctl -n machdep.cpu.brand_string"\n        return subprocess.check_output(command, shell=True).strip().decode()\n    elif platform.system() == "Linux":\n        # For Linux\n        command = "cat /proc/cpuinfo | grep "model name" | uniq"\n        return subprocess.check_output(command, shell=True).strip().decode().split(":")[1].strip()\n    else:\n        return "N/A"\n\n\ndef get_external_ip():\n    try:\n        response = requests.get("https://httpbin.org/ip")\n        return response.json()["origin"]\n    except Exception as e:\n        return f"Error obtaining IP: {e}"\n\n\ndef get_system_info():\n    """\n    Fetch system information like OS version, CPU info, RAM, Disk usage, etc.\n\n    Returns:\n        dict: Dictionary containing system information.\n    """\n    info = {\n        "OS Version": platform.platform(),\n        "CPU Model": get_cpu_info(),\n        "Physical CPU Cores": psutil.cpu_count(logical=False),\n        "Logical CPU Cores (incl. hyper-threading)": psutil.cpu_count(logical=True),\n        "Total RAM (GB)": round(psutil.virtual_memory().total / (1024 ** 3), 2),\n        "Available RAM (GB)": round(psutil.virtual_memory().available / (1024 ** 3), 2),\n        "Disk Total (GB)": round(psutil.disk_usage("/").total / (1024 ** 3), 2),\n        "Disk Used (GB)": round(psutil.disk_usage("/").used / (1024 ** 3), 2),\n        "Disk Free (GB)": round(psutil.disk_usage("/").free / (1024 ** 3), 2)\n    }\n\n    # Try to fetch GPU information using nvidia-smi command\n    try:\n        gpu_info = subprocess.check_output(\n            ["nvidia-smi", "--query-gpu=name", "--format=csv,noheader,nounits"]\n        ).decode("utf-8").strip()\n        info["GPU Info"] = gpu_info\n    except Exception:\n        info["GPU Info"] = "N/A or Error"\n\n    # Get network information\n    addrs = psutil.net_if_addrs()\n    info["IPV4 Address"] = [\n        addr.address for addr in addrs.get("enp5s0", []) if addr.family == socket.AF_INET\n    ]\n\n    info["IPV4 Address (External)"] = get_external_ip()\n\n    # Determine platform and choose correct address family for MAC\n    if hasattr(socket, "AF_LINK"):\n        AF_LINK = socket.AF_LINK\n    elif hasattr(psutil, "AF_LINK"):\n        AF_LINK = psutil.AF_LINK\n    else:\n        raise Exception(\n            "Cannot determine the correct AF_LINK value for this platform.")\n\n    info["MAC Address"] = [\n        addr.address for addr in addrs.get("enp5s0", []) if addr.family == AF_LINK\n    ]\n\n    return info\n'})})]})}function p(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},50065:function(n,e,r){r.d(e,{Z:function(){return a},a:function(){return t}});var i=r(67294);let s={},o=i.createContext(s);function t(n){let e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),i.createElement(o.Provider,{value:e},n.children)}},23010:function(n){n.exports=JSON.parse('{"permalink":"/ja/blog/python-env-info-collector","source":"@site/i18n/ja/docusaurus-plugin-content-blog/2023/09-22-python-env-info-collector/index.md","title":"\u30E2\u30C7\u30EB\u8A13\u7DF4\u74B0\u5883\u306E\u554F\u984C\u3092\u8A18\u9332\u3057\u3066\u30C8\u30E9\u30D6\u30EB\u30B7\u30E5\u30FC\u30C6\u30A3\u30F3\u30B0","description":"\u81EA\u4F5C\u306E\u8A18\u9332\u30C4\u30FC\u30EB\u3092\u30B7\u30A7\u30A2\u3057\u307E\u3059\u3002","date":"2023-09-22T00:00:00.000Z","tags":[{"inline":true,"label":"python","permalink":"/ja/blog/tags/python"},{"inline":true,"label":"training-log","permalink":"/ja/blog/tags/training-log"}],"readingTime":7.73,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"python-env-info-collector","title":"\u30E2\u30C7\u30EB\u8A13\u7DF4\u74B0\u5883\u306E\u554F\u984C\u3092\u8A18\u9332\u3057\u3066\u30C8\u30E9\u30D6\u30EB\u30B7\u30E5\u30FC\u30C6\u30A3\u30F3\u30B0","authors":"Z. Yuan","tags":["python","training-log"],"image":"/ja/img/2023/0922.webp","description":"\u81EA\u4F5C\u306E\u8A18\u9332\u30C4\u30FC\u30EB\u3092\u30B7\u30A7\u30A2\u3057\u307E\u3059\u3002"},"unlisted":false,"prevItem":{"title":"pyenv\u3067Python\u30D0\u30FC\u30B8\u30E7\u30F3\u3092\u7BA1\u7406\u3059\u308B","permalink":"/ja/blog/pyenv-installation"},"nextItem":{"title":"PyPiServer\u306E\u30BB\u30C3\u30C8\u30A2\u30C3\u30D7\u8A18\u9332","permalink":"/ja/blog/setting-up-pypiserver-on-ubuntu-with-docker"}}')}}]);