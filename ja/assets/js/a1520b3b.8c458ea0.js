"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["81713"],{14101:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return a}});var s=t(60084),i=t(85893),r=t(50065);let o={slug:"impl-normalized-levenshtein-similarity",title:"ANLS \u306E\u5B9F\u88C5",authors:"Z. Yuan",image:"/ja/img/2024/0516.webp",tags:["pytorch","anls"],description:"Average Normalized Levenshtein Similarity"},l=void 0,c={authorsImageUrls:[void 0]},a=[{value:"\u53C2\u8003\u8CC7\u6599",id:"\u53C2\u8003\u8CC7\u6599",level:2},{value:"\u5FC5\u8981\u306A\u30E9\u30A4\u30D6\u30E9\u30EA\u306E\u5C0E\u5165",id:"\u5FC5\u8981\u306A\u30E9\u30A4\u30D6\u30E9\u30EA\u306E\u5C0E\u5165",level:2},{value:"\u6A19\u6E96\u5316\u6A5F\u80FD\u306E\u5B9F\u88C5",id:"\u6A19\u6E96\u5316\u6A5F\u80FD\u306E\u5B9F\u88C5",level:2},{value:"<code>reduction</code> \u30D1\u30E9\u30E1\u30FC\u30BF\u306E\u5B9F\u88C5",id:"reduction-\u30D1\u30E9\u30E1\u30FC\u30BF\u306E\u5B9F\u88C5",level:2},{value:"\u5B8C\u5168\u306A\u5B9F\u88C5",id:"\u5B8C\u5168\u306A\u5B9F\u88C5",level:2},{value:"\u6700\u5F8C\u306B",id:"\u6700\u5F8C\u306B",level:2}];function d(n){let e={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Average Normalized Levenshtein Similarity"}),"\uFF08\u7565\u3057\u3066 ANLS\uFF09\u306F\u30012 \u3064\u306E\u6587\u5B57\u5217\u9593\u306E\u985E\u4F3C\u5EA6\u3092\u6E2C\u5B9A\u3059\u308B\u6307\u6A19\u3067\u3059\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Levenshtein Similarity"}),"\uFF08\u4EE5\u4E0B\u3001LS \u3068\u547C\u3073\u307E\u3059\uFF09\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u81EA\u7136\u8A00\u8A9E\u51E6\u7406\uFF08NLP\uFF09\u306E\u5206\u91CE\u3067\u306F\u30012 \u3064\u306E\u6587\u5B57\u5217\u306E\u985E\u4F3C\u5EA6\u3092\u6BD4\u8F03\u3059\u308B\u3053\u3068\u304C\u983B\u7E41\u306B\u6C42\u3081\u3089\u308C\u307E\u3059\u3002LS \u306F\u4E00\u822C\u7684\u306A\u6E2C\u5B9A\u65B9\u6CD5\u3067\u3042\u308A\u30011 \u3064\u306E\u6587\u5B57\u5217\u3092\u4ED6\u306E\u6587\u5B57\u5217\u306B\u5909\u63DB\u3059\u308B\u305F\u3081\u306B\u5FC5\u8981\u306A\u300C",(0,i.jsx)(e.strong,{children:"\u7DE8\u96C6\u8DDD\u96E2"}),"\u300D\u3092\u8A55\u4FA1\u3057\u307E\u3059\u3002\u7DE8\u96C6\u8DDD\u96E2\u3068\u306F\u3001\u633F\u5165\u3001\u524A\u9664\u3001\u7F6E\u63DB\u306E\u64CD\u4F5C\u56DE\u6570\u3092\u6307\u3057\u307E\u3059\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u3057\u304B\u3057\u3001LS \u81EA\u4F53\u306F\u76F4\u611F\u7684\u3067\u306F\u306A\u304F\u3001\u6587\u5B57\u5217\u306E\u9577\u3055\u306B\u4F9D\u5B58\u3057\u307E\u3059\u3002\u3053\u306E\u554F\u984C\u3092\u89E3\u6C7A\u3059\u308B\u305F\u3081\u306B\u3001LS \u3092 [0, 1] \u306E\u7BC4\u56F2\u306B\u6A19\u6E96\u5316\u3059\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\u3053\u306E\u6A19\u6E96\u5316\u3057\u305F\u3082\u306E\u304C ",(0,i.jsx)(e.strong,{children:"Normalized Levenshtein Similarity"}),"\uFF08NLS\uFF09\u3068\u547C\u3070\u308C\u3001\u7570\u306A\u308B\u6587\u5B57\u5217\u9593\u306E\u985E\u4F3C\u5EA6\u3092\u7406\u89E3\u3057\u3084\u3059\u304F\u6BD4\u8F03\u53EF\u80FD\u306B\u306A\u308A\u307E\u3059\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u3055\u3089\u306B\u3001NLS \u306F\u8907\u6570\u306E\u6587\u5B57\u5217\u30DA\u30A2\u9593\u306E\u985E\u4F3C\u5EA6\u3092\u6271\u3046\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\u3053\u306E\u62E1\u5F35\u7248\u304C ",(0,i.jsx)(e.strong,{children:"ANLS"})," \u3067\u3042\u308A\u3001\u8907\u6570\u306E\u6587\u5B57\u5217\u30DA\u30A2\u9593\u306E\u5E73\u5747\u985E\u4F3C\u5EA6\u3092\u8A08\u7B97\u3057\u3066\u3001\u30E2\u30C7\u30EB\u306E\u6027\u80FD\u3092\u8A55\u4FA1\u3059\u308B\u6307\u6A19\u3068\u306A\u308A\u307E\u3059\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u305D\u308C\u3067\u2026\u2026"}),"\n",(0,i.jsx)(e.p,{children:"\u65E2\u5B58\u306E\u5B9F\u88C5\u304C\u6E80\u8DB3\u3067\u304D\u308B\u3082\u306E\u3067\u306F\u306A\u304B\u3063\u305F\u305F\u3081\u3001\u81EA\u5206\u3067\u5B9F\u88C5\u3059\u308B\u3053\u3068\u306B\u3057\u307E\u3057\u305F\u3002"}),"\n",(0,i.jsx)(e.h2,{id:"\u53C2\u8003\u8CC7\u6599",children:"\u53C2\u8003\u8CC7\u6599"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://lightning.ai/docs/torchmetrics/stable/text/edit.html",children:(0,i.jsx)(e.strong,{children:"torchmetrics.text.EditDistance"})})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u5FC5\u8981\u306A\u30E9\u30A4\u30D6\u30E9\u30EA\u306E\u5C0E\u5165",children:"\u5FC5\u8981\u306A\u30E9\u30A4\u30D6\u30E9\u30EA\u306E\u5C0E\u5165"}),"\n",(0,i.jsxs)(e.p,{children:["\u307E\u305A\u3001\u5FC5\u8981\u306A\u30E9\u30A4\u30D6\u30E9\u30EA\u3092\u30A4\u30F3\u30DD\u30FC\u30C8\u3057\u307E\u3059\u3002\u7279\u306B\u3001",(0,i.jsx)(e.code,{children:"torchmetrics"})," \u306E ",(0,i.jsx)(e.code,{children:"EditDistance"})," \u3092\u4F7F\u7528\u3057\u307E\u3059\uFF1A"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from typing import Any, Literal, Optional, Sequence, Union\n\nimport torch\nfrom torch import Tensor\nfrom torchmetrics.metric import Metric\nfrom torchmetrics.text import EditDistance\nfrom torchmetrics.utilities.data import dim_zero_cat\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"EditDistance"})," \u306F\u3059\u3067\u306B Levenshtein \u8DDD\u96E2\u3092\u8A08\u7B97\u3067\u304D\u307E\u3059\u3002\u305D\u306E\u305F\u3081\u30012 \u3064\u306E\u6587\u5B57\u5217\u9593\u306E\u7DE8\u96C6\u8DDD\u96E2\u3092\u76F4\u63A5\u6C42\u3081\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002\u305F\u3060\u3057\u3001",(0,i.jsx)(e.code,{children:"EditDistance"})," \u81EA\u4F53\u306B\u306F\u6A19\u6E96\u5316\u6A5F\u80FD\u304C\u306A\u3044\u305F\u3081\u3001\u3053\u306E\u90E8\u5206\u306F\u81EA\u5206\u3067\u5B9F\u88C5\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002"]}),"\n",(0,i.jsx)(e.h2,{id:"\u6A19\u6E96\u5316\u6A5F\u80FD\u306E\u5B9F\u88C5",children:"\u6A19\u6E96\u5316\u6A5F\u80FD\u306E\u5B9F\u88C5"}),"\n",(0,i.jsxs)(e.p,{children:["\u3053\u3053\u3067\u306F\u3001",(0,i.jsx)(e.code,{children:"torchmetrics.metric.Metric"})," \u306E\u30A4\u30F3\u30BF\u30FC\u30D5\u30A7\u30FC\u30B9\u3092\u7D99\u627F\u3057\u307E\u3059\u3002\u305D\u306E\u305F\u3081\u3001",(0,i.jsx)(e.code,{children:"update"})," \u30E1\u30BD\u30C3\u30C9\u3068 ",(0,i.jsx)(e.code,{children:"compute"})," \u30E1\u30BD\u30C3\u30C9\u3092\u5B9F\u88C5\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\uFF1A"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class NormalizedLevenshteinSimilarity(Metric):\n\n    def __init__(\n        self,\n        substitution_cost: int = 1,\n        reduction: Optional[Literal["mean", "sum", "none"]] = "mean",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(**kwargs)\n        self.edit_distance = EditDistance(\n            substitution_cost=substitution_cost,\n            reduction=None  # \u3059\u3079\u3066\u306E\u6587\u5B57\u5217\u30DA\u30A2\u306B\u5BFE\u3059\u308B\u8DDD\u96E2\u3092\u53D6\u5F97\u3059\u308B\u8A2D\u5B9A\n        )\n\n        # ...\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u3044\u304F\u3064\u304B\u306E\u30DD\u30A4\u30F3\u30C8\u304C\u3042\u308A\u307E\u3059\uFF1A"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\u5165\u529B\u3055\u308C\u305F ",(0,i.jsx)(e.code,{children:"preds"})," \u3068 ",(0,i.jsx)(e.code,{children:"target"})," \u304C\u6587\u5B57\u5217\u306E\u30EA\u30B9\u30C8\u3067\u3042\u308B\u3053\u3068\u3092\u78BA\u8A8D\u3057\u307E\u3059\u3002\u305D\u3046\u3057\u306A\u3044\u3068\u3001\u95A2\u6570\u304C\u300C\u6587\u5B57\u300D\u5358\u4F4D\u3067\u8A08\u7B97\u3092\u884C\u3046\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002"]}),"\n",(0,i.jsx)(e.li,{children:"\u5404\u6587\u5B57\u5217\u306E\u6700\u5927\u9577\u3092\u8A08\u7B97\u3057\u3066\u3001\u6A19\u6E96\u5316\u306B\u4F7F\u7528\u3057\u307E\u3059\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def update(self, preds: Union[str, Sequence[str]], target: Union[str, Sequence[str]]) -> None:\n    """\u4E88\u6E2C\u5024\u3068\u30BF\u30FC\u30B2\u30C3\u30C8\u3067\u72B6\u614B\u3092\u66F4\u65B0\u3057\u307E\u3059\u3002"""\n\n    if isinstance(preds, str):\n        preds = [preds]\n    if isinstance(target, str):\n        target = [target]\n\n    distances = self.edit_distance(preds, target)\n    max_lengths = torch.tensor([\n        max(len(p), len(t))\n        for p, t in zip(preds, target)\n    ], dtype=torch.float)\n\n    ratio = torch.where(\n        max_lengths == 0,\n        torch.zeros_like(distances).float(),\n        distances.float() / max_lengths\n    )\n\n    nls_values = 1 - ratio\n\n    # ...\n'})}),"\n",(0,i.jsxs)(e.h2,{id:"reduction-\u30D1\u30E9\u30E1\u30FC\u30BF\u306E\u5B9F\u88C5",children:[(0,i.jsx)(e.code,{children:"reduction"})," \u30D1\u30E9\u30E1\u30FC\u30BF\u306E\u5B9F\u88C5"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"reduction"})," \u30D1\u30E9\u30E1\u30FC\u30BF\u3092\u67D4\u8EDF\u306B\u6D3B\u7528\u3067\u304D\u308B\u3088\u3046\u306B\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002\u4F8B\u3048\u3070\u3001",(0,i.jsx)(e.code,{children:"mean"})," \u3092\u6307\u5B9A\u3057\u305F\u5834\u5408\u3001\u305D\u308C\u306F\u4E00\u822C\u7684\u306A ANLS \u30B9\u30B3\u30A2\u3092\u610F\u5473\u3057\u307E\u3059\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u307E\u305F\u3001\u901A\u5E38\u306E ",(0,i.jsx)(e.code,{children:"mean"})," \u4EE5\u5916\u306B\u3082\u3001",(0,i.jsx)(e.code,{children:"sum"})," \u3084 ",(0,i.jsx)(e.code,{children:"none"})," \u3092\u4F7F\u7528\u3057\u3066\u3001\u7570\u306A\u308B\u30CB\u30FC\u30BA\u3092\u6E80\u305F\u3059\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def _compute(\n    self,\n    nls_score: Tensor,\n    num_elements: Union[Tensor, int],\n) -> Tensor:\n    """\u72B6\u614B\u306B\u57FA\u3065\u3044\u3066 ANLS \u3092\u8A08\u7B97\u3057\u307E\u3059\u3002"""\n    if nls_score.numel() == 0:\n        return torch.tensor(0, dtype=torch.int32)\n    if self.reduction == "mean":\n        return nls_score.sum() / num_elements\n    if self.reduction == "sum":\n        return nls_score.sum()\n    if self.reduction is None or self.reduction == "none":\n        return nls_score\n\ndef compute(self) -> torch.Tensor:\n    """\u72B6\u614B\u306B\u57FA\u3065\u3044\u3066 NLS \u3092\u8A08\u7B97\u3057\u307E\u3059\u3002"""\n    if self.reduction == "none" or self.reduction is None:\n        return self._compute(dim_zero_cat(self.nls_values_list), 1)\n    return self._compute(self.nls_score, self.num_elements)\n'})}),"\n",(0,i.jsxs)(e.p,{children:["\u3053\u3053\u3067\u6CE8\u610F\u304C\u5FC5\u8981\u306A\u306E\u306F\u3001",(0,i.jsx)(e.code,{children:"reduction"})," \u306B ",(0,i.jsx)(e.code,{children:"none"})," \u3092\u6307\u5B9A\u3057\u305F\u5834\u5408\u3001NLS \u306E\u5024\u3059\u3079\u3066\u3092\u8FD4\u3057\u3001\u5E73\u5747\u5024\u3092\u8A08\u7B97\u3057\u306A\u3044\u70B9\u3067\u3059\u3002\u3053\u306E\u90E8\u5206\u3067\u306F\u3001",(0,i.jsx)(e.code,{children:"torchmetrics.text.EditDistance"})," \u306E\u5B9F\u88C5\u65B9\u6CD5\u3092\u53C2\u8003\u306B\u3057\u3066\u304A\u308A\u3001",(0,i.jsx)(e.code,{children:"dim_zero_cat"})," \u3092\u5229\u7528\u3057\u3066\u30EA\u30B9\u30C8\u5185\u306E\u5024\u3092\u9023\u7D50\u3057\u3001\u8FD4\u3055\u308C\u308B\u306E\u304C ",(0,i.jsx)(e.code,{children:"Tensor"})," \u5F62\u5F0F\u306B\u306A\u308B\u3088\u3046\u306B\u3057\u3066\u3044\u307E\u3059\u3002"]}),"\n",(0,i.jsx)(e.h2,{id:"\u5B8C\u5168\u306A\u5B9F\u88C5",children:"\u5B8C\u5168\u306A\u5B9F\u88C5"}),"\n",(0,i.jsx)(e.p,{children:"\u4EE5\u4E0B\u306F\u5B8C\u5168\u306A\u5B9F\u88C5\u30B3\u30FC\u30C9\u3067\u3059\uFF1A"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from typing import Any, Literal, Optional, Sequence, Union\n\nimport torch\nfrom torch import Tensor\nfrom torchmetrics.metric import Metric\nfrom torchmetrics.text import EditDistance\nfrom torchmetrics.utilities.data import dim_zero_cat\n\n\nclass NormalizedLevenshteinSimilarity(Metric):\n    """\n    Normalized Levenshtein Similarity (NLS) \u306F\u30012\u3064\u306E\u30B7\u30FC\u30B1\u30F3\u30B9\u9593\u306E\u6B63\u898F\u5316\u3055\u308C\u305F\n    Levenshtein \u985E\u4F3C\u5EA6\u3092\u8A08\u7B97\u3059\u308B\u6307\u6A19\u3067\u3059\u3002\n    \u3053\u306E\u6307\u6A19\u306F\u6B21\u306E\u3088\u3046\u306B\u8A08\u7B97\u3055\u308C\u307E\u3059\uFF1A\n        1 - (levenshtein_distance / max_length)\n    \u3053\u3053\u3067\u3001`levenshtein_distance` \u306F2\u3064\u306E\u30B7\u30FC\u30B1\u30F3\u30B9\u9593\u306E Levenshtein \u8DDD\u96E2\u3092\u8868\u3057\u3001\n    `max_length` \u306F2\u3064\u306E\u30B7\u30FC\u30B1\u30F3\u30B9\u306E\u3046\u3061\u306E\u6700\u5927\u9577\u3067\u3059\u3002\n\n    NLS \u306F\u6587\u5B57\u5217\u306E\u985E\u4F3C\u6027\u3092\u6E2C\u5B9A\u3059\u308B\u305F\u3081\u306B\u8A2D\u8A08\u3055\u308C\u3066\u304A\u308A\u3001\u7279\u306B\u30C6\u30AD\u30B9\u30C8\u985E\u4F3C\u6027\u5206\u6790\u3001\n    \u5149\u5B66\u5F0F\u6587\u5B57\u8A8D\u8B58\uFF08OCR\uFF09\u3001\u81EA\u7136\u8A00\u8A9E\u51E6\u7406\uFF08NLP\uFF09\u306A\u3069\u306E\u5206\u91CE\u3067\u6709\u7528\u3067\u3059\u3002\n\n    ``update`` \u304A\u3088\u3073 ``compute`` \u30E1\u30BD\u30C3\u30C9\u306E\u5165\u529B\u5F62\u5F0F\u306F\u4EE5\u4E0B\u306E\u901A\u308A\u3067\u3059\uFF1A\n\n    - ``preds`` (:class:`~Union[str, Sequence[str]]`):\n        \u4E88\u6E2C\u3055\u308C\u305F\u30C6\u30AD\u30B9\u30C8\u30B7\u30FC\u30B1\u30F3\u30B9\u307E\u305F\u306F\u305D\u306E\u30B3\u30EC\u30AF\u30B7\u30E7\u30F3\u3002\n    - ``target`` (:class:`~Union[str, Sequence[str]]`):\n        \u30BF\u30FC\u30B2\u30C3\u30C8\u3068\u306A\u308B\u30C6\u30AD\u30B9\u30C8\u30B7\u30FC\u30B1\u30F3\u30B9\u307E\u305F\u306F\u305D\u306E\u30B3\u30EC\u30AF\u30B7\u30E7\u30F3\u3002\n\n    ``compute`` \u30E1\u30BD\u30C3\u30C9\u306E\u51FA\u529B\u5F62\u5F0F\uFF1A\n\n    - ``nls`` (:class:`~torch.Tensor`): NLS \u5024\u3092\u542B\u3080\u30C6\u30F3\u30BD\u30EB\u3002\n        \u30B5\u30F3\u30D7\u30EB\u304C\u306A\u3044\u5834\u5408\u306F 0.0 \u3092\u8FD4\u3057\u3001\u30B5\u30F3\u30D7\u30EB\u304C\u3042\u308B\u5834\u5408\u306F NLS \u3092\u8FD4\u3057\u307E\u3059\u3002\n\n    Args:\n        substitution_cost:\n            1\u6587\u5B57\u306E\u7F6E\u63DB\u306B\u304B\u304B\u308B\u30B3\u30B9\u30C8\u3002\u30C7\u30D5\u30A9\u30EB\u30C8\u306F1\u3067\u3059\u3002\n        reduction:\n            \u30E1\u30C8\u30EA\u30C3\u30AF\u30B9\u30B3\u30A2\u3092\u96C6\u7D04\u3059\u308B\u65B9\u6CD5\u3002\n            \u30C7\u30D5\u30A9\u30EB\u30C8\u306F \'mean\' \u3067\u3001\u9078\u629E\u80A2\u306F \'sum\' \u307E\u305F\u306F None\u3002\n\n            - ``\'mean\'``: \u30B5\u30F3\u30D7\u30EB\u5168\u4F53\u306E\u5E73\u5747\uFF08ANLS\uFF09\u3092\u53D6\u308B\u3002\n            - ``\'sum\'``: \u30B5\u30F3\u30D7\u30EB\u5168\u4F53\u306E\u5408\u8A08\u3092\u53D6\u308B\u3002\n            - ``None`` \u307E\u305F\u306F ``\'none\'``: \u30B5\u30F3\u30D7\u30EB\u3054\u3068\u306E\u30B9\u30B3\u30A2\u3092\u8FD4\u3059\u3002\n\n        kwargs: \u305D\u306E\u4ED6\u306E\u30AD\u30FC\u30EF\u30FC\u30C9\u5F15\u6570\u3002\n\n    Example::\n        \u8907\u6570\u306E\u6587\u5B57\u5217\u3092\u6271\u3046\u4F8B\uFF1A\n\n        >>> metric = NormalizedLevenshteinSimilarity(reduction=None)\n        >>> preds = ["rain", "lnaguaeg"]\n        >>> target = ["shine", "language"]\n        >>> metric(preds, target)\n        tensor([0.4000, 0.5000])\n        >>> metric = NormalizedLevenshteinSimilarity(reduction="mean")\n        >>> metric(preds, target)\n        tensor(0.4500)\n    """\n\n    def __init__(\n        self,\n        substitution_cost: int = 1,\n        reduction: Optional[Literal["mean", "sum", "none"]] = "mean",\n        **kwargs: Any\n    ) -> None:\n        super().__init__(**kwargs)\n        self.edit_distance = EditDistance(\n            substitution_cost=substitution_cost,\n            reduction=None  # \u5168\u3066\u306E\u6587\u5B57\u5217\u30DA\u30A2\u306E\u8DDD\u96E2\u3092\u53D6\u5F97\u3059\u308B\u8A2D\u5B9A\n        )\n\n        allowed_reduction = (None, "mean", "sum", "none")\n        if reduction not in allowed_reduction:\n            raise ValueError(\n                f"Expected argument `reduction` to be one of {allowed_reduction}, but got {reduction}")\n        self.reduction = reduction\n\n        if self.reduction == "none" or self.reduction is None:\n            self.add_state(\n                "nls_values_list",\n                default=[],\n                dist_reduce_fx="cat"\n            )\n        else:\n            self.add_state(\n                "nls_score",\n                default=torch.tensor(0.0),\n                dist_reduce_fx="sum"\n            )\n            self.add_state(\n                "num_elements",\n                default=torch.tensor(0),\n                dist_reduce_fx="sum"\n            )\n\n    def update(self, preds: Union[str, Sequence[str]], target: Union[str, Sequence[str]]) -> None:\n        """\u4E88\u6E2C\u5024\u3068\u30BF\u30FC\u30B2\u30C3\u30C8\u3067\u72B6\u614B\u3092\u66F4\u65B0\u3057\u307E\u3059\u3002"""\n        if isinstance(preds, str):\n            preds = [preds]\n        if isinstance(target, str):\n            target = [target]\n\n        distances = self.edit_distance(preds, target)\n        max_lengths = torch.tensor([\n            max(len(p), len(t))\n            for p, t in zip(preds, target)\n        ], dtype=torch.float)\n\n        ratio = torch.where(\n            max_lengths == 0,\n            torch.zeros_like(distances).float(),\n            distances.float() / max_lengths\n        )\n\n        nls_values = 1 - ratio\n\n        if self.reduction == "none" or self.reduction is None:\n            self.nls_values_list.append(nls_values)\n        else:\n            self.nls_score += nls_values.sum()\n            self.num_elements += nls_values.shape[0]\n\n    def _compute(\n        self,\n        nls_score: Tensor,\n        num_elements: Union[Tensor, int],\n    ) -> Tensor:\n        """\u72B6\u614B\u306B\u57FA\u3065\u3044\u3066 ANLS \u3092\u8A08\u7B97\u3057\u307E\u3059\u3002"""\n        if nls_score.numel() == 0:\n            return torch.tensor(0, dtype=torch.int32)\n        if self.reduction == "mean":\n            return nls_score.sum() / num_elements\n        if self.reduction == "sum":\n            return nls_score.sum()\n        if self.reduction is None or self.reduction == "none":\n            return nls_score\n\n    def compute(self) -> torch.Tensor:\n        """\u72B6\u614B\u306B\u57FA\u3065\u3044\u3066 NLS \u3092\u8A08\u7B97\u3057\u307E\u3059\u3002"""\n        if self.reduction == "none" or self.reduction is None:\n            return self._compute(dim_zero_cat(self.nls_values_list), 1)\n        return self._compute(self.nls_score, self.num_elements)\n\n\nif __name__ == "__main__":\n    anls = NormalizedLevenshteinSimilarity(reduction=\'mean\')\n    preds = ["rain", "lnaguaeg"]\n    target = ["shine", "language"]\n    print(anls(preds, target))\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u6700\u5F8C\u306B",children:"\u6700\u5F8C\u306B"}),"\n",(0,i.jsx)(e.p,{children:"\u3053\u306E\u5B9F\u88C5\u304C\u5B8C\u5168\u306B\u6B63\u3057\u3044\u3068\u4FDD\u8A3C\u3067\u304D\u308B\u304B\uFF1F"}),"\n",(0,i.jsxs)(e.p,{children:["\u7B54\u3048\u306F ",(0,i.jsx)(e.strong,{children:"\u3044\u3044\u3048"})," \u3067\u3059\u3002\u3082\u3057\u554F\u984C\u3092\u767A\u898B\u3057\u305F\u5834\u5408\u306F\u3001\u305C\u3072\u3054\u6307\u6458\u304F\u3060\u3055\u3044\u3002\u5FC3\u3088\u308A\u611F\u8B1D\u3057\u307E\u3059\uFF01"]})]})}function u(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},50065:function(n,e,t){t.d(e,{Z:function(){return l},a:function(){return o}});var s=t(67294);let i={},r=s.createContext(i);function o(n){let e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),s.createElement(r.Provider,{value:e},n.children)}},60084:function(n){n.exports=JSON.parse('{"permalink":"/ja/blog/impl-normalized-levenshtein-similarity","source":"@site/i18n/ja/docusaurus-plugin-content-blog/2024/05-16-impl-normalized-levenshtein-similarity/index.md","title":"ANLS \u306E\u5B9F\u88C5","description":"Average Normalized Levenshtein Similarity","date":"2024-05-16T00:00:00.000Z","tags":[{"inline":true,"label":"pytorch","permalink":"/ja/blog/tags/pytorch"},{"inline":true,"label":"anls","permalink":"/ja/blog/tags/anls"}],"readingTime":8.865,"hasTruncateMarker":true,"authors":[{"name":"Z. Yuan","title":"Dosaid maintainer, Full-Stack AI Engineer","url":"https://github.com/zephyr-sh","socials":{"github":"https://github.com/zephyr-sh","linkedin":"https://www.linkedin.com/in/ze-yuan-sh7/"},"imageURL":"https://github.com/zephyr-sh.png","key":"Z. Yuan","page":null}],"frontMatter":{"slug":"impl-normalized-levenshtein-similarity","title":"ANLS \u306E\u5B9F\u88C5","authors":"Z. Yuan","image":"/ja/img/2024/0516.webp","tags":["pytorch","anls"],"description":"Average Normalized Levenshtein Similarity"},"unlisted":false,"prevItem":{"title":"LaTeX \u69CB\u6587\u30AF\u30A4\u30C3\u30AF\u30EA\u30D5\u30A1\u30EC\u30F3\u30B9\u8868","permalink":"/ja/blog/latex-usage"},"nextItem":{"title":"Python \u3068 JS \u306E\u57FA\u672C\u30B3\u30DE\u30F3\u30C9\u306E\u5BFE\u5FDC","permalink":"/ja/blog/python-js-basic-command-equivalents"}}')}}]);