"use strict";(self.webpackChunkdocsaid_website=self.webpackChunkdocsaid_website||[]).push([["14841"],{63139:function(e,n,s){s.r(n),s.d(n,{default:()=>p,frontMatter:()=>a,metadata:()=>r,assets:()=>o,toc:()=>d,contentTitle:()=>l});var r=JSON.parse('{"id":"gmailsummary/gmailapi_using","title":"Gmail API \u306E\u547C\u3073\u51FA\u3057","description":"\u8A2D\u5B9A\u304C\u5B8C\u4E86\u3057\u305F\u3089\u3001Gmail API \u3092\u4F7F\u7528\u3057\u59CB\u3081\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002","source":"@site/i18n/ja/docusaurus-plugin-content-docs/current/gmailsummary/gmailapi_using.md","sourceDirName":"gmailsummary","slug":"/gmailsummary/gmailapi_using","permalink":"/ja/docs/gmailsummary/gmailapi_using","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"zephyr-sh","lastUpdatedAt":1732802692000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Gmail API \u306E\u8A8D\u8A3C","permalink":"/ja/docs/gmailsummary/gmailapi_credentials"},"next":{"title":"OpenAI API \u306E\u6709\u52B9\u5316","permalink":"/ja/docs/gmailsummary/openaiapi_login"}}'),t=s("85893"),i=s("50065");let a={sidebar_position:4},l="Gmail API \u306E\u547C\u3073\u51FA\u3057",o={},d=[{value:"\u30D1\u30C3\u30B1\u30FC\u30B8\u306E\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",id:"\u30D1\u30C3\u30B1\u30FC\u30B8\u306E\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",level:2},{value:"\u8A2D\u5B9A\u4F8B",id:"\u8A2D\u5B9A\u4F8B",level:2},{value:"\u5B9F\u884C\u4F8B",id:"\u5B9F\u884C\u4F8B",level:2},{value:"\u4F7F\u7528\u958B\u59CB",id:"\u4F7F\u7528\u958B\u59CB",level:2},{value:"\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u306E\u4F5C\u6210",id:"\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u306E\u4F5C\u6210",level:3},{value:"\u30E1\u30FC\u30EB\u306E\u53D6\u5F97",id:"\u30E1\u30FC\u30EB\u306E\u53D6\u5F97",level:3},{value:"\u30E1\u30FC\u30EB\u306E\u89E3\u6790",id:"\u30E1\u30FC\u30EB\u306E\u89E3\u6790",level:3},{value:"\u307E\u3068\u3081",id:"\u307E\u3068\u3081",level:2}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"gmail-api-\u306E\u547C\u3073\u51FA\u3057",children:"Gmail API \u306E\u547C\u3073\u51FA\u3057"})}),"\n",(0,t.jsx)(n.p,{children:"\u8A2D\u5B9A\u304C\u5B8C\u4E86\u3057\u305F\u3089\u3001Gmail API \u3092\u4F7F\u7528\u3057\u59CB\u3081\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002"}),"\n",(0,t.jsxs)(n.p,{children:["\u307E\u305A\u3001\u5148\u307B\u3069\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9\u3057\u305F",(0,t.jsx)(n.code,{children:"credentials.json"}),"\u30D5\u30A1\u30A4\u30EB\u3092\u898B\u3064\u3051\u3001\u305D\u308C\u3092\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8\u306E\u30EB\u30FC\u30C8\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u306B\u914D\u7F6E\u3057\u307E\u3059\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u6B21\u306B\u3001Google \u304C\u63D0\u4F9B\u3057\u3066\u3044\u308B\u30C1\u30E5\u30FC\u30C8\u30EA\u30A2\u30EB\u3092\u958B\u304D\u307E\u3059\uFF1A",(0,t.jsx)(n.a,{href:"https://developers.google.com/gmail/api/quickstart/python",children:(0,t.jsx)(n.strong,{children:"Python quickstart"})})]}),"\n",(0,t.jsx)(n.h2,{id:"\u30D1\u30C3\u30B1\u30FC\u30B8\u306E\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB",children:"\u30D1\u30C3\u30B1\u30FC\u30B8\u306E\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB"}),"\n",(0,t.jsx)(n.p,{children:"Python \u7528\u306E Google \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u30E9\u30A4\u30D6\u30E9\u30EA\u3092\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\uFF1A"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install -U google-api-python-client google-auth-httplib2 google-auth-oauthlib\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u8A2D\u5B9A\u4F8B",children:"\u8A2D\u5B9A\u4F8B"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u4F5C\u696D\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u306B",(0,t.jsx)(n.code,{children:"quickstart.py"}),"\u3068\u3044\u3046\u540D\u524D\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u4F5C\u6210\u3057\u307E\u3059\u3002"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Google \u304C\u63D0\u4F9B\u3059\u308B\u30BD\u30FC\u30B9\u30B3\u30FC\u30C9\u3092\u305D\u306E\u307E\u307E\u4F7F\u3046\u3053\u3068\u3082\u3067\u304D\u307E\u3059\uFF1A",(0,t.jsx)(n.a,{href:"https://github.com/googleworkspace/python-samples/blob/main/gmail/quickstart/quickstart.py",children:(0,t.jsx)(n.strong,{children:"source code"})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["\u4EE5\u4E0B\u306E\u30B3\u30FC\u30C9\u3092",(0,t.jsx)(n.code,{children:"quickstart.py"}),"\u306B\u8FFD\u52A0\u3057\u307E\u3059\uFF1A"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="quickstart.py"',children:'import os.path\n\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\n\n# If modifying these scopes, delete the file token.json.\nSCOPES = ["https://www.googleapis.com/auth/gmail.readonly"]\n\n\ndef main():\n"""Shows basic usage of the Gmail API. Lists the user\'s Gmail labels."""\ncreds = None\n# The file token.json stores the user\'s access and refresh tokens, and is\n# created automatically when the authorization flow completes for the first\n# time.\nif os.path.exists("token.json"):\n    creds = Credentials.from_authorized_user_file("token.json", SCOPES)\n# If there are no (valid) credentials available, let the user log in.\nif not creds or not creds.valid:\n    if creds and creds.expired and creds.refresh_token:\n        creds.refresh(Request())\n    else:\n        flow = InstalledAppFlow.from_client_secrets_file(\n            "credentials.json", SCOPES\n        )\n        creds = flow.run_local_server(port=0)\n    # Save the credentials for the next run\n    with open("token.json", "w") as token:\n        token.write(creds.to_json())\n\ntry:\n    # Call the Gmail API\n    service = build("gmail", "v1", credentials=creds)\n    results = service.users().labels().list(userId="me").execute()\n    labels = results.get("labels", [])\n\n    if not labels:\n        print("No labels found.")\n        return\n    print("Labels:")\n    for label in labels:\n        print(label["name"])\n\nexcept HttpError as error:\n    # TODO(developer) - Handle errors from gmail API.\n    print(f"An error occurred: {error}")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\u5B9F\u884C\u4F8B",children:"\u5B9F\u884C\u4F8B"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"quickstart.py"}),"\u3092\u5B9F\u884C\u3057\u307E\u3059\uFF1A"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python quickstart.py\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"quickstart.py"}),"\u3092\u521D\u3081\u3066\u5B9F\u884C\u3059\u308B\u3068\u3001\u8A8D\u8A3C\u3092\u6C42\u3081\u3089\u308C\u307E\u3059\u3002\u300CAllow\u300D\u3092\u30AF\u30EA\u30C3\u30AF\u3057\u3066\u304F\u3060\u3055\u3044\u3002"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"gmail_19",src:s(25294).Z+"",width:"2814",height:"4294"})}),"\n",(0,t.jsx)(n.p,{children:"\u6B21\u306E\u3088\u3046\u306A\u51FA\u529B\u304C\u8868\u793A\u3055\u308C\u307E\u3059\uFF1A"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Labels:\nCHAT\nSENT\nINBOX\nIMPORTANT\nTRASH\nDRAFT\nSPAM\nCATEGORY_FORUMS\nCATEGORY_UPDATES\nCATEGORY_PERSONAL\nCATEGORY_PROMOTIONS\nCATEGORY_SOCIAL\nSTARRED\nUNREAD\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u307E\u305F\u3001",(0,t.jsx)(n.code,{children:"token.json"}),"\u3068\u3044\u3046\u30D5\u30A1\u30A4\u30EB\u304C\u53D6\u5F97\u3055\u308C\u3001\u6B21\u56DE",(0,t.jsx)(n.code,{children:"quickstart.py"}),"\u3092\u5B9F\u884C\u3059\u308B\u969B\u306B\u518D\u5EA6\u8A8D\u8A3C\u3092\u6C42\u3081\u3089\u308C\u308B\u3053\u3068\u306F\u306A\u304F\u306A\u308A\u307E\u3059\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u4F7F\u7528\u958B\u59CB",children:"\u4F7F\u7528\u958B\u59CB"}),"\n",(0,t.jsx)(n.p,{children:"\u6B21\u306B\u3001Gmail API \u3092\u4F7F\u7528\u3057\u3066\u30E1\u30FC\u30EB\u5185\u5BB9\u3092\u89E3\u6790\u3059\u308B\u6E96\u5099\u3092\u59CB\u3081\u307E\u3059\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u4EE5\u4E0B\u306E\u4E09\u3064\u306E\u90E8\u5206\u3092\u5B9F\u88C5\u3057\u307E\u3059\uFF1A\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u306E\u4F5C\u6210\u3001\u30E1\u30FC\u30EB\u306E\u53D6\u5F97\u3001\u30E1\u30FC\u30EB\u306E\u89E3\u6790\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u307E\u305A\u5FC5\u8981\u306A\u30D1\u30C3\u30B1\u30FC\u30B8\u3092\u30A4\u30F3\u30DD\u30FC\u30C8\u3057\u307E\u3059\uFF1A"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from base64 import urlsafe_b64decode\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List\n\nimport pytz\nfrom google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u306E\u4F5C\u6210",children:"\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u306E\u4F5C\u6210"}),"\n",(0,t.jsxs)(n.p,{children:["Gmail API \u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u3092\u4F5C\u6210\u3059\u308B\u3068\u304D\u3001",(0,t.jsx)(n.code,{children:"token.json"}),"\u306B\u4FDD\u5B58\u3055\u308C\u305F\u30E6\u30FC\u30B6\u30FC\u306E\u30A2\u30AF\u30BB\u30B9\u304A\u3088\u3073\u30EA\u30D5\u30EC\u30C3\u30B7\u30E5\u30C8\u30FC\u30AF\u30F3\u3092\u30ED\u30FC\u30C9\u3057\u3001\u30A2\u30AF\u30BB\u30B9\u4EE4\u724C\u304C\u671F\u9650\u5207\u308C\u306E\u5834\u5408\u306F\u81EA\u52D5\u7684\u306B\u30EA\u30D5\u30EC\u30C3\u30B7\u30E5\u3055\u308C\u307E\u3059\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def build_service():\n    creds = None\n    token_file = 'token.json'\n    creds = Credentials.from_authorized_user_file(\n        token_file, scopes=['https://www.googleapis.com/auth/gmail.readonly'])\n    service = build('gmail', 'v1', credentials=creds)\n    return service\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u30E1\u30FC\u30EB\u306E\u53D6\u5F97",children:"\u30E1\u30FC\u30EB\u306E\u53D6\u5F97"}),"\n",(0,t.jsx)(n.p,{children:"\u6B21\u306B\u3001\u30E6\u30FC\u30B6\u30FC\u304B\u3089\u30E1\u30FC\u30EB\u5185\u5BB9\u3092\u53D6\u5F97\u3059\u308B\u95A2\u6570\u3092\u5B9A\u7FA9\u3057\u307E\u3059\uFF1A"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_messages(\n    service,\n    user_id='me',\n    after_date=None,\n    subject_filter: str = None,\n    max_results: int = 500\n) -> List[Dict[str, str]]:\n\n    tz = pytz.timezone('Asia/Taipei')\n    if not after_date:\n        now = datetime.now(tz)\n        after_date = (now - timedelta(days=1)).strftime('%Y/%m/%d')\n\n    messages = []\n    try:\n        query = ''\n        if after_date:\n            query += f' after:{after_date}'\n        if subject_filter:\n            query += f' subject:(\"{subject_filter}\")'\n\n        response = service.users().messages().list(\n            userId=user_id, q=query, maxResults=max_results).execute()\n\n        messages.extend(response.get('messages', []))\n\n        # Handle pagination with nextPageToken\n        while 'nextPageToken' in response:\n            page_token = response['nextPageToken']\n            response = service.users().messages().list(\n                userId=user_id, q=query, maxResults=max_results, pageToken=page_token).execute()\n            messages.extend(response.get('messages', []))\n\n    except Exception as error:\n        print(f'An error occurred: {error}')\n\n    if not messages:\n        print(\"No messages found.\")\n\n    return messages\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u30E1\u30FC\u30EB\u306E\u89E3\u6790",children:"\u30E1\u30FC\u30EB\u306E\u89E3\u6790"}),"\n",(0,t.jsx)(n.p,{children:"\u30C7\u30FC\u30BF\u3092\u53D6\u5F97\u3057\u305F\u5F8C\u3001\u305D\u306E\u5185\u5BB9\u306F\u5927\u91CF\u306E\u30E1\u30BF\u30C7\u30FC\u30BF\u3092\u542B\u3093\u3067\u3044\u308B\u305F\u3081\u3001\u8AAD\u307F\u3084\u3059\u3044\u5F62\u5F0F\u306B\u89E3\u6790\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def parse_message(service, msg_id, user_id='me'):\n\n    try:\n        message = service.users().messages().get(\n            userId=user_id, id=msg_id, format='full').execute()\n        headers = message['payload']['headers']\n        parts = message['payload'].get('parts', [])\n        email_data = {\n            'Date': None,\n            'Subject': None,\n            'Text': None\n        }\n\n        # \u89E3\u6790\u30D8\u30C3\u30C0\u30FC\u60C5\u5831\uFF08\u9001\u4FE1\u65E5\u6642\u3001\u4EF6\u540D\u3001\u9001\u4FE1\u8005\u3001\u53D7\u4FE1\u8005\uFF09\n        for header in headers:\n            if header['name'] == 'Date':\n                email_data['Date'] = header['value']\n            elif header['name'] == 'Subject':\n                email_data['Subject'] = header['value']\n\n        # \u30E1\u30FC\u30EB\u672C\u6587\u306E\u89E3\u6790\n        for part in parts:\n            if part['mimeType'] == 'text/plain' or part['mimeType'] == 'text/html':\n                data = part['body']['data']\n                text = urlsafe_b64decode(data.encode('ASCII')).decode('UTF-8')\n                email_data['Text'] = text\n                break  # \u6700\u521D\u306B\u4E00\u81F4\u3057\u305F\u90E8\u5206\u306E\u307F\u3092\u53D6\u5F97\n\n        return email_data\n\n    except Exception as error:\n        print(f'An error occurred: {error}')\n        return None\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u307E\u3068\u3081",children:"\u307E\u3068\u3081"}),"\n",(0,t.jsx)(n.p,{children:"\u3053\u3053\u307E\u3067\u3067\u3001Gmail API \u306E\u57FA\u672C\u7684\u306A\u4F7F\u7528\u65B9\u6CD5\u306B\u3064\u3044\u3066\u8AAC\u660E\u3057\u307E\u3057\u305F\u3002"}),"\n",(0,t.jsx)(n.p,{children:"\u6B21\u306B\u9032\u3080\u524D\u306B\u3001\u3044\u304F\u3064\u304B\u6E96\u5099\u304C\u5FC5\u8981\u3067\u3059\u3002"}),"\n",(0,t.jsx)(n.p,{children:"OpenAI \u306E API \u3068\u63A5\u7D9A\u3057\u3001\u30E1\u30FC\u30EB\u5185\u5BB9\u3092 ChatGPT \u306B\u9001\u4FE1\u3057\u3066\u89E3\u6790\u3092\u884C\u3048\u308B\u3088\u3046\u306B\u3057\u307E\u3059\u3002"})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},25294:function(e,n,s){s.d(n,{Z:function(){return r}});let r=s.p+"assets/images/gmail19-90fd8dd43b0e5ab75169c1dbb4b94b2d.jpg"},50065:function(e,n,s){s.d(n,{Z:function(){return l},a:function(){return a}});var r=s(67294);let t={},i=r.createContext(t);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);